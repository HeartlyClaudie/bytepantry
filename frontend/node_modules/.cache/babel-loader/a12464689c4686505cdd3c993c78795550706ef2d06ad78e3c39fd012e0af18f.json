{"ast":null,"code":"/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { PerformanceEvents, invokeAsync, AuthenticationScheme, createClientConfigurationError, ClientConfigurationErrorCodes, StringUtils } from '@azure/msal-common/browser';\nimport { hashString } from '../crypto/BrowserCrypto.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Initializer function for all request APIs\r\n * @param request\r\n */\nasync function initializeBaseRequest(request, config, performanceClient, logger) {\n  performanceClient.addQueueMeasurement(PerformanceEvents.InitializeBaseRequest, request.correlationId);\n  const authority = request.authority || config.auth.authority;\n  const scopes = [...(request && request.scopes || [])];\n  const validatedRequest = {\n    ...request,\n    correlationId: request.correlationId,\n    authority,\n    scopes\n  };\n  // Set authenticationScheme to BEARER if not explicitly set in the request\n  if (!validatedRequest.authenticationScheme) {\n    validatedRequest.authenticationScheme = AuthenticationScheme.BEARER;\n    logger.verbose('Authentication Scheme wasn\\'t explicitly set in request, defaulting to \"Bearer\" request');\n  } else {\n    if (validatedRequest.authenticationScheme === AuthenticationScheme.SSH) {\n      if (!request.sshJwk) {\n        throw createClientConfigurationError(ClientConfigurationErrorCodes.missingSshJwk);\n      }\n      if (!request.sshKid) {\n        throw createClientConfigurationError(ClientConfigurationErrorCodes.missingSshKid);\n      }\n    }\n    logger.verbose(`Authentication Scheme set to \"${validatedRequest.authenticationScheme}\" as configured in Auth request`);\n  }\n  // Set requested claims hash if claims-based caching is enabled and claims were requested\n  if (config.cache.claimsBasedCachingEnabled && request.claims &&\n  // Checks for empty stringified object \"{}\" which doesn't qualify as requested claims\n  !StringUtils.isEmptyObj(request.claims)) {\n    validatedRequest.requestedClaimsHash = await hashString(request.claims);\n  }\n  return validatedRequest;\n}\nasync function initializeSilentRequest(request, account, config, performanceClient, logger) {\n  performanceClient.addQueueMeasurement(PerformanceEvents.InitializeSilentRequest, request.correlationId);\n  const baseRequest = await invokeAsync(initializeBaseRequest, PerformanceEvents.InitializeBaseRequest, logger, performanceClient, request.correlationId)(request, config, performanceClient, logger);\n  return {\n    ...request,\n    ...baseRequest,\n    account: account,\n    forceRefresh: request.forceRefresh || false\n  };\n}\nexport { initializeBaseRequest, initializeSilentRequest };","map":{"version":3,"names":["initializeBaseRequest","request","config","performanceClient","logger","addQueueMeasurement","PerformanceEvents","InitializeBaseRequest","correlationId","authority","auth","scopes","validatedRequest","authenticationScheme","AuthenticationScheme","BEARER","verbose","SSH","sshJwk","createClientConfigurationError","ClientConfigurationErrorCodes","missingSshJwk","sshKid","missingSshKid","cache","claimsBasedCachingEnabled","claims","StringUtils","isEmptyObj","requestedClaimsHash","hashString","initializeSilentRequest","account","InitializeSilentRequest","baseRequest","invokeAsync","forceRefresh"],"sources":["C:\\bytepantry\\frontend\\node_modules\\@azure\\msal-browser\\src\\request\\RequestHelpers.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    AccountInfo,\r\n    AuthenticationScheme,\r\n    BaseAuthRequest,\r\n    ClientConfigurationErrorCodes,\r\n    CommonSilentFlowRequest,\r\n    IPerformanceClient,\r\n    Logger,\r\n    PerformanceEvents,\r\n    StringUtils,\r\n    createClientConfigurationError,\r\n    invokeAsync,\r\n} from \"@azure/msal-common/browser\";\r\nimport { BrowserConfiguration } from \"../config/Configuration.js\";\r\nimport { SilentRequest } from \"./SilentRequest.js\";\r\nimport { hashString } from \"../crypto/BrowserCrypto.js\";\r\n\r\n/**\r\n * Initializer function for all request APIs\r\n * @param request\r\n */\r\nexport async function initializeBaseRequest(\r\n    request: Partial<BaseAuthRequest> & { correlationId: string },\r\n    config: BrowserConfiguration,\r\n    performanceClient: IPerformanceClient,\r\n    logger: Logger\r\n): Promise<BaseAuthRequest> {\r\n    performanceClient.addQueueMeasurement(\r\n        PerformanceEvents.InitializeBaseRequest,\r\n        request.correlationId\r\n    );\r\n    const authority = request.authority || config.auth.authority;\r\n\r\n    const scopes = [...((request && request.scopes) || [])];\r\n\r\n    const validatedRequest: BaseAuthRequest = {\r\n        ...request,\r\n        correlationId: request.correlationId,\r\n        authority,\r\n        scopes,\r\n    };\r\n\r\n    // Set authenticationScheme to BEARER if not explicitly set in the request\r\n    if (!validatedRequest.authenticationScheme) {\r\n        validatedRequest.authenticationScheme = AuthenticationScheme.BEARER;\r\n        logger.verbose(\r\n            'Authentication Scheme wasn\\'t explicitly set in request, defaulting to \"Bearer\" request'\r\n        );\r\n    } else {\r\n        if (\r\n            validatedRequest.authenticationScheme === AuthenticationScheme.SSH\r\n        ) {\r\n            if (!request.sshJwk) {\r\n                throw createClientConfigurationError(\r\n                    ClientConfigurationErrorCodes.missingSshJwk\r\n                );\r\n            }\r\n            if (!request.sshKid) {\r\n                throw createClientConfigurationError(\r\n                    ClientConfigurationErrorCodes.missingSshKid\r\n                );\r\n            }\r\n        }\r\n        logger.verbose(\r\n            `Authentication Scheme set to \"${validatedRequest.authenticationScheme}\" as configured in Auth request`\r\n        );\r\n    }\r\n\r\n    // Set requested claims hash if claims-based caching is enabled and claims were requested\r\n    if (\r\n        config.cache.claimsBasedCachingEnabled &&\r\n        request.claims &&\r\n        // Checks for empty stringified object \"{}\" which doesn't qualify as requested claims\r\n        !StringUtils.isEmptyObj(request.claims)\r\n    ) {\r\n        validatedRequest.requestedClaimsHash = await hashString(request.claims);\r\n    }\r\n\r\n    return validatedRequest;\r\n}\r\n\r\nexport async function initializeSilentRequest(\r\n    request: SilentRequest & { correlationId: string },\r\n    account: AccountInfo,\r\n    config: BrowserConfiguration,\r\n    performanceClient: IPerformanceClient,\r\n    logger: Logger\r\n): Promise<CommonSilentFlowRequest> {\r\n    performanceClient.addQueueMeasurement(\r\n        PerformanceEvents.InitializeSilentRequest,\r\n        request.correlationId\r\n    );\r\n\r\n    const baseRequest = await invokeAsync(\r\n        initializeBaseRequest,\r\n        PerformanceEvents.InitializeBaseRequest,\r\n        logger,\r\n        performanceClient,\r\n        request.correlationId\r\n    )(request, config, performanceClient, logger);\r\n    return {\r\n        ...request,\r\n        ...baseRequest,\r\n        account: account,\r\n        forceRefresh: request.forceRefresh || false,\r\n    };\r\n}\r\n"],"mappings":";;;;;;AAAA;;;AAGG;AAmBH;;;AAGG;AACI,eAAeA,qBAAqBA,CACvCC,OAA6D,EAC7DC,MAA4B,EAC5BC,iBAAqC,EACrCC,MAAc;EAEdD,iBAAiB,CAACE,mBAAmB,CACjCC,iBAAiB,CAACC,qBAAqB,EACvCN,OAAO,CAACO,aAAa,CACxB;EACD,MAAMC,SAAS,GAAGR,OAAO,CAACQ,SAAS,IAAIP,MAAM,CAACQ,IAAI,CAACD,SAAS;EAE5D,MAAME,MAAM,GAAG,CAAC,IAAKV,OAAO,IAAIA,OAAO,CAACU,MAAM,IAAK,EAAE,CAAC,CAAC;EAEvD,MAAMC,gBAAgB,GAAoB;IACtC,GAAGX,OAAO;IACVO,aAAa,EAAEP,OAAO,CAACO,aAAa;IACpCC,SAAS;IACTE;GACH;;EAGD,IAAI,CAACC,gBAAgB,CAACC,oBAAoB,EAAE;IACxCD,gBAAgB,CAACC,oBAAoB,GAAGC,oBAAoB,CAACC,MAAM;IACnEX,MAAM,CAACY,OAAO,CACV,yFAAyF,CAC5F;EACJ,OAAM;IACH,IACIJ,gBAAgB,CAACC,oBAAoB,KAAKC,oBAAoB,CAACG,GAAG,EACpE;MACE,IAAI,CAAChB,OAAO,CAACiB,MAAM,EAAE;QACjB,MAAMC,8BAA8B,CAChCC,6BAA6B,CAACC,aAAa,CAC9C;MACJ;MACD,IAAI,CAACpB,OAAO,CAACqB,MAAM,EAAE;QACjB,MAAMH,8BAA8B,CAChCC,6BAA6B,CAACG,aAAa,CAC9C;MACJ;IACJ;IACDnB,MAAM,CAACY,OAAO,CACV,iCAAiCJ,gBAAgB,CAACC,oBAAoB,iCAAiC,CAC1G;EACJ;;EAGD,IACIX,MAAM,CAACsB,KAAK,CAACC,yBAAyB,IACtCxB,OAAO,CAACyB,MAAM;;EAEd,CAACC,WAAW,CAACC,UAAU,CAAC3B,OAAO,CAACyB,MAAM,CAAC,EACzC;IACEd,gBAAgB,CAACiB,mBAAmB,GAAG,MAAMC,UAAU,CAAC7B,OAAO,CAACyB,MAAM,CAAC;EAC1E;EAED,OAAOd,gBAAgB;AAC3B;AAEO,eAAemB,uBAAuBA,CACzC9B,OAAkD,EAClD+B,OAAoB,EACpB9B,MAA4B,EAC5BC,iBAAqC,EACrCC,MAAc;EAEdD,iBAAiB,CAACE,mBAAmB,CACjCC,iBAAiB,CAAC2B,uBAAuB,EACzChC,OAAO,CAACO,aAAa,CACxB;EAED,MAAM0B,WAAW,GAAG,MAAMC,WAAW,CACjCnC,qBAAqB,EACrBM,iBAAiB,CAACC,qBAAqB,EACvCH,MAAM,EACND,iBAAiB,EACjBF,OAAO,CAACO,aAAa,CACxB,CAACP,OAAO,EAAEC,MAAM,EAAEC,iBAAiB,EAAEC,MAAM,CAAC;EAC7C,OAAO;IACH,GAAGH,OAAO;IACV,GAAGiC,WAAW;IACdF,OAAO,EAAEA,OAAO;IAChBI,YAAY,EAAEnC,OAAO,CAACmC,YAAY,IAAI;GACzC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}