{"ast":null,"code":"/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { AuthError } from '@azure/msal-common/browser';\nimport { pkceNotCreated, cryptoNonExistent, emptyNavigateUri, hashEmptyError, noStateInHash, hashDoesNotContainKnownProperties, unableToParseState, stateInteractionTypeMismatch, interactionInProgress, popupWindowError, emptyWindowError, userCancelled, monitorPopupTimeout, monitorWindowTimeout, redirectInIframe, blockIframeReload, blockNestedPopups, iframeClosedPrematurely, silentLogoutUnsupported, noAccountError, silentPromptValueError, noTokenRequestCacheError, unableToParseTokenRequestCacheError, noCachedAuthorityError, authRequestNotSetError, invalidCacheType, nonBrowserEnvironment, databaseNotOpen, noNetworkConnectivity, postRequestFailed, getRequestFailed, failedToParseResponse, unableToLoadToken, cryptoKeyNotFound, authCodeRequired, authCodeOrNativeAccountIdRequired, spaCodeAndNativeAccountIdPresent, databaseUnavailable, unableToAcquireTokenFromNativePlatform, nativeHandshakeTimeout, nativeExtensionNotInstalled, nativeConnectionNotEstablished, uninitializedPublicClientApplication, nativePromptNotSupported, invalidBase64String, invalidPopTokenRequest, failedToBuildHeaders, failedToParseHeaders } from './BrowserAuthErrorCodes.mjs';\nimport * as BrowserAuthErrorCodes from './BrowserAuthErrorCodes.mjs';\nexport { BrowserAuthErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst ErrorLink = \"For more visit: aka.ms/msaljs/browser-errors\";\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\nconst BrowserAuthErrorMessages = {\n  [pkceNotCreated]: \"The PKCE code challenge and verifier could not be generated.\",\n  [cryptoNonExistent]: \"The crypto object or function is not available.\",\n  [emptyNavigateUri]: \"Navigation URI is empty. Please check stack trace for more info.\",\n  [hashEmptyError]: `Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash. ${ErrorLink}`,\n  [noStateInHash]: \"Hash does not contain state. Please verify that the request originated from msal.\",\n  [hashDoesNotContainKnownProperties]: `Hash does not contain known properites. Please verify that your redirectUri is not changing the hash.  ${ErrorLink}`,\n  [unableToParseState]: \"Unable to parse state. Please verify that the request originated from msal.\",\n  [stateInteractionTypeMismatch]: \"Hash contains state but the interaction type does not match the caller.\",\n  [interactionInProgress]: `Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.   ${ErrorLink}`,\n  [popupWindowError]: \"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.\",\n  [emptyWindowError]: \"window.open returned null or undefined window object.\",\n  [userCancelled]: \"User cancelled the flow.\",\n  [monitorPopupTimeout]: `Token acquisition in popup failed due to timeout.  ${ErrorLink}`,\n  [monitorWindowTimeout]: `Token acquisition in iframe failed due to timeout.  ${ErrorLink}`,\n  [redirectInIframe]: \"Redirects are not supported for iframed or brokered applications. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs.\",\n  [blockIframeReload]: `Request was blocked inside an iframe because MSAL detected an authentication response.  ${ErrorLink}`,\n  [blockNestedPopups]: \"Request was blocked inside a popup because MSAL detected it was running in a popup.\",\n  [iframeClosedPrematurely]: \"The iframe being monitored was closed prematurely.\",\n  [silentLogoutUnsupported]: \"Silent logout not supported. Please call logoutRedirect or logoutPopup instead.\",\n  [noAccountError]: \"No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request.\",\n  [silentPromptValueError]: \"The value given for the prompt value is not valid for silent requests - must be set to 'none' or 'no_session'.\",\n  [noTokenRequestCacheError]: \"No token request found in cache.\",\n  [unableToParseTokenRequestCacheError]: \"The cached token request could not be parsed.\",\n  [noCachedAuthorityError]: \"No cached authority found.\",\n  [authRequestNotSetError]: \"Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler\",\n  [invalidCacheType]: \"Invalid cache type\",\n  [nonBrowserEnvironment]: \"Login and token requests are not supported in non-browser environments.\",\n  [databaseNotOpen]: \"Database is not open!\",\n  [noNetworkConnectivity]: \"No network connectivity. Check your internet connection.\",\n  [postRequestFailed]: \"Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'\",\n  [getRequestFailed]: \"Network request failed. Please check the network trace to determine root cause.\",\n  [failedToParseResponse]: \"Failed to parse network response. Check network trace.\",\n  [unableToLoadToken]: \"Error loading token to cache.\",\n  [cryptoKeyNotFound]: \"Cryptographic Key or Keypair not found in browser storage.\",\n  [authCodeRequired]: \"An authorization code must be provided (as the `code` property on the request) to this flow.\",\n  [authCodeOrNativeAccountIdRequired]: \"An authorization code or nativeAccountId must be provided to this flow.\",\n  [spaCodeAndNativeAccountIdPresent]: \"Request cannot contain both spa code and native account id.\",\n  [databaseUnavailable]: \"IndexedDB, which is required for persistent cryptographic key storage, is unavailable. This may be caused by browser privacy features which block persistent storage in third-party contexts.\",\n  [unableToAcquireTokenFromNativePlatform]: `Unable to acquire token from native platform.  ${ErrorLink}`,\n  [nativeHandshakeTimeout]: \"Timed out while attempting to establish connection to browser extension\",\n  [nativeExtensionNotInstalled]: \"Native extension is not installed. If you think this is a mistake call the initialize function.\",\n  [nativeConnectionNotEstablished]: `Connection to native platform has not been established. Please install a compatible browser extension and run initialize().  ${ErrorLink}`,\n  [uninitializedPublicClientApplication]: `You must call and await the initialize function before attempting to call any other MSAL API.  ${ErrorLink}`,\n  [nativePromptNotSupported]: \"The provided prompt is not supported by the native platform. This request should be routed to the web based flow.\",\n  [invalidBase64String]: \"Invalid base64 encoded string.\",\n  [invalidPopTokenRequest]: \"Invalid PoP token request. The request should not have both a popKid value and signPopToken set to true.\",\n  [failedToBuildHeaders]: \"Failed to build request headers object.\",\n  [failedToParseHeaders]: \"Failed to parse response headers\"\n};\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use exported BrowserAuthErrorCodes instead.\r\n * In your app you can do :\r\n * ```\r\n * import { BrowserAuthErrorCodes } from \"@azure/msal-browser\";\r\n * ```\r\n */\nconst BrowserAuthErrorMessage = {\n  pkceNotGenerated: {\n    code: pkceNotCreated,\n    desc: BrowserAuthErrorMessages[pkceNotCreated]\n  },\n  cryptoDoesNotExist: {\n    code: cryptoNonExistent,\n    desc: BrowserAuthErrorMessages[cryptoNonExistent]\n  },\n  emptyNavigateUriError: {\n    code: emptyNavigateUri,\n    desc: BrowserAuthErrorMessages[emptyNavigateUri]\n  },\n  hashEmptyError: {\n    code: hashEmptyError,\n    desc: BrowserAuthErrorMessages[hashEmptyError]\n  },\n  hashDoesNotContainStateError: {\n    code: noStateInHash,\n    desc: BrowserAuthErrorMessages[noStateInHash]\n  },\n  hashDoesNotContainKnownPropertiesError: {\n    code: hashDoesNotContainKnownProperties,\n    desc: BrowserAuthErrorMessages[hashDoesNotContainKnownProperties]\n  },\n  unableToParseStateError: {\n    code: unableToParseState,\n    desc: BrowserAuthErrorMessages[unableToParseState]\n  },\n  stateInteractionTypeMismatchError: {\n    code: stateInteractionTypeMismatch,\n    desc: BrowserAuthErrorMessages[stateInteractionTypeMismatch]\n  },\n  interactionInProgress: {\n    code: interactionInProgress,\n    desc: BrowserAuthErrorMessages[interactionInProgress]\n  },\n  popupWindowError: {\n    code: popupWindowError,\n    desc: BrowserAuthErrorMessages[popupWindowError]\n  },\n  emptyWindowError: {\n    code: emptyWindowError,\n    desc: BrowserAuthErrorMessages[emptyWindowError]\n  },\n  userCancelledError: {\n    code: userCancelled,\n    desc: BrowserAuthErrorMessages[userCancelled]\n  },\n  monitorPopupTimeoutError: {\n    code: monitorPopupTimeout,\n    desc: BrowserAuthErrorMessages[monitorPopupTimeout]\n  },\n  monitorIframeTimeoutError: {\n    code: monitorWindowTimeout,\n    desc: BrowserAuthErrorMessages[monitorWindowTimeout]\n  },\n  redirectInIframeError: {\n    code: redirectInIframe,\n    desc: BrowserAuthErrorMessages[redirectInIframe]\n  },\n  blockTokenRequestsInHiddenIframeError: {\n    code: blockIframeReload,\n    desc: BrowserAuthErrorMessages[blockIframeReload]\n  },\n  blockAcquireTokenInPopupsError: {\n    code: blockNestedPopups,\n    desc: BrowserAuthErrorMessages[blockNestedPopups]\n  },\n  iframeClosedPrematurelyError: {\n    code: iframeClosedPrematurely,\n    desc: BrowserAuthErrorMessages[iframeClosedPrematurely]\n  },\n  silentLogoutUnsupportedError: {\n    code: silentLogoutUnsupported,\n    desc: BrowserAuthErrorMessages[silentLogoutUnsupported]\n  },\n  noAccountError: {\n    code: noAccountError,\n    desc: BrowserAuthErrorMessages[noAccountError]\n  },\n  silentPromptValueError: {\n    code: silentPromptValueError,\n    desc: BrowserAuthErrorMessages[silentPromptValueError]\n  },\n  noTokenRequestCacheError: {\n    code: noTokenRequestCacheError,\n    desc: BrowserAuthErrorMessages[noTokenRequestCacheError]\n  },\n  unableToParseTokenRequestCacheError: {\n    code: unableToParseTokenRequestCacheError,\n    desc: BrowserAuthErrorMessages[unableToParseTokenRequestCacheError]\n  },\n  noCachedAuthorityError: {\n    code: noCachedAuthorityError,\n    desc: BrowserAuthErrorMessages[noCachedAuthorityError]\n  },\n  authRequestNotSet: {\n    code: authRequestNotSetError,\n    desc: BrowserAuthErrorMessages[authRequestNotSetError]\n  },\n  invalidCacheType: {\n    code: invalidCacheType,\n    desc: BrowserAuthErrorMessages[invalidCacheType]\n  },\n  notInBrowserEnvironment: {\n    code: nonBrowserEnvironment,\n    desc: BrowserAuthErrorMessages[nonBrowserEnvironment]\n  },\n  databaseNotOpen: {\n    code: databaseNotOpen,\n    desc: BrowserAuthErrorMessages[databaseNotOpen]\n  },\n  noNetworkConnectivity: {\n    code: noNetworkConnectivity,\n    desc: BrowserAuthErrorMessages[noNetworkConnectivity]\n  },\n  postRequestFailed: {\n    code: postRequestFailed,\n    desc: BrowserAuthErrorMessages[postRequestFailed]\n  },\n  getRequestFailed: {\n    code: getRequestFailed,\n    desc: BrowserAuthErrorMessages[getRequestFailed]\n  },\n  failedToParseNetworkResponse: {\n    code: failedToParseResponse,\n    desc: BrowserAuthErrorMessages[failedToParseResponse]\n  },\n  unableToLoadTokenError: {\n    code: unableToLoadToken,\n    desc: BrowserAuthErrorMessages[unableToLoadToken]\n  },\n  signingKeyNotFoundInStorage: {\n    code: cryptoKeyNotFound,\n    desc: BrowserAuthErrorMessages[cryptoKeyNotFound]\n  },\n  authCodeRequired: {\n    code: authCodeRequired,\n    desc: BrowserAuthErrorMessages[authCodeRequired]\n  },\n  authCodeOrNativeAccountRequired: {\n    code: authCodeOrNativeAccountIdRequired,\n    desc: BrowserAuthErrorMessages[authCodeOrNativeAccountIdRequired]\n  },\n  spaCodeAndNativeAccountPresent: {\n    code: spaCodeAndNativeAccountIdPresent,\n    desc: BrowserAuthErrorMessages[spaCodeAndNativeAccountIdPresent]\n  },\n  databaseUnavailable: {\n    code: databaseUnavailable,\n    desc: BrowserAuthErrorMessages[databaseUnavailable]\n  },\n  unableToAcquireTokenFromNativePlatform: {\n    code: unableToAcquireTokenFromNativePlatform,\n    desc: BrowserAuthErrorMessages[unableToAcquireTokenFromNativePlatform]\n  },\n  nativeHandshakeTimeout: {\n    code: nativeHandshakeTimeout,\n    desc: BrowserAuthErrorMessages[nativeHandshakeTimeout]\n  },\n  nativeExtensionNotInstalled: {\n    code: nativeExtensionNotInstalled,\n    desc: BrowserAuthErrorMessages[nativeExtensionNotInstalled]\n  },\n  nativeConnectionNotEstablished: {\n    code: nativeConnectionNotEstablished,\n    desc: BrowserAuthErrorMessages[nativeConnectionNotEstablished]\n  },\n  uninitializedPublicClientApplication: {\n    code: uninitializedPublicClientApplication,\n    desc: BrowserAuthErrorMessages[uninitializedPublicClientApplication]\n  },\n  nativePromptNotSupported: {\n    code: nativePromptNotSupported,\n    desc: BrowserAuthErrorMessages[nativePromptNotSupported]\n  },\n  invalidBase64StringError: {\n    code: invalidBase64String,\n    desc: BrowserAuthErrorMessages[invalidBase64String]\n  },\n  invalidPopTokenRequest: {\n    code: invalidPopTokenRequest,\n    desc: BrowserAuthErrorMessages[invalidPopTokenRequest]\n  }\n};\n/**\r\n * Browser library error class thrown by the MSAL.js library for SPAs\r\n */\nclass BrowserAuthError extends AuthError {\n  constructor(errorCode, subError) {\n    super(errorCode, BrowserAuthErrorMessages[errorCode], subError);\n    Object.setPrototypeOf(this, BrowserAuthError.prototype);\n    this.name = \"BrowserAuthError\";\n  }\n}\nfunction createBrowserAuthError(errorCode, subError) {\n  return new BrowserAuthError(errorCode, subError);\n}\nexport { BrowserAuthError, BrowserAuthErrorMessage, BrowserAuthErrorMessages, createBrowserAuthError };","map":{"version":3,"names":["ErrorLink","BrowserAuthErrorMessages","pkceNotCreated","cryptoNonExistent","emptyNavigateUri","hashEmptyError","noStateInHash","hashDoesNotContainKnownProperties","unableToParseState","stateInteractionTypeMismatch","interactionInProgress","popupWindowError","emptyWindowError","userCancelled","monitorPopupTimeout","monitorWindowTimeout","redirectInIframe","blockIframeReload","blockNestedPopups","iframeClosedPrematurely","silentLogoutUnsupported","noAccountError","silentPromptValueError","noTokenRequestCacheError","unableToParseTokenRequestCacheError","noCachedAuthorityError","authRequestNotSetError","invalidCacheType","nonBrowserEnvironment","databaseNotOpen","noNetworkConnectivity","postRequestFailed","getRequestFailed","failedToParseResponse","unableToLoadToken","cryptoKeyNotFound","authCodeRequired","authCodeOrNativeAccountIdRequired","spaCodeAndNativeAccountIdPresent","databaseUnavailable","unableToAcquireTokenFromNativePlatform","nativeHandshakeTimeout","nativeExtensionNotInstalled","nativeConnectionNotEstablished","uninitializedPublicClientApplication","nativePromptNotSupported","invalidBase64String","invalidPopTokenRequest","failedToBuildHeaders","failedToParseHeaders","BrowserAuthErrorMessage","pkceNotGenerated","code","desc","cryptoDoesNotExist","emptyNavigateUriError","hashDoesNotContainStateError","hashDoesNotContainKnownPropertiesError","unableToParseStateError","stateInteractionTypeMismatchError","userCancelledError","monitorPopupTimeoutError","monitorIframeTimeoutError","redirectInIframeError","blockTokenRequestsInHiddenIframeError","blockAcquireTokenInPopupsError","iframeClosedPrematurelyError","silentLogoutUnsupportedError","authRequestNotSet","notInBrowserEnvironment","failedToParseNetworkResponse","unableToLoadTokenError","signingKeyNotFoundInStorage","authCodeOrNativeAccountRequired","spaCodeAndNativeAccountPresent","invalidBase64StringError","BrowserAuthError","AuthError","constructor","errorCode","subError","Object","setPrototypeOf","prototype","name","createBrowserAuthError"],"sources":["C:\\bytepantry\\frontend\\node_modules\\@azure\\msal-browser\\src\\error\\BrowserAuthError.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthError } from \"@azure/msal-common/browser\";\r\nimport * as BrowserAuthErrorCodes from \"./BrowserAuthErrorCodes.js\";\r\nexport { BrowserAuthErrorCodes }; // Allow importing as \"BrowserAuthErrorCodes\"\r\n\r\nconst ErrorLink = \"For more visit: aka.ms/msaljs/browser-errors\";\r\n\r\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nexport const BrowserAuthErrorMessages = {\r\n    [BrowserAuthErrorCodes.pkceNotCreated]:\r\n        \"The PKCE code challenge and verifier could not be generated.\",\r\n    [BrowserAuthErrorCodes.cryptoNonExistent]:\r\n        \"The crypto object or function is not available.\",\r\n    [BrowserAuthErrorCodes.emptyNavigateUri]:\r\n        \"Navigation URI is empty. Please check stack trace for more info.\",\r\n    [BrowserAuthErrorCodes.hashEmptyError]: `Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash. ${ErrorLink}`,\r\n    [BrowserAuthErrorCodes.noStateInHash]:\r\n        \"Hash does not contain state. Please verify that the request originated from msal.\",\r\n    [BrowserAuthErrorCodes.hashDoesNotContainKnownProperties]: `Hash does not contain known properites. Please verify that your redirectUri is not changing the hash.  ${ErrorLink}`,\r\n    [BrowserAuthErrorCodes.unableToParseState]:\r\n        \"Unable to parse state. Please verify that the request originated from msal.\",\r\n    [BrowserAuthErrorCodes.stateInteractionTypeMismatch]:\r\n        \"Hash contains state but the interaction type does not match the caller.\",\r\n    [BrowserAuthErrorCodes.interactionInProgress]: `Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.   ${ErrorLink}`,\r\n    [BrowserAuthErrorCodes.popupWindowError]:\r\n        \"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.\",\r\n    [BrowserAuthErrorCodes.emptyWindowError]:\r\n        \"window.open returned null or undefined window object.\",\r\n    [BrowserAuthErrorCodes.userCancelled]: \"User cancelled the flow.\",\r\n    [BrowserAuthErrorCodes.monitorPopupTimeout]: `Token acquisition in popup failed due to timeout.  ${ErrorLink}`,\r\n    [BrowserAuthErrorCodes.monitorWindowTimeout]: `Token acquisition in iframe failed due to timeout.  ${ErrorLink}`,\r\n    [BrowserAuthErrorCodes.redirectInIframe]:\r\n        \"Redirects are not supported for iframed or brokered applications. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs.\",\r\n    [BrowserAuthErrorCodes.blockIframeReload]: `Request was blocked inside an iframe because MSAL detected an authentication response.  ${ErrorLink}`,\r\n    [BrowserAuthErrorCodes.blockNestedPopups]:\r\n        \"Request was blocked inside a popup because MSAL detected it was running in a popup.\",\r\n    [BrowserAuthErrorCodes.iframeClosedPrematurely]:\r\n        \"The iframe being monitored was closed prematurely.\",\r\n    [BrowserAuthErrorCodes.silentLogoutUnsupported]:\r\n        \"Silent logout not supported. Please call logoutRedirect or logoutPopup instead.\",\r\n    [BrowserAuthErrorCodes.noAccountError]:\r\n        \"No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request.\",\r\n    [BrowserAuthErrorCodes.silentPromptValueError]:\r\n        \"The value given for the prompt value is not valid for silent requests - must be set to 'none' or 'no_session'.\",\r\n    [BrowserAuthErrorCodes.noTokenRequestCacheError]:\r\n        \"No token request found in cache.\",\r\n    [BrowserAuthErrorCodes.unableToParseTokenRequestCacheError]:\r\n        \"The cached token request could not be parsed.\",\r\n    [BrowserAuthErrorCodes.noCachedAuthorityError]:\r\n        \"No cached authority found.\",\r\n    [BrowserAuthErrorCodes.authRequestNotSetError]:\r\n        \"Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler\",\r\n    [BrowserAuthErrorCodes.invalidCacheType]: \"Invalid cache type\",\r\n    [BrowserAuthErrorCodes.nonBrowserEnvironment]:\r\n        \"Login and token requests are not supported in non-browser environments.\",\r\n    [BrowserAuthErrorCodes.databaseNotOpen]: \"Database is not open!\",\r\n    [BrowserAuthErrorCodes.noNetworkConnectivity]:\r\n        \"No network connectivity. Check your internet connection.\",\r\n    [BrowserAuthErrorCodes.postRequestFailed]:\r\n        \"Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'\",\r\n    [BrowserAuthErrorCodes.getRequestFailed]:\r\n        \"Network request failed. Please check the network trace to determine root cause.\",\r\n    [BrowserAuthErrorCodes.failedToParseResponse]:\r\n        \"Failed to parse network response. Check network trace.\",\r\n    [BrowserAuthErrorCodes.unableToLoadToken]: \"Error loading token to cache.\",\r\n    [BrowserAuthErrorCodes.cryptoKeyNotFound]:\r\n        \"Cryptographic Key or Keypair not found in browser storage.\",\r\n    [BrowserAuthErrorCodes.authCodeRequired]:\r\n        \"An authorization code must be provided (as the `code` property on the request) to this flow.\",\r\n    [BrowserAuthErrorCodes.authCodeOrNativeAccountIdRequired]:\r\n        \"An authorization code or nativeAccountId must be provided to this flow.\",\r\n    [BrowserAuthErrorCodes.spaCodeAndNativeAccountIdPresent]:\r\n        \"Request cannot contain both spa code and native account id.\",\r\n    [BrowserAuthErrorCodes.databaseUnavailable]:\r\n        \"IndexedDB, which is required for persistent cryptographic key storage, is unavailable. This may be caused by browser privacy features which block persistent storage in third-party contexts.\",\r\n    [BrowserAuthErrorCodes.unableToAcquireTokenFromNativePlatform]: `Unable to acquire token from native platform.  ${ErrorLink}`,\r\n    [BrowserAuthErrorCodes.nativeHandshakeTimeout]:\r\n        \"Timed out while attempting to establish connection to browser extension\",\r\n    [BrowserAuthErrorCodes.nativeExtensionNotInstalled]:\r\n        \"Native extension is not installed. If you think this is a mistake call the initialize function.\",\r\n    [BrowserAuthErrorCodes.nativeConnectionNotEstablished]: `Connection to native platform has not been established. Please install a compatible browser extension and run initialize().  ${ErrorLink}`,\r\n    [BrowserAuthErrorCodes.uninitializedPublicClientApplication]: `You must call and await the initialize function before attempting to call any other MSAL API.  ${ErrorLink}`,\r\n    [BrowserAuthErrorCodes.nativePromptNotSupported]:\r\n        \"The provided prompt is not supported by the native platform. This request should be routed to the web based flow.\",\r\n    [BrowserAuthErrorCodes.invalidBase64String]:\r\n        \"Invalid base64 encoded string.\",\r\n    [BrowserAuthErrorCodes.invalidPopTokenRequest]:\r\n        \"Invalid PoP token request. The request should not have both a popKid value and signPopToken set to true.\",\r\n    [BrowserAuthErrorCodes.failedToBuildHeaders]:\r\n        \"Failed to build request headers object.\",\r\n    [BrowserAuthErrorCodes.failedToParseHeaders]:\r\n        \"Failed to parse response headers\",\r\n};\r\n\r\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use exported BrowserAuthErrorCodes instead.\r\n * In your app you can do :\r\n * ```\r\n * import { BrowserAuthErrorCodes } from \"@azure/msal-browser\";\r\n * ```\r\n */\r\nexport const BrowserAuthErrorMessage = {\r\n    pkceNotGenerated: {\r\n        code: BrowserAuthErrorCodes.pkceNotCreated,\r\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.pkceNotCreated],\r\n    },\r\n    cryptoDoesNotExist: {\r\n        code: BrowserAuthErrorCodes.cryptoNonExistent,\r\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.cryptoNonExistent],\r\n    },\r\n    emptyNavigateUriError: {\r\n        code: BrowserAuthErrorCodes.emptyNavigateUri,\r\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.emptyNavigateUri],\r\n    },\r\n    hashEmptyError: {\r\n        code: BrowserAuthErrorCodes.hashEmptyError,\r\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.hashEmptyError],\r\n    },\r\n    hashDoesNotContainStateError: {\r\n        code: BrowserAuthErrorCodes.noStateInHash,\r\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.noStateInHash],\r\n    },\r\n    hashDoesNotContainKnownPropertiesError: {\r\n        code: BrowserAuthErrorCodes.hashDoesNotContainKnownProperties,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.hashDoesNotContainKnownProperties\r\n        ],\r\n    },\r\n    unableToParseStateError: {\r\n        code: BrowserAuthErrorCodes.unableToParseState,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.unableToParseState\r\n        ],\r\n    },\r\n    stateInteractionTypeMismatchError: {\r\n        code: BrowserAuthErrorCodes.stateInteractionTypeMismatch,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.stateInteractionTypeMismatch\r\n        ],\r\n    },\r\n    interactionInProgress: {\r\n        code: BrowserAuthErrorCodes.interactionInProgress,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.interactionInProgress\r\n        ],\r\n    },\r\n    popupWindowError: {\r\n        code: BrowserAuthErrorCodes.popupWindowError,\r\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.popupWindowError],\r\n    },\r\n    emptyWindowError: {\r\n        code: BrowserAuthErrorCodes.emptyWindowError,\r\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.emptyWindowError],\r\n    },\r\n    userCancelledError: {\r\n        code: BrowserAuthErrorCodes.userCancelled,\r\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.userCancelled],\r\n    },\r\n    monitorPopupTimeoutError: {\r\n        code: BrowserAuthErrorCodes.monitorPopupTimeout,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.monitorPopupTimeout\r\n        ],\r\n    },\r\n    monitorIframeTimeoutError: {\r\n        code: BrowserAuthErrorCodes.monitorWindowTimeout,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.monitorWindowTimeout\r\n        ],\r\n    },\r\n    redirectInIframeError: {\r\n        code: BrowserAuthErrorCodes.redirectInIframe,\r\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.redirectInIframe],\r\n    },\r\n    blockTokenRequestsInHiddenIframeError: {\r\n        code: BrowserAuthErrorCodes.blockIframeReload,\r\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.blockIframeReload],\r\n    },\r\n    blockAcquireTokenInPopupsError: {\r\n        code: BrowserAuthErrorCodes.blockNestedPopups,\r\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.blockNestedPopups],\r\n    },\r\n    iframeClosedPrematurelyError: {\r\n        code: BrowserAuthErrorCodes.iframeClosedPrematurely,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.iframeClosedPrematurely\r\n        ],\r\n    },\r\n    silentLogoutUnsupportedError: {\r\n        code: BrowserAuthErrorCodes.silentLogoutUnsupported,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.silentLogoutUnsupported\r\n        ],\r\n    },\r\n    noAccountError: {\r\n        code: BrowserAuthErrorCodes.noAccountError,\r\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.noAccountError],\r\n    },\r\n    silentPromptValueError: {\r\n        code: BrowserAuthErrorCodes.silentPromptValueError,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.silentPromptValueError\r\n        ],\r\n    },\r\n    noTokenRequestCacheError: {\r\n        code: BrowserAuthErrorCodes.noTokenRequestCacheError,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.noTokenRequestCacheError\r\n        ],\r\n    },\r\n    unableToParseTokenRequestCacheError: {\r\n        code: BrowserAuthErrorCodes.unableToParseTokenRequestCacheError,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.unableToParseTokenRequestCacheError\r\n        ],\r\n    },\r\n    noCachedAuthorityError: {\r\n        code: BrowserAuthErrorCodes.noCachedAuthorityError,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.noCachedAuthorityError\r\n        ],\r\n    },\r\n    authRequestNotSet: {\r\n        code: BrowserAuthErrorCodes.authRequestNotSetError,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.authRequestNotSetError\r\n        ],\r\n    },\r\n    invalidCacheType: {\r\n        code: BrowserAuthErrorCodes.invalidCacheType,\r\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.invalidCacheType],\r\n    },\r\n    notInBrowserEnvironment: {\r\n        code: BrowserAuthErrorCodes.nonBrowserEnvironment,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.nonBrowserEnvironment\r\n        ],\r\n    },\r\n    databaseNotOpen: {\r\n        code: BrowserAuthErrorCodes.databaseNotOpen,\r\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.databaseNotOpen],\r\n    },\r\n    noNetworkConnectivity: {\r\n        code: BrowserAuthErrorCodes.noNetworkConnectivity,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.noNetworkConnectivity\r\n        ],\r\n    },\r\n    postRequestFailed: {\r\n        code: BrowserAuthErrorCodes.postRequestFailed,\r\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.postRequestFailed],\r\n    },\r\n    getRequestFailed: {\r\n        code: BrowserAuthErrorCodes.getRequestFailed,\r\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.getRequestFailed],\r\n    },\r\n    failedToParseNetworkResponse: {\r\n        code: BrowserAuthErrorCodes.failedToParseResponse,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.failedToParseResponse\r\n        ],\r\n    },\r\n    unableToLoadTokenError: {\r\n        code: BrowserAuthErrorCodes.unableToLoadToken,\r\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.unableToLoadToken],\r\n    },\r\n    signingKeyNotFoundInStorage: {\r\n        code: BrowserAuthErrorCodes.cryptoKeyNotFound,\r\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.cryptoKeyNotFound],\r\n    },\r\n    authCodeRequired: {\r\n        code: BrowserAuthErrorCodes.authCodeRequired,\r\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.authCodeRequired],\r\n    },\r\n    authCodeOrNativeAccountRequired: {\r\n        code: BrowserAuthErrorCodes.authCodeOrNativeAccountIdRequired,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.authCodeOrNativeAccountIdRequired\r\n        ],\r\n    },\r\n    spaCodeAndNativeAccountPresent: {\r\n        code: BrowserAuthErrorCodes.spaCodeAndNativeAccountIdPresent,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.spaCodeAndNativeAccountIdPresent\r\n        ],\r\n    },\r\n    databaseUnavailable: {\r\n        code: BrowserAuthErrorCodes.databaseUnavailable,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.databaseUnavailable\r\n        ],\r\n    },\r\n    unableToAcquireTokenFromNativePlatform: {\r\n        code: BrowserAuthErrorCodes.unableToAcquireTokenFromNativePlatform,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.unableToAcquireTokenFromNativePlatform\r\n        ],\r\n    },\r\n    nativeHandshakeTimeout: {\r\n        code: BrowserAuthErrorCodes.nativeHandshakeTimeout,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.nativeHandshakeTimeout\r\n        ],\r\n    },\r\n    nativeExtensionNotInstalled: {\r\n        code: BrowserAuthErrorCodes.nativeExtensionNotInstalled,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.nativeExtensionNotInstalled\r\n        ],\r\n    },\r\n    nativeConnectionNotEstablished: {\r\n        code: BrowserAuthErrorCodes.nativeConnectionNotEstablished,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.nativeConnectionNotEstablished\r\n        ],\r\n    },\r\n    uninitializedPublicClientApplication: {\r\n        code: BrowserAuthErrorCodes.uninitializedPublicClientApplication,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.uninitializedPublicClientApplication\r\n        ],\r\n    },\r\n    nativePromptNotSupported: {\r\n        code: BrowserAuthErrorCodes.nativePromptNotSupported,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.nativePromptNotSupported\r\n        ],\r\n    },\r\n    invalidBase64StringError: {\r\n        code: BrowserAuthErrorCodes.invalidBase64String,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.invalidBase64String\r\n        ],\r\n    },\r\n    invalidPopTokenRequest: {\r\n        code: BrowserAuthErrorCodes.invalidPopTokenRequest,\r\n        desc: BrowserAuthErrorMessages[\r\n            BrowserAuthErrorCodes.invalidPopTokenRequest\r\n        ],\r\n    },\r\n};\r\n\r\n/**\r\n * Browser library error class thrown by the MSAL.js library for SPAs\r\n */\r\nexport class BrowserAuthError extends AuthError {\r\n    constructor(errorCode: string, subError?: string) {\r\n        super(errorCode, BrowserAuthErrorMessages[errorCode], subError);\r\n\r\n        Object.setPrototypeOf(this, BrowserAuthError.prototype);\r\n        this.name = \"BrowserAuthError\";\r\n    }\r\n}\r\n\r\nexport function createBrowserAuthError(\r\n    errorCode: string,\r\n    subError?: string\r\n): BrowserAuthError {\r\n    return new BrowserAuthError(errorCode, subError);\r\n}\r\n"],"mappings":";;;;;;;;AAAA;;;AAGG;AAMH,MAAMA,SAAS,GAAG,8CAA8C;AAEhE;;AAEG;AACU,MAAAC,wBAAwB,GAAG;EACpC,CAACC,cAAoC,GACjC,8DAA8D;EAClE,CAACC,iBAAuC,GACpC,iDAAiD;EACrD,CAACC,gBAAsC,GACnC,kEAAkE;EACtE,CAACC,cAAoC,GAAG,qHAAqHL,SAAS,EAAE;EACxK,CAACM,aAAmC,GAChC,mFAAmF;EACvF,CAACC,iCAAuD,GAAG,0GAA0GP,SAAS,EAAE;EAChL,CAACQ,kBAAwC,GACrC,6EAA6E;EACjF,CAACC,4BAAkD,GAC/C,yEAAyE;EAC7E,CAACC,qBAA2C,GAAG,qIAAqIV,SAAS,EAAE;EAC/L,CAACW,gBAAsC,GACnC,0GAA0G;EAC9G,CAACC,gBAAsC,GACnC,uDAAuD;EAC3D,CAACC,aAAmC,GAAG,0BAA0B;EACjE,CAACC,mBAAyC,GAAG,sDAAsDd,SAAS,EAAE;EAC9G,CAACe,oBAA0C,GAAG,uDAAuDf,SAAS,EAAE;EAChH,CAACgB,gBAAsC,GACnC,uLAAuL;EAC3L,CAACC,iBAAuC,GAAG,2FAA2FjB,SAAS,EAAE;EACjJ,CAACkB,iBAAuC,GACpC,qFAAqF;EACzF,CAACC,uBAA6C,GAC1C,oDAAoD;EACxD,CAACC,uBAA6C,GAC1C,iFAAiF;EACrF,CAACC,cAAoC,GACjC,yJAAyJ;EAC7J,CAACC,sBAA4C,GACzC,gHAAgH;EACpH,CAACC,wBAA8C,GAC3C,kCAAkC;EACtC,CAACC,mCAAyD,GACtD,+CAA+C;EACnD,CAACC,sBAA4C,GACzC,4BAA4B;EAChC,CAACC,sBAA4C,GACzC,gGAAgG;EACpG,CAACC,gBAAsC,GAAG,oBAAoB;EAC9D,CAACC,qBAA2C,GACxC,yEAAyE;EAC7E,CAACC,eAAqC,GAAG,uBAAuB;EAChE,CAACC,qBAA2C,GACxC,0DAA0D;EAC9D,CAACC,iBAAuC,GACpC,2IAA2I;EAC/I,CAACC,gBAAsC,GACnC,iFAAiF;EACrF,CAACC,qBAA2C,GACxC,wDAAwD;EAC5D,CAACC,iBAAuC,GAAG,+BAA+B;EAC1E,CAACC,iBAAuC,GACpC,4DAA4D;EAChE,CAACC,gBAAsC,GACnC,8FAA8F;EAClG,CAACC,iCAAuD,GACpD,yEAAyE;EAC7E,CAACC,gCAAsD,GACnD,6DAA6D;EACjE,CAACC,mBAAyC,GACtC,+LAA+L;EACnM,CAACC,sCAA4D,GAAG,kDAAkDxC,SAAS,EAAE;EAC7H,CAACyC,sBAA4C,GACzC,yEAAyE;EAC7E,CAACC,2BAAiD,GAC9C,iGAAiG;EACrG,CAACC,8BAAoD,GAAG,gIAAgI3C,SAAS,EAAE;EACnM,CAAC4C,oCAA0D,GAAG,kGAAkG5C,SAAS,EAAE;EAC3K,CAAC6C,wBAA8C,GAC3C,mHAAmH;EACvH,CAACC,mBAAyC,GACtC,gCAAgC;EACpC,CAACC,sBAA4C,GACzC,0GAA0G;EAC9G,CAACC,oBAA0C,GACvC,yCAAyC;EAC7C,CAACC,oBAA0C,GACvC;;AAGR;;;;;;;AAOG;AACU,MAAAC,uBAAuB,GAAG;EACnCC,gBAAgB,EAAE;IACdC,IAAI,EAAElD,cAAoC;IAC1CmD,IAAI,EAAEpD,wBAAwB,CAACC,cAAoC;EACtE;EACDoD,kBAAkB,EAAE;IAChBF,IAAI,EAAEjD,iBAAuC;IAC7CkD,IAAI,EAAEpD,wBAAwB,CAACE,iBAAuC;EACzE;EACDoD,qBAAqB,EAAE;IACnBH,IAAI,EAAEhD,gBAAsC;IAC5CiD,IAAI,EAAEpD,wBAAwB,CAACG,gBAAsC;EACxE;EACDC,cAAc,EAAE;IACZ+C,IAAI,EAAE/C,cAAoC;IAC1CgD,IAAI,EAAEpD,wBAAwB,CAACI,cAAoC;EACtE;EACDmD,4BAA4B,EAAE;IAC1BJ,IAAI,EAAE9C,aAAmC;IACzC+C,IAAI,EAAEpD,wBAAwB,CAACK,aAAmC;EACrE;EACDmD,sCAAsC,EAAE;IACpCL,IAAI,EAAE7C,iCAAuD;IAC7D8C,IAAI,EAAEpD,wBAAwB,CAC1BM,iCAAuD;EAE9D;EACDmD,uBAAuB,EAAE;IACrBN,IAAI,EAAE5C,kBAAwC;IAC9C6C,IAAI,EAAEpD,wBAAwB,CAC1BO,kBAAwC;EAE/C;EACDmD,iCAAiC,EAAE;IAC/BP,IAAI,EAAE3C,4BAAkD;IACxD4C,IAAI,EAAEpD,wBAAwB,CAC1BQ,4BAAkD;EAEzD;EACDC,qBAAqB,EAAE;IACnB0C,IAAI,EAAE1C,qBAA2C;IACjD2C,IAAI,EAAEpD,wBAAwB,CAC1BS,qBAA2C;EAElD;EACDC,gBAAgB,EAAE;IACdyC,IAAI,EAAEzC,gBAAsC;IAC5C0C,IAAI,EAAEpD,wBAAwB,CAACU,gBAAsC;EACxE;EACDC,gBAAgB,EAAE;IACdwC,IAAI,EAAExC,gBAAsC;IAC5CyC,IAAI,EAAEpD,wBAAwB,CAACW,gBAAsC;EACxE;EACDgD,kBAAkB,EAAE;IAChBR,IAAI,EAAEvC,aAAmC;IACzCwC,IAAI,EAAEpD,wBAAwB,CAACY,aAAmC;EACrE;EACDgD,wBAAwB,EAAE;IACtBT,IAAI,EAAEtC,mBAAyC;IAC/CuC,IAAI,EAAEpD,wBAAwB,CAC1Ba,mBAAyC;EAEhD;EACDgD,yBAAyB,EAAE;IACvBV,IAAI,EAAErC,oBAA0C;IAChDsC,IAAI,EAAEpD,wBAAwB,CAC1Bc,oBAA0C;EAEjD;EACDgD,qBAAqB,EAAE;IACnBX,IAAI,EAAEpC,gBAAsC;IAC5CqC,IAAI,EAAEpD,wBAAwB,CAACe,gBAAsC;EACxE;EACDgD,qCAAqC,EAAE;IACnCZ,IAAI,EAAEnC,iBAAuC;IAC7CoC,IAAI,EAAEpD,wBAAwB,CAACgB,iBAAuC;EACzE;EACDgD,8BAA8B,EAAE;IAC5Bb,IAAI,EAAElC,iBAAuC;IAC7CmC,IAAI,EAAEpD,wBAAwB,CAACiB,iBAAuC;EACzE;EACDgD,4BAA4B,EAAE;IAC1Bd,IAAI,EAAEjC,uBAA6C;IACnDkC,IAAI,EAAEpD,wBAAwB,CAC1BkB,uBAA6C;EAEpD;EACDgD,4BAA4B,EAAE;IAC1Bf,IAAI,EAAEhC,uBAA6C;IACnDiC,IAAI,EAAEpD,wBAAwB,CAC1BmB,uBAA6C;EAEpD;EACDC,cAAc,EAAE;IACZ+B,IAAI,EAAE/B,cAAoC;IAC1CgC,IAAI,EAAEpD,wBAAwB,CAACoB,cAAoC;EACtE;EACDC,sBAAsB,EAAE;IACpB8B,IAAI,EAAE9B,sBAA4C;IAClD+B,IAAI,EAAEpD,wBAAwB,CAC1BqB,sBAA4C;EAEnD;EACDC,wBAAwB,EAAE;IACtB6B,IAAI,EAAE7B,wBAA8C;IACpD8B,IAAI,EAAEpD,wBAAwB,CAC1BsB,wBAA8C;EAErD;EACDC,mCAAmC,EAAE;IACjC4B,IAAI,EAAE5B,mCAAyD;IAC/D6B,IAAI,EAAEpD,wBAAwB,CAC1BuB,mCAAyD;EAEhE;EACDC,sBAAsB,EAAE;IACpB2B,IAAI,EAAE3B,sBAA4C;IAClD4B,IAAI,EAAEpD,wBAAwB,CAC1BwB,sBAA4C;EAEnD;EACD2C,iBAAiB,EAAE;IACfhB,IAAI,EAAE1B,sBAA4C;IAClD2B,IAAI,EAAEpD,wBAAwB,CAC1ByB,sBAA4C;EAEnD;EACDC,gBAAgB,EAAE;IACdyB,IAAI,EAAEzB,gBAAsC;IAC5C0B,IAAI,EAAEpD,wBAAwB,CAAC0B,gBAAsC;EACxE;EACD0C,uBAAuB,EAAE;IACrBjB,IAAI,EAAExB,qBAA2C;IACjDyB,IAAI,EAAEpD,wBAAwB,CAC1B2B,qBAA2C;EAElD;EACDC,eAAe,EAAE;IACbuB,IAAI,EAAEvB,eAAqC;IAC3CwB,IAAI,EAAEpD,wBAAwB,CAAC4B,eAAqC;EACvE;EACDC,qBAAqB,EAAE;IACnBsB,IAAI,EAAEtB,qBAA2C;IACjDuB,IAAI,EAAEpD,wBAAwB,CAC1B6B,qBAA2C;EAElD;EACDC,iBAAiB,EAAE;IACfqB,IAAI,EAAErB,iBAAuC;IAC7CsB,IAAI,EAAEpD,wBAAwB,CAAC8B,iBAAuC;EACzE;EACDC,gBAAgB,EAAE;IACdoB,IAAI,EAAEpB,gBAAsC;IAC5CqB,IAAI,EAAEpD,wBAAwB,CAAC+B,gBAAsC;EACxE;EACDsC,4BAA4B,EAAE;IAC1BlB,IAAI,EAAEnB,qBAA2C;IACjDoB,IAAI,EAAEpD,wBAAwB,CAC1BgC,qBAA2C;EAElD;EACDsC,sBAAsB,EAAE;IACpBnB,IAAI,EAAElB,iBAAuC;IAC7CmB,IAAI,EAAEpD,wBAAwB,CAACiC,iBAAuC;EACzE;EACDsC,2BAA2B,EAAE;IACzBpB,IAAI,EAAEjB,iBAAuC;IAC7CkB,IAAI,EAAEpD,wBAAwB,CAACkC,iBAAuC;EACzE;EACDC,gBAAgB,EAAE;IACdgB,IAAI,EAAEhB,gBAAsC;IAC5CiB,IAAI,EAAEpD,wBAAwB,CAACmC,gBAAsC;EACxE;EACDqC,+BAA+B,EAAE;IAC7BrB,IAAI,EAAEf,iCAAuD;IAC7DgB,IAAI,EAAEpD,wBAAwB,CAC1BoC,iCAAuD;EAE9D;EACDqC,8BAA8B,EAAE;IAC5BtB,IAAI,EAAEd,gCAAsD;IAC5De,IAAI,EAAEpD,wBAAwB,CAC1BqC,gCAAsD;EAE7D;EACDC,mBAAmB,EAAE;IACjBa,IAAI,EAAEb,mBAAyC;IAC/Cc,IAAI,EAAEpD,wBAAwB,CAC1BsC,mBAAyC;EAEhD;EACDC,sCAAsC,EAAE;IACpCY,IAAI,EAAEZ,sCAA4D;IAClEa,IAAI,EAAEpD,wBAAwB,CAC1BuC,sCAA4D;EAEnE;EACDC,sBAAsB,EAAE;IACpBW,IAAI,EAAEX,sBAA4C;IAClDY,IAAI,EAAEpD,wBAAwB,CAC1BwC,sBAA4C;EAEnD;EACDC,2BAA2B,EAAE;IACzBU,IAAI,EAAEV,2BAAiD;IACvDW,IAAI,EAAEpD,wBAAwB,CAC1ByC,2BAAiD;EAExD;EACDC,8BAA8B,EAAE;IAC5BS,IAAI,EAAET,8BAAoD;IAC1DU,IAAI,EAAEpD,wBAAwB,CAC1B0C,8BAAoD;EAE3D;EACDC,oCAAoC,EAAE;IAClCQ,IAAI,EAAER,oCAA0D;IAChES,IAAI,EAAEpD,wBAAwB,CAC1B2C,oCAA0D;EAEjE;EACDC,wBAAwB,EAAE;IACtBO,IAAI,EAAEP,wBAA8C;IACpDQ,IAAI,EAAEpD,wBAAwB,CAC1B4C,wBAA8C;EAErD;EACD8B,wBAAwB,EAAE;IACtBvB,IAAI,EAAEN,mBAAyC;IAC/CO,IAAI,EAAEpD,wBAAwB,CAC1B6C,mBAAyC;EAEhD;EACDC,sBAAsB,EAAE;IACpBK,IAAI,EAAEL,sBAA4C;IAClDM,IAAI,EAAEpD,wBAAwB,CAC1B8C,sBAA4C;EAEnD;;AAGL;;AAEG;AACG,MAAO6B,gBAAiB,SAAQC,SAAS;EAC3CC,WAAYA,CAAAC,SAAiB,EAAEC,QAAiB;IAC5C,KAAK,CAACD,SAAS,EAAE9E,wBAAwB,CAAC8E,SAAS,CAAC,EAAEC,QAAQ,CAAC;IAE/DC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAEN,gBAAgB,CAACO,SAAS,CAAC;IACvD,IAAI,CAACC,IAAI,GAAG,kBAAkB;;AAErC;AAEe,SAAAC,sBAAsBA,CAClCN,SAAiB,EACjBC,QAAiB;EAEjB,OAAO,IAAIJ,gBAAgB,CAACG,SAAS,EAAEC,QAAQ,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}