{"ast":null,"code":"/*! @azure/msal-react v3.0.5 2025-02-18 */\n'use strict';\n\nimport { useMemo } from 'react';\nimport { useMsal } from './useMsal.js';\nimport { InteractionStatus } from '@azure/msal-browser';\nimport { getAccountByIdentifiers } from '../utils/utilities.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nfunction isAuthenticated(allAccounts, matchAccount) {\n  if (matchAccount && (matchAccount.username || matchAccount.homeAccountId || matchAccount.localAccountId)) {\n    return !!getAccountByIdentifiers(allAccounts, matchAccount);\n  }\n  return allAccounts.length > 0;\n}\n/**\r\n * Returns whether or not a user is currently signed-in. Optionally provide 1 or more accountIdentifiers to determine if a specific user is signed-in\r\n * @param matchAccount\r\n */\nfunction useIsAuthenticated(matchAccount) {\n  const {\n    accounts: allAccounts,\n    inProgress\n  } = useMsal();\n  const isUserAuthenticated = useMemo(() => {\n    if (inProgress === InteractionStatus.Startup) {\n      return false;\n    }\n    return isAuthenticated(allAccounts, matchAccount);\n  }, [allAccounts, inProgress, matchAccount]);\n  return isUserAuthenticated;\n}\nexport { useIsAuthenticated };","map":{"version":3,"names":["isAuthenticated","allAccounts","matchAccount","username","homeAccountId","localAccountId","getAccountByIdentifiers","length","useIsAuthenticated","accounts","inProgress","useMsal","isUserAuthenticated","useMemo","InteractionStatus","Startup"],"sources":["C:\\bytepantry\\frontend\\node_modules\\@azure\\msal-react\\src\\hooks\\useIsAuthenticated.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { useMemo } from \"react\";\r\nimport { useMsal } from \"./useMsal.js\";\r\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers.js\";\r\nimport { AccountInfo, InteractionStatus } from \"@azure/msal-browser\";\r\nimport { getAccountByIdentifiers } from \"../utils/utilities.js\";\r\n\r\nfunction isAuthenticated(\r\n    allAccounts: AccountInfo[],\r\n    matchAccount?: AccountIdentifiers\r\n): boolean {\r\n    if (\r\n        matchAccount &&\r\n        (matchAccount.username ||\r\n            matchAccount.homeAccountId ||\r\n            matchAccount.localAccountId)\r\n    ) {\r\n        return !!getAccountByIdentifiers(allAccounts, matchAccount);\r\n    }\r\n\r\n    return allAccounts.length > 0;\r\n}\r\n\r\n/**\r\n * Returns whether or not a user is currently signed-in. Optionally provide 1 or more accountIdentifiers to determine if a specific user is signed-in\r\n * @param matchAccount\r\n */\r\nexport function useIsAuthenticated(matchAccount?: AccountIdentifiers): boolean {\r\n    const { accounts: allAccounts, inProgress } = useMsal();\r\n\r\n    const isUserAuthenticated = useMemo(() => {\r\n        if (inProgress === InteractionStatus.Startup) {\r\n            return false;\r\n        }\r\n        return isAuthenticated(allAccounts, matchAccount);\r\n    }, [allAccounts, inProgress, matchAccount]);\r\n\r\n    return isUserAuthenticated;\r\n}\r\n"],"mappings":";;;;;;;;AAAA;;;AAGG;AAQH,SAASA,eAAeA,CACpBC,WAA0B,EAC1BC,YAAiC;EAEjC,IACIA,YAAY,KACXA,YAAY,CAACC,QAAQ,IAClBD,YAAY,CAACE,aAAa,IAC1BF,YAAY,CAACG,cAAc,CAAC,EAClC;IACE,OAAO,CAAC,CAACC,uBAAuB,CAACL,WAAW,EAAEC,YAAY,CAAC;EAC9D;EAED,OAAOD,WAAW,CAACM,MAAM,GAAG,CAAC;AACjC;AAEA;;;AAGG;AACG,SAAUC,kBAAkBA,CAACN,YAAiC;EAChE,MAAM;IAAEO,QAAQ,EAAER,WAAW;IAAES;EAAU,CAAE,GAAGC,OAAO,EAAE;EAEvD,MAAMC,mBAAmB,GAAGC,OAAO,CAAC,MAAK;IACrC,IAAIH,UAAU,KAAKI,iBAAiB,CAACC,OAAO,EAAE;MAC1C,OAAO,KAAK;IACf;IACD,OAAOf,eAAe,CAACC,WAAW,EAAEC,YAAY,CAAC;GACpD,EAAE,CAACD,WAAW,EAAES,UAAU,EAAER,YAAY,CAAC,CAAC;EAE3C,OAAOU,mBAAmB;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}