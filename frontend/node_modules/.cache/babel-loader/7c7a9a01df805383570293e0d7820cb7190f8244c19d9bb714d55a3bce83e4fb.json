{"ast":null,"code":"/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { AuthToken, Authority, AccountEntity, buildAccountToCache, CacheHelpers, ScopeSet } from '@azure/msal-common/browser';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { base64Decode } from '../encode/Base64Decode.mjs';\nimport { createNewGuid } from '../crypto/BrowserCrypto.mjs';\nimport { nonBrowserEnvironment, unableToLoadToken } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Token cache manager\r\n */\nclass TokenCache {\n  constructor(configuration, storage, logger, cryptoObj) {\n    this.isBrowserEnvironment = typeof window !== \"undefined\";\n    this.config = configuration;\n    this.storage = storage;\n    this.logger = logger;\n    this.cryptoObj = cryptoObj;\n  }\n  // Move getAllAccounts here and cache utility APIs\n  /**\r\n   * API to load tokens to msal-browser cache.\r\n   * @param request\r\n   * @param response\r\n   * @param options\r\n   * @returns `AuthenticationResult` for the response that was loaded.\r\n   */\n  async loadExternalTokens(request, response, options) {\n    if (!this.isBrowserEnvironment) {\n      throw createBrowserAuthError(nonBrowserEnvironment);\n    }\n    const correlationId = request.correlationId || createNewGuid();\n    const idTokenClaims = response.id_token ? AuthToken.extractTokenClaims(response.id_token, base64Decode) : undefined;\n    const authorityOptions = {\n      protocolMode: this.config.auth.protocolMode,\n      knownAuthorities: this.config.auth.knownAuthorities,\n      cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n      authorityMetadata: this.config.auth.authorityMetadata,\n      skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n    };\n    const authority = request.authority ? new Authority(Authority.generateAuthority(request.authority, request.azureCloudOptions), this.config.system.networkClient, this.storage, authorityOptions, this.logger, request.correlationId || createNewGuid()) : undefined;\n    const cacheRecordAccount = await this.loadAccount(request, options.clientInfo || response.client_info || \"\", correlationId, idTokenClaims, authority);\n    const idToken = await this.loadIdToken(response, cacheRecordAccount.homeAccountId, cacheRecordAccount.environment, cacheRecordAccount.realm, correlationId);\n    const accessToken = await this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, cacheRecordAccount.environment, cacheRecordAccount.realm, options, correlationId);\n    const refreshToken = await this.loadRefreshToken(response, cacheRecordAccount.homeAccountId, cacheRecordAccount.environment, correlationId);\n    return this.generateAuthenticationResult(request, {\n      account: cacheRecordAccount,\n      idToken,\n      accessToken,\n      refreshToken\n    }, idTokenClaims, authority);\n  }\n  /**\r\n   * Helper function to load account to msal-browser cache\r\n   * @param idToken\r\n   * @param environment\r\n   * @param clientInfo\r\n   * @param authorityType\r\n   * @param requestHomeAccountId\r\n   * @returns `AccountEntity`\r\n   */\n  async loadAccount(request, clientInfo, correlationId, idTokenClaims, authority) {\n    this.logger.verbose(\"TokenCache - loading account\");\n    if (request.account) {\n      const accountEntity = AccountEntity.createFromAccountInfo(request.account);\n      await this.storage.setAccount(accountEntity, correlationId);\n      return accountEntity;\n    } else if (!authority || !clientInfo && !idTokenClaims) {\n      this.logger.error(\"TokenCache - if an account is not provided on the request, authority and either clientInfo or idToken must be provided instead.\");\n      throw createBrowserAuthError(unableToLoadToken);\n    }\n    const homeAccountId = AccountEntity.generateHomeAccountId(clientInfo, authority.authorityType, this.logger, this.cryptoObj, idTokenClaims);\n    const claimsTenantId = idTokenClaims?.tid;\n    const cachedAccount = buildAccountToCache(this.storage, authority, homeAccountId, base64Decode, idTokenClaims, clientInfo, authority.hostnameAndPort, claimsTenantId, undefined,\n    // authCodePayload\n    undefined,\n    // nativeAccountId\n    this.logger);\n    await this.storage.setAccount(cachedAccount, correlationId);\n    return cachedAccount;\n  }\n  /**\r\n   * Helper function to load id tokens to msal-browser cache\r\n   * @param idToken\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @returns `IdTokenEntity`\r\n   */\n  async loadIdToken(response, homeAccountId, environment, tenantId, correlationId) {\n    if (!response.id_token) {\n      this.logger.verbose(\"TokenCache - no id token found in response\");\n      return null;\n    }\n    this.logger.verbose(\"TokenCache - loading id token\");\n    const idTokenEntity = CacheHelpers.createIdTokenEntity(homeAccountId, environment, response.id_token, this.config.auth.clientId, tenantId);\n    await this.storage.setIdTokenCredential(idTokenEntity, correlationId);\n    return idTokenEntity;\n  }\n  /**\r\n   * Helper function to load access tokens to msal-browser cache\r\n   * @param request\r\n   * @param response\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @returns `AccessTokenEntity`\r\n   */\n  async loadAccessToken(request, response, homeAccountId, environment, tenantId, options, correlationId) {\n    if (!response.access_token) {\n      this.logger.verbose(\"TokenCache - no access token found in response\");\n      return null;\n    } else if (!response.expires_in) {\n      this.logger.error(\"TokenCache - no expiration set on the access token. Cannot add it to the cache.\");\n      return null;\n    } else if (!response.scope && (!request.scopes || !request.scopes.length)) {\n      this.logger.error(\"TokenCache - scopes not specified in the request or response. Cannot add token to the cache.\");\n      return null;\n    }\n    this.logger.verbose(\"TokenCache - loading access token\");\n    const scopes = response.scope ? ScopeSet.fromString(response.scope) : new ScopeSet(request.scopes);\n    const expiresOn = options.expiresOn || response.expires_in + new Date().getTime() / 1000;\n    const extendedExpiresOn = options.extendedExpiresOn || (response.ext_expires_in || response.expires_in) + new Date().getTime() / 1000;\n    const accessTokenEntity = CacheHelpers.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes.printScopes(), expiresOn, extendedExpiresOn, base64Decode);\n    await this.storage.setAccessTokenCredential(accessTokenEntity, correlationId);\n    return accessTokenEntity;\n  }\n  /**\r\n   * Helper function to load refresh tokens to msal-browser cache\r\n   * @param request\r\n   * @param response\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @returns `RefreshTokenEntity`\r\n   */\n  async loadRefreshToken(response, homeAccountId, environment, correlationId) {\n    if (!response.refresh_token) {\n      this.logger.verbose(\"TokenCache - no refresh token found in response\");\n      return null;\n    }\n    this.logger.verbose(\"TokenCache - loading refresh token\");\n    const refreshTokenEntity = CacheHelpers.createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId, response.foci, undefined,\n    // userAssertionHash\n    response.refresh_token_expires_in);\n    await this.storage.setRefreshTokenCredential(refreshTokenEntity, correlationId);\n    return refreshTokenEntity;\n  }\n  /**\r\n   * Helper function to generate an `AuthenticationResult` for the result.\r\n   * @param request\r\n   * @param idTokenObj\r\n   * @param cacheRecord\r\n   * @param authority\r\n   * @returns `AuthenticationResult`\r\n   */\n  generateAuthenticationResult(request, cacheRecord, idTokenClaims, authority) {\n    let accessToken = \"\";\n    let responseScopes = [];\n    let expiresOn = null;\n    let extExpiresOn;\n    if (cacheRecord?.accessToken) {\n      accessToken = cacheRecord.accessToken.secret;\n      responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n      expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n      extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n    }\n    const accountEntity = cacheRecord.account;\n    return {\n      authority: authority ? authority.canonicalAuthority : \"\",\n      uniqueId: cacheRecord.account.localAccountId,\n      tenantId: cacheRecord.account.realm,\n      scopes: responseScopes,\n      account: accountEntity.getAccountInfo(),\n      idToken: cacheRecord.idToken?.secret || \"\",\n      idTokenClaims: idTokenClaims || {},\n      accessToken: accessToken,\n      fromCache: true,\n      expiresOn: expiresOn,\n      correlationId: request.correlationId || \"\",\n      requestId: \"\",\n      extExpiresOn: extExpiresOn,\n      familyId: cacheRecord.refreshToken?.familyId || \"\",\n      tokenType: cacheRecord?.accessToken?.tokenType || \"\",\n      state: request.state || \"\",\n      cloudGraphHostName: accountEntity.cloudGraphHostName || \"\",\n      msGraphHost: accountEntity.msGraphHost || \"\",\n      fromNativeBroker: false\n    };\n  }\n}\nexport { TokenCache };","map":{"version":3,"names":["TokenCache","constructor","configuration","storage","logger","cryptoObj","isBrowserEnvironment","window","config","loadExternalTokens","request","response","options","createBrowserAuthError","nonBrowserEnvironment","correlationId","createNewGuid","idTokenClaims","id_token","AuthToken","extractTokenClaims","base64Decode","undefined","authorityOptions","protocolMode","auth","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","skipAuthorityMetadataCache","authority","Authority","generateAuthority","azureCloudOptions","system","networkClient","cacheRecordAccount","loadAccount","clientInfo","client_info","idToken","loadIdToken","homeAccountId","environment","realm","accessToken","loadAccessToken","refreshToken","loadRefreshToken","generateAuthenticationResult","account","verbose","accountEntity","AccountEntity","createFromAccountInfo","setAccount","error","unableToLoadToken","generateHomeAccountId","authorityType","claimsTenantId","tid","cachedAccount","buildAccountToCache","hostnameAndPort","tenantId","idTokenEntity","CacheHelpers","createIdTokenEntity","clientId","setIdTokenCredential","access_token","expires_in","scope","scopes","length","ScopeSet","fromString","expiresOn","Date","getTime","extendedExpiresOn","ext_expires_in","accessTokenEntity","createAccessTokenEntity","printScopes","setAccessTokenCredential","refresh_token","refreshTokenEntity","createRefreshTokenEntity","foci","refresh_token_expires_in","setRefreshTokenCredential","cacheRecord","responseScopes","extExpiresOn","secret","target","asArray","Number","canonicalAuthority","uniqueId","localAccountId","getAccountInfo","fromCache","requestId","familyId","tokenType","state","cloudGraphHostName","msGraphHost","fromNativeBroker"],"sources":["C:\\bytepantry\\frontend\\node_modules\\@azure\\msal-browser\\src\\cache\\TokenCache.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    AccessTokenEntity,\r\n    ICrypto,\r\n    IdTokenEntity,\r\n    Logger,\r\n    ScopeSet,\r\n    Authority,\r\n    AuthorityOptions,\r\n    ExternalTokenResponse,\r\n    AccountEntity,\r\n    AuthToken,\r\n    RefreshTokenEntity,\r\n    CacheRecord,\r\n    TokenClaims,\r\n    CacheHelpers,\r\n    buildAccountToCache,\r\n} from \"@azure/msal-common/browser\";\r\nimport { BrowserConfiguration } from \"../config/Configuration.js\";\r\nimport { SilentRequest } from \"../request/SilentRequest.js\";\r\nimport { BrowserCacheManager } from \"./BrowserCacheManager.js\";\r\nimport { ITokenCache } from \"./ITokenCache.js\";\r\nimport {\r\n    createBrowserAuthError,\r\n    BrowserAuthErrorCodes,\r\n} from \"../error/BrowserAuthError.js\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult.js\";\r\nimport { base64Decode } from \"../encode/Base64Decode.js\";\r\nimport * as BrowserCrypto from \"../crypto/BrowserCrypto.js\";\r\n\r\nexport type LoadTokenOptions = {\r\n    clientInfo?: string;\r\n    expiresOn?: number;\r\n    extendedExpiresOn?: number;\r\n};\r\n\r\n/**\r\n * Token cache manager\r\n */\r\nexport class TokenCache implements ITokenCache {\r\n    // Flag to indicate if in browser environment\r\n    public isBrowserEnvironment: boolean;\r\n    // Input configuration by developer/user\r\n    protected config: BrowserConfiguration;\r\n    // Browser cache storage\r\n    private storage: BrowserCacheManager;\r\n    // Logger\r\n    private logger: Logger;\r\n    // Crypto class\r\n    private cryptoObj: ICrypto;\r\n\r\n    constructor(\r\n        configuration: BrowserConfiguration,\r\n        storage: BrowserCacheManager,\r\n        logger: Logger,\r\n        cryptoObj: ICrypto\r\n    ) {\r\n        this.isBrowserEnvironment = typeof window !== \"undefined\";\r\n        this.config = configuration;\r\n        this.storage = storage;\r\n        this.logger = logger;\r\n        this.cryptoObj = cryptoObj;\r\n    }\r\n\r\n    // Move getAllAccounts here and cache utility APIs\r\n\r\n    /**\r\n     * API to load tokens to msal-browser cache.\r\n     * @param request\r\n     * @param response\r\n     * @param options\r\n     * @returns `AuthenticationResult` for the response that was loaded.\r\n     */\r\n    async loadExternalTokens(\r\n        request: SilentRequest,\r\n        response: ExternalTokenResponse,\r\n        options: LoadTokenOptions\r\n    ): Promise<AuthenticationResult> {\r\n        if (!this.isBrowserEnvironment) {\r\n            throw createBrowserAuthError(\r\n                BrowserAuthErrorCodes.nonBrowserEnvironment\r\n            );\r\n        }\r\n\r\n        const correlationId =\r\n            request.correlationId || BrowserCrypto.createNewGuid();\r\n\r\n        const idTokenClaims = response.id_token\r\n            ? AuthToken.extractTokenClaims(response.id_token, base64Decode)\r\n            : undefined;\r\n\r\n        const authorityOptions: AuthorityOptions = {\r\n            protocolMode: this.config.auth.protocolMode,\r\n            knownAuthorities: this.config.auth.knownAuthorities,\r\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\r\n            authorityMetadata: this.config.auth.authorityMetadata,\r\n            skipAuthorityMetadataCache:\r\n                this.config.auth.skipAuthorityMetadataCache,\r\n        };\r\n        const authority = request.authority\r\n            ? new Authority(\r\n                  Authority.generateAuthority(\r\n                      request.authority,\r\n                      request.azureCloudOptions\r\n                  ),\r\n                  this.config.system.networkClient,\r\n                  this.storage,\r\n                  authorityOptions,\r\n                  this.logger,\r\n                  request.correlationId || BrowserCrypto.createNewGuid()\r\n              )\r\n            : undefined;\r\n\r\n        const cacheRecordAccount: AccountEntity = await this.loadAccount(\r\n            request,\r\n            options.clientInfo || response.client_info || \"\",\r\n            correlationId,\r\n            idTokenClaims,\r\n            authority\r\n        );\r\n\r\n        const idToken = await this.loadIdToken(\r\n            response,\r\n            cacheRecordAccount.homeAccountId,\r\n            cacheRecordAccount.environment,\r\n            cacheRecordAccount.realm,\r\n            correlationId\r\n        );\r\n\r\n        const accessToken = await this.loadAccessToken(\r\n            request,\r\n            response,\r\n            cacheRecordAccount.homeAccountId,\r\n            cacheRecordAccount.environment,\r\n            cacheRecordAccount.realm,\r\n            options,\r\n            correlationId\r\n        );\r\n\r\n        const refreshToken = await this.loadRefreshToken(\r\n            response,\r\n            cacheRecordAccount.homeAccountId,\r\n            cacheRecordAccount.environment,\r\n            correlationId\r\n        );\r\n\r\n        return this.generateAuthenticationResult(\r\n            request,\r\n            {\r\n                account: cacheRecordAccount,\r\n                idToken,\r\n                accessToken,\r\n                refreshToken,\r\n            },\r\n            idTokenClaims,\r\n            authority\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Helper function to load account to msal-browser cache\r\n     * @param idToken\r\n     * @param environment\r\n     * @param clientInfo\r\n     * @param authorityType\r\n     * @param requestHomeAccountId\r\n     * @returns `AccountEntity`\r\n     */\r\n    private async loadAccount(\r\n        request: SilentRequest,\r\n        clientInfo: string,\r\n        correlationId: string,\r\n        idTokenClaims?: TokenClaims,\r\n        authority?: Authority\r\n    ): Promise<AccountEntity> {\r\n        this.logger.verbose(\"TokenCache - loading account\");\r\n\r\n        if (request.account) {\r\n            const accountEntity = AccountEntity.createFromAccountInfo(\r\n                request.account\r\n            );\r\n            await this.storage.setAccount(accountEntity, correlationId);\r\n            return accountEntity;\r\n        } else if (!authority || (!clientInfo && !idTokenClaims)) {\r\n            this.logger.error(\r\n                \"TokenCache - if an account is not provided on the request, authority and either clientInfo or idToken must be provided instead.\"\r\n            );\r\n            throw createBrowserAuthError(\r\n                BrowserAuthErrorCodes.unableToLoadToken\r\n            );\r\n        }\r\n\r\n        const homeAccountId = AccountEntity.generateHomeAccountId(\r\n            clientInfo,\r\n            authority.authorityType,\r\n            this.logger,\r\n            this.cryptoObj,\r\n            idTokenClaims\r\n        );\r\n\r\n        const claimsTenantId = idTokenClaims?.tid;\r\n\r\n        const cachedAccount = buildAccountToCache(\r\n            this.storage,\r\n            authority,\r\n            homeAccountId,\r\n            base64Decode,\r\n            idTokenClaims,\r\n            clientInfo,\r\n            authority.hostnameAndPort,\r\n            claimsTenantId,\r\n            undefined, // authCodePayload\r\n            undefined, // nativeAccountId\r\n            this.logger\r\n        );\r\n\r\n        await this.storage.setAccount(cachedAccount, correlationId);\r\n        return cachedAccount;\r\n    }\r\n\r\n    /**\r\n     * Helper function to load id tokens to msal-browser cache\r\n     * @param idToken\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param tenantId\r\n     * @returns `IdTokenEntity`\r\n     */\r\n    private async loadIdToken(\r\n        response: ExternalTokenResponse,\r\n        homeAccountId: string,\r\n        environment: string,\r\n        tenantId: string,\r\n        correlationId: string\r\n    ): Promise<IdTokenEntity | null> {\r\n        if (!response.id_token) {\r\n            this.logger.verbose(\"TokenCache - no id token found in response\");\r\n            return null;\r\n        }\r\n\r\n        this.logger.verbose(\"TokenCache - loading id token\");\r\n        const idTokenEntity = CacheHelpers.createIdTokenEntity(\r\n            homeAccountId,\r\n            environment,\r\n            response.id_token,\r\n            this.config.auth.clientId,\r\n            tenantId\r\n        );\r\n\r\n        await this.storage.setIdTokenCredential(idTokenEntity, correlationId);\r\n        return idTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * Helper function to load access tokens to msal-browser cache\r\n     * @param request\r\n     * @param response\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param tenantId\r\n     * @returns `AccessTokenEntity`\r\n     */\r\n    private async loadAccessToken(\r\n        request: SilentRequest,\r\n        response: ExternalTokenResponse,\r\n        homeAccountId: string,\r\n        environment: string,\r\n        tenantId: string,\r\n        options: LoadTokenOptions,\r\n        correlationId: string\r\n    ): Promise<AccessTokenEntity | null> {\r\n        if (!response.access_token) {\r\n            this.logger.verbose(\r\n                \"TokenCache - no access token found in response\"\r\n            );\r\n            return null;\r\n        } else if (!response.expires_in) {\r\n            this.logger.error(\r\n                \"TokenCache - no expiration set on the access token. Cannot add it to the cache.\"\r\n            );\r\n            return null;\r\n        } else if (\r\n            !response.scope &&\r\n            (!request.scopes || !request.scopes.length)\r\n        ) {\r\n            this.logger.error(\r\n                \"TokenCache - scopes not specified in the request or response. Cannot add token to the cache.\"\r\n            );\r\n            return null;\r\n        }\r\n\r\n        this.logger.verbose(\"TokenCache - loading access token\");\r\n\r\n        const scopes = response.scope\r\n            ? ScopeSet.fromString(response.scope)\r\n            : new ScopeSet(request.scopes);\r\n        const expiresOn =\r\n            options.expiresOn ||\r\n            response.expires_in + new Date().getTime() / 1000;\r\n\r\n        const extendedExpiresOn =\r\n            options.extendedExpiresOn ||\r\n            (response.ext_expires_in || response.expires_in) +\r\n                new Date().getTime() / 1000;\r\n\r\n        const accessTokenEntity = CacheHelpers.createAccessTokenEntity(\r\n            homeAccountId,\r\n            environment,\r\n            response.access_token,\r\n            this.config.auth.clientId,\r\n            tenantId,\r\n            scopes.printScopes(),\r\n            expiresOn,\r\n            extendedExpiresOn,\r\n            base64Decode\r\n        );\r\n\r\n        await this.storage.setAccessTokenCredential(\r\n            accessTokenEntity,\r\n            correlationId\r\n        );\r\n        return accessTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * Helper function to load refresh tokens to msal-browser cache\r\n     * @param request\r\n     * @param response\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @returns `RefreshTokenEntity`\r\n     */\r\n    private async loadRefreshToken(\r\n        response: ExternalTokenResponse,\r\n        homeAccountId: string,\r\n        environment: string,\r\n        correlationId: string\r\n    ): Promise<RefreshTokenEntity | null> {\r\n        if (!response.refresh_token) {\r\n            this.logger.verbose(\r\n                \"TokenCache - no refresh token found in response\"\r\n            );\r\n            return null;\r\n        }\r\n\r\n        this.logger.verbose(\"TokenCache - loading refresh token\");\r\n        const refreshTokenEntity = CacheHelpers.createRefreshTokenEntity(\r\n            homeAccountId,\r\n            environment,\r\n            response.refresh_token,\r\n            this.config.auth.clientId,\r\n            response.foci,\r\n            undefined, // userAssertionHash\r\n            response.refresh_token_expires_in\r\n        );\r\n\r\n        await this.storage.setRefreshTokenCredential(\r\n            refreshTokenEntity,\r\n            correlationId\r\n        );\r\n        return refreshTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * Helper function to generate an `AuthenticationResult` for the result.\r\n     * @param request\r\n     * @param idTokenObj\r\n     * @param cacheRecord\r\n     * @param authority\r\n     * @returns `AuthenticationResult`\r\n     */\r\n    private generateAuthenticationResult(\r\n        request: SilentRequest,\r\n        cacheRecord: CacheRecord & { account: AccountEntity },\r\n        idTokenClaims?: TokenClaims,\r\n        authority?: Authority\r\n    ): AuthenticationResult {\r\n        let accessToken: string = \"\";\r\n        let responseScopes: Array<string> = [];\r\n        let expiresOn: Date | null = null;\r\n        let extExpiresOn: Date | undefined;\r\n\r\n        if (cacheRecord?.accessToken) {\r\n            accessToken = cacheRecord.accessToken.secret;\r\n            responseScopes = ScopeSet.fromString(\r\n                cacheRecord.accessToken.target\r\n            ).asArray();\r\n            expiresOn = new Date(\r\n                Number(cacheRecord.accessToken.expiresOn) * 1000\r\n            );\r\n            extExpiresOn = new Date(\r\n                Number(cacheRecord.accessToken.extendedExpiresOn) * 1000\r\n            );\r\n        }\r\n\r\n        const accountEntity = cacheRecord.account;\r\n\r\n        return {\r\n            authority: authority ? authority.canonicalAuthority : \"\",\r\n            uniqueId: cacheRecord.account.localAccountId,\r\n            tenantId: cacheRecord.account.realm,\r\n            scopes: responseScopes,\r\n            account: accountEntity.getAccountInfo(),\r\n            idToken: cacheRecord.idToken?.secret || \"\",\r\n            idTokenClaims: idTokenClaims || {},\r\n            accessToken: accessToken,\r\n            fromCache: true,\r\n            expiresOn: expiresOn,\r\n            correlationId: request.correlationId || \"\",\r\n            requestId: \"\",\r\n            extExpiresOn: extExpiresOn,\r\n            familyId: cacheRecord.refreshToken?.familyId || \"\",\r\n            tokenType: cacheRecord?.accessToken?.tokenType || \"\",\r\n            state: request.state || \"\",\r\n            cloudGraphHostName: accountEntity.cloudGraphHostName || \"\",\r\n            msGraphHost: accountEntity.msGraphHost || \"\",\r\n            fromNativeBroker: false,\r\n        };\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}