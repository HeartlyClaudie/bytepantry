{"ast":null,"code":"/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { UrlString } from '../url/UrlString.mjs';\nimport { AuthorityMetadataSource } from '../utils/Constants.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst rawMetdataJSON = {\n  endpointMetadata: {\n    \"login.microsoftonline.com\": {\n      token_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/token\",\n      jwks_uri: \"https://login.microsoftonline.com/{tenantid}/discovery/v2.0/keys\",\n      issuer: \"https://login.microsoftonline.com/{tenantid}/v2.0\",\n      authorization_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/authorize\",\n      end_session_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/logout\"\n    },\n    \"login.chinacloudapi.cn\": {\n      token_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/token\",\n      jwks_uri: \"https://login.chinacloudapi.cn/{tenantid}/discovery/v2.0/keys\",\n      issuer: \"https://login.partner.microsoftonline.cn/{tenantid}/v2.0\",\n      authorization_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/authorize\",\n      end_session_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/logout\"\n    },\n    \"login.microsoftonline.us\": {\n      token_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/token\",\n      jwks_uri: \"https://login.microsoftonline.us/{tenantid}/discovery/v2.0/keys\",\n      issuer: \"https://login.microsoftonline.us/{tenantid}/v2.0\",\n      authorization_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/authorize\",\n      end_session_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/logout\"\n    }\n  },\n  instanceDiscoveryMetadata: {\n    tenant_discovery_endpoint: \"https://{canonicalAuthority}/v2.0/.well-known/openid-configuration\",\n    metadata: [{\n      preferred_network: \"login.microsoftonline.com\",\n      preferred_cache: \"login.windows.net\",\n      aliases: [\"login.microsoftonline.com\", \"login.windows.net\", \"login.microsoft.com\", \"sts.windows.net\"]\n    }, {\n      preferred_network: \"login.partner.microsoftonline.cn\",\n      preferred_cache: \"login.partner.microsoftonline.cn\",\n      aliases: [\"login.partner.microsoftonline.cn\", \"login.chinacloudapi.cn\"]\n    }, {\n      preferred_network: \"login.microsoftonline.de\",\n      preferred_cache: \"login.microsoftonline.de\",\n      aliases: [\"login.microsoftonline.de\"]\n    }, {\n      preferred_network: \"login.microsoftonline.us\",\n      preferred_cache: \"login.microsoftonline.us\",\n      aliases: [\"login.microsoftonline.us\", \"login.usgovcloudapi.net\"]\n    }, {\n      preferred_network: \"login-us.microsoftonline.com\",\n      preferred_cache: \"login-us.microsoftonline.com\",\n      aliases: [\"login-us.microsoftonline.com\"]\n    }]\n  }\n};\nconst EndpointMetadata = rawMetdataJSON.endpointMetadata;\nconst InstanceDiscoveryMetadata = rawMetdataJSON.instanceDiscoveryMetadata;\nconst InstanceDiscoveryMetadataAliases = new Set();\nInstanceDiscoveryMetadata.metadata.forEach(metadataEntry => {\n  metadataEntry.aliases.forEach(alias => {\n    InstanceDiscoveryMetadataAliases.add(alias);\n  });\n});\n/**\r\n * Attempts to get an aliases array from the static authority metadata sources based on the canonical authority host\r\n * @param staticAuthorityOptions\r\n * @param logger\r\n * @returns\r\n */\nfunction getAliasesFromStaticSources(staticAuthorityOptions, logger) {\n  let staticAliases;\n  const canonicalAuthority = staticAuthorityOptions.canonicalAuthority;\n  if (canonicalAuthority) {\n    const authorityHost = new UrlString(canonicalAuthority).getUrlComponents().HostNameAndPort;\n    staticAliases = getAliasesFromMetadata(authorityHost, staticAuthorityOptions.cloudDiscoveryMetadata?.metadata, AuthorityMetadataSource.CONFIG, logger) || getAliasesFromMetadata(authorityHost, InstanceDiscoveryMetadata.metadata, AuthorityMetadataSource.HARDCODED_VALUES, logger) || staticAuthorityOptions.knownAuthorities;\n  }\n  return staticAliases || [];\n}\n/**\r\n * Returns aliases for from the raw cloud discovery metadata passed in\r\n * @param authorityHost\r\n * @param rawCloudDiscoveryMetadata\r\n * @returns\r\n */\nfunction getAliasesFromMetadata(authorityHost, cloudDiscoveryMetadata, source, logger) {\n  logger?.trace(`getAliasesFromMetadata called with source: ${source}`);\n  if (authorityHost && cloudDiscoveryMetadata) {\n    const metadata = getCloudDiscoveryMetadataFromNetworkResponse(cloudDiscoveryMetadata, authorityHost);\n    if (metadata) {\n      logger?.trace(`getAliasesFromMetadata: found cloud discovery metadata in ${source}, returning aliases`);\n      return metadata.aliases;\n    } else {\n      logger?.trace(`getAliasesFromMetadata: did not find cloud discovery metadata in ${source}`);\n    }\n  }\n  return null;\n}\n/**\r\n * Get cloud discovery metadata for common authorities\r\n */\nfunction getCloudDiscoveryMetadataFromHardcodedValues(authorityHost) {\n  const metadata = getCloudDiscoveryMetadataFromNetworkResponse(InstanceDiscoveryMetadata.metadata, authorityHost);\n  return metadata;\n}\n/**\r\n * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n * @param response\r\n * @param authority\r\n */\nfunction getCloudDiscoveryMetadataFromNetworkResponse(response, authorityHost) {\n  for (let i = 0; i < response.length; i++) {\n    const metadata = response[i];\n    if (metadata.aliases.includes(authorityHost)) {\n      return metadata;\n    }\n  }\n  return null;\n}\nexport { EndpointMetadata, InstanceDiscoveryMetadata, InstanceDiscoveryMetadataAliases, getAliasesFromMetadata, getAliasesFromStaticSources, getCloudDiscoveryMetadataFromHardcodedValues, getCloudDiscoveryMetadataFromNetworkResponse, rawMetdataJSON };","map":{"version":3,"names":["rawMetdataJSON","endpointMetadata","token_endpoint","jwks_uri","issuer","authorization_endpoint","end_session_endpoint","instanceDiscoveryMetadata","tenant_discovery_endpoint","metadata","preferred_network","preferred_cache","aliases","EndpointMetadata","InstanceDiscoveryMetadata","InstanceDiscoveryMetadataAliases","Set","forEach","metadataEntry","alias","add","getAliasesFromStaticSources","staticAuthorityOptions","logger","staticAliases","canonicalAuthority","authorityHost","UrlString","getUrlComponents","HostNameAndPort","getAliasesFromMetadata","cloudDiscoveryMetadata","AuthorityMetadataSource","CONFIG","HARDCODED_VALUES","knownAuthorities","source","trace","getCloudDiscoveryMetadataFromNetworkResponse","getCloudDiscoveryMetadataFromHardcodedValues","response","i","length","includes"],"sources":["C:\\bytepantry\\frontend\\node_modules\\@azure\\msal-common\\src\\authority\\AuthorityMetadata.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Logger } from \"../logger/Logger.js\";\r\nimport { UrlString } from \"../url/UrlString.js\";\r\nimport { AuthorityMetadataSource } from \"../utils/Constants.js\";\r\nimport { StaticAuthorityOptions } from \"./AuthorityOptions.js\";\r\nimport { CloudDiscoveryMetadata } from \"./CloudDiscoveryMetadata.js\";\r\nimport { CloudInstanceDiscoveryResponse } from \"./CloudInstanceDiscoveryResponse.js\";\r\nimport { OpenIdConfigResponse } from \"./OpenIdConfigResponse.js\";\r\n\r\ntype RawMetadata = {\r\n    endpointMetadata: { [key: string]: OpenIdConfigResponse };\r\n    instanceDiscoveryMetadata: CloudInstanceDiscoveryResponse;\r\n};\r\n\r\nexport const rawMetdataJSON: RawMetadata = {\r\n    endpointMetadata: {\r\n        \"login.microsoftonline.com\": {\r\n            token_endpoint:\r\n                \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/token\",\r\n            jwks_uri:\r\n                \"https://login.microsoftonline.com/{tenantid}/discovery/v2.0/keys\",\r\n            issuer: \"https://login.microsoftonline.com/{tenantid}/v2.0\",\r\n            authorization_endpoint:\r\n                \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/authorize\",\r\n            end_session_endpoint:\r\n                \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/logout\",\r\n        },\r\n        \"login.chinacloudapi.cn\": {\r\n            token_endpoint:\r\n                \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/token\",\r\n            jwks_uri:\r\n                \"https://login.chinacloudapi.cn/{tenantid}/discovery/v2.0/keys\",\r\n            issuer: \"https://login.partner.microsoftonline.cn/{tenantid}/v2.0\",\r\n            authorization_endpoint:\r\n                \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/authorize\",\r\n            end_session_endpoint:\r\n                \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/logout\",\r\n        },\r\n        \"login.microsoftonline.us\": {\r\n            token_endpoint:\r\n                \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/token\",\r\n            jwks_uri:\r\n                \"https://login.microsoftonline.us/{tenantid}/discovery/v2.0/keys\",\r\n            issuer: \"https://login.microsoftonline.us/{tenantid}/v2.0\",\r\n            authorization_endpoint:\r\n                \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/authorize\",\r\n            end_session_endpoint:\r\n                \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/logout\",\r\n        },\r\n    },\r\n    instanceDiscoveryMetadata: {\r\n        tenant_discovery_endpoint:\r\n            \"https://{canonicalAuthority}/v2.0/.well-known/openid-configuration\",\r\n        metadata: [\r\n            {\r\n                preferred_network: \"login.microsoftonline.com\",\r\n                preferred_cache: \"login.windows.net\",\r\n                aliases: [\r\n                    \"login.microsoftonline.com\",\r\n                    \"login.windows.net\",\r\n                    \"login.microsoft.com\",\r\n                    \"sts.windows.net\",\r\n                ],\r\n            },\r\n            {\r\n                preferred_network: \"login.partner.microsoftonline.cn\",\r\n                preferred_cache: \"login.partner.microsoftonline.cn\",\r\n                aliases: [\r\n                    \"login.partner.microsoftonline.cn\",\r\n                    \"login.chinacloudapi.cn\",\r\n                ],\r\n            },\r\n            {\r\n                preferred_network: \"login.microsoftonline.de\",\r\n                preferred_cache: \"login.microsoftonline.de\",\r\n                aliases: [\"login.microsoftonline.de\"],\r\n            },\r\n            {\r\n                preferred_network: \"login.microsoftonline.us\",\r\n                preferred_cache: \"login.microsoftonline.us\",\r\n                aliases: [\r\n                    \"login.microsoftonline.us\",\r\n                    \"login.usgovcloudapi.net\",\r\n                ],\r\n            },\r\n            {\r\n                preferred_network: \"login-us.microsoftonline.com\",\r\n                preferred_cache: \"login-us.microsoftonline.com\",\r\n                aliases: [\"login-us.microsoftonline.com\"],\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nexport const EndpointMetadata = rawMetdataJSON.endpointMetadata;\r\nexport const InstanceDiscoveryMetadata =\r\n    rawMetdataJSON.instanceDiscoveryMetadata;\r\n\r\nexport const InstanceDiscoveryMetadataAliases: Set<String> = new Set();\r\nInstanceDiscoveryMetadata.metadata.forEach(\r\n    (metadataEntry: CloudDiscoveryMetadata) => {\r\n        metadataEntry.aliases.forEach((alias: string) => {\r\n            InstanceDiscoveryMetadataAliases.add(alias);\r\n        });\r\n    }\r\n);\r\n\r\n/**\r\n * Attempts to get an aliases array from the static authority metadata sources based on the canonical authority host\r\n * @param staticAuthorityOptions\r\n * @param logger\r\n * @returns\r\n */\r\nexport function getAliasesFromStaticSources(\r\n    staticAuthorityOptions: StaticAuthorityOptions,\r\n    logger?: Logger\r\n): string[] {\r\n    let staticAliases: string[] | undefined;\r\n    const canonicalAuthority = staticAuthorityOptions.canonicalAuthority;\r\n    if (canonicalAuthority) {\r\n        const authorityHost = new UrlString(\r\n            canonicalAuthority\r\n        ).getUrlComponents().HostNameAndPort;\r\n        staticAliases =\r\n            getAliasesFromMetadata(\r\n                authorityHost,\r\n                staticAuthorityOptions.cloudDiscoveryMetadata?.metadata,\r\n                AuthorityMetadataSource.CONFIG,\r\n                logger\r\n            ) ||\r\n            getAliasesFromMetadata(\r\n                authorityHost,\r\n                InstanceDiscoveryMetadata.metadata,\r\n                AuthorityMetadataSource.HARDCODED_VALUES,\r\n                logger\r\n            ) ||\r\n            staticAuthorityOptions.knownAuthorities;\r\n    }\r\n\r\n    return staticAliases || [];\r\n}\r\n\r\n/**\r\n * Returns aliases for from the raw cloud discovery metadata passed in\r\n * @param authorityHost\r\n * @param rawCloudDiscoveryMetadata\r\n * @returns\r\n */\r\nexport function getAliasesFromMetadata(\r\n    authorityHost?: string,\r\n    cloudDiscoveryMetadata?: CloudDiscoveryMetadata[],\r\n    source?: AuthorityMetadataSource,\r\n    logger?: Logger\r\n): string[] | null {\r\n    logger?.trace(`getAliasesFromMetadata called with source: ${source}`);\r\n    if (authorityHost && cloudDiscoveryMetadata) {\r\n        const metadata = getCloudDiscoveryMetadataFromNetworkResponse(\r\n            cloudDiscoveryMetadata,\r\n            authorityHost\r\n        );\r\n\r\n        if (metadata) {\r\n            logger?.trace(\r\n                `getAliasesFromMetadata: found cloud discovery metadata in ${source}, returning aliases`\r\n            );\r\n            return metadata.aliases;\r\n        } else {\r\n            logger?.trace(\r\n                `getAliasesFromMetadata: did not find cloud discovery metadata in ${source}`\r\n            );\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/**\r\n * Get cloud discovery metadata for common authorities\r\n */\r\nexport function getCloudDiscoveryMetadataFromHardcodedValues(\r\n    authorityHost: string\r\n): CloudDiscoveryMetadata | null {\r\n    const metadata = getCloudDiscoveryMetadataFromNetworkResponse(\r\n        InstanceDiscoveryMetadata.metadata,\r\n        authorityHost\r\n    );\r\n    return metadata;\r\n}\r\n\r\n/**\r\n * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n * @param response\r\n * @param authority\r\n */\r\nexport function getCloudDiscoveryMetadataFromNetworkResponse(\r\n    response: CloudDiscoveryMetadata[],\r\n    authorityHost: string\r\n): CloudDiscoveryMetadata | null {\r\n    for (let i = 0; i < response.length; i++) {\r\n        const metadata = response[i];\r\n        if (metadata.aliases.includes(authorityHost)) {\r\n            return metadata;\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}