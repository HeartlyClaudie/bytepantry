{"ast":null,"code":"/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { CodeChallengeMethodValues, PromptValue } from '../utils/Constants.mjs';\nimport { redirectUriEmpty, invalidPromptValue, invalidClaims, pkceParamsMissing, invalidCodeChallengeMethod } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Validates server consumable params from the \"request\" objects\r\n */\nclass RequestValidator {\n  /**\r\n   * Utility to check if the `redirectUri` in the request is a non-null value\r\n   * @param redirectUri\r\n   */\n  static validateRedirectUri(redirectUri) {\n    if (!redirectUri) {\n      throw createClientConfigurationError(redirectUriEmpty);\n    }\n  }\n  /**\r\n   * Utility to validate prompt sent by the user in the request\r\n   * @param prompt\r\n   */\n  static validatePrompt(prompt) {\n    const promptValues = [];\n    for (const value in PromptValue) {\n      promptValues.push(PromptValue[value]);\n    }\n    if (promptValues.indexOf(prompt) < 0) {\n      throw createClientConfigurationError(invalidPromptValue);\n    }\n  }\n  static validateClaims(claims) {\n    try {\n      JSON.parse(claims);\n    } catch (e) {\n      throw createClientConfigurationError(invalidClaims);\n    }\n  }\n  /**\r\n   * Utility to validate code_challenge and code_challenge_method\r\n   * @param codeChallenge\r\n   * @param codeChallengeMethod\r\n   */\n  static validateCodeChallengeParams(codeChallenge, codeChallengeMethod) {\n    if (!codeChallenge || !codeChallengeMethod) {\n      throw createClientConfigurationError(pkceParamsMissing);\n    } else {\n      this.validateCodeChallengeMethod(codeChallengeMethod);\n    }\n  }\n  /**\r\n   * Utility to validate code_challenge_method\r\n   * @param codeChallengeMethod\r\n   */\n  static validateCodeChallengeMethod(codeChallengeMethod) {\n    if ([CodeChallengeMethodValues.PLAIN, CodeChallengeMethodValues.S256].indexOf(codeChallengeMethod) < 0) {\n      throw createClientConfigurationError(invalidCodeChallengeMethod);\n    }\n  }\n}\nexport { RequestValidator };","map":{"version":3,"names":["RequestValidator","validateRedirectUri","redirectUri","createClientConfigurationError","redirectUriEmpty","validatePrompt","prompt","promptValues","value","PromptValue","push","indexOf","invalidPromptValue","validateClaims","claims","JSON","parse","e","invalidClaims","validateCodeChallengeParams","codeChallenge","codeChallengeMethod","pkceParamsMissing","validateCodeChallengeMethod","CodeChallengeMethodValues","PLAIN","S256","invalidCodeChallengeMethod"],"sources":["C:\\bytepantry\\frontend\\node_modules\\@azure\\msal-common\\src\\request\\RequestValidator.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    createClientConfigurationError,\r\n    ClientConfigurationErrorCodes,\r\n} from \"../error/ClientConfigurationError.js\";\r\nimport { PromptValue, CodeChallengeMethodValues } from \"../utils/Constants.js\";\r\n\r\n/**\r\n * Validates server consumable params from the \"request\" objects\r\n */\r\nexport class RequestValidator {\r\n    /**\r\n     * Utility to check if the `redirectUri` in the request is a non-null value\r\n     * @param redirectUri\r\n     */\r\n    static validateRedirectUri(redirectUri: string): void {\r\n        if (!redirectUri) {\r\n            throw createClientConfigurationError(\r\n                ClientConfigurationErrorCodes.redirectUriEmpty\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Utility to validate prompt sent by the user in the request\r\n     * @param prompt\r\n     */\r\n    static validatePrompt(prompt: string): void {\r\n        const promptValues = [];\r\n\r\n        for (const value in PromptValue) {\r\n            promptValues.push(PromptValue[value]);\r\n        }\r\n\r\n        if (promptValues.indexOf(prompt) < 0) {\r\n            throw createClientConfigurationError(\r\n                ClientConfigurationErrorCodes.invalidPromptValue\r\n            );\r\n        }\r\n    }\r\n\r\n    static validateClaims(claims: string): void {\r\n        try {\r\n            JSON.parse(claims);\r\n        } catch (e) {\r\n            throw createClientConfigurationError(\r\n                ClientConfigurationErrorCodes.invalidClaims\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Utility to validate code_challenge and code_challenge_method\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */\r\n    static validateCodeChallengeParams(\r\n        codeChallenge: string,\r\n        codeChallengeMethod: string\r\n    ): void {\r\n        if (!codeChallenge || !codeChallengeMethod) {\r\n            throw createClientConfigurationError(\r\n                ClientConfigurationErrorCodes.pkceParamsMissing\r\n            );\r\n        } else {\r\n            this.validateCodeChallengeMethod(codeChallengeMethod);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Utility to validate code_challenge_method\r\n     * @param codeChallengeMethod\r\n     */\r\n    static validateCodeChallengeMethod(codeChallengeMethod: string): void {\r\n        if (\r\n            [\r\n                CodeChallengeMethodValues.PLAIN,\r\n                CodeChallengeMethodValues.S256,\r\n            ].indexOf(codeChallengeMethod) < 0\r\n        ) {\r\n            throw createClientConfigurationError(\r\n                ClientConfigurationErrorCodes.invalidCodeChallengeMethod\r\n            );\r\n        }\r\n    }\r\n}\r\n"],"mappings":";;;;;;;AAAA;;;AAGG;AAQH;;AAEG;MACUA,gBAAgB;EACzB;;;AAGG;EACH,OAAOC,mBAAmBA,CAACC,WAAmB;IAC1C,IAAI,CAACA,WAAW,EAAE;MACd,MAAMC,8BAA8B,CAChCC,gBAA8C,CACjD;IACJ;;EAGL;;;AAGG;EACH,OAAOC,cAAcA,CAACC,MAAc;IAChC,MAAMC,YAAY,GAAG,EAAE;IAEvB,KAAK,MAAMC,KAAK,IAAIC,WAAW,EAAE;MAC7BF,YAAY,CAACG,IAAI,CAACD,WAAW,CAACD,KAAK,CAAC,CAAC;IACxC;IAED,IAAID,YAAY,CAACI,OAAO,CAACL,MAAM,CAAC,GAAG,CAAC,EAAE;MAClC,MAAMH,8BAA8B,CAChCS,kBAAgD,CACnD;IACJ;;EAGL,OAAOC,cAAcA,CAACC,MAAc;IAChC,IAAI;MACAC,IAAI,CAACC,KAAK,CAACF,MAAM,CAAC;IACrB,EAAC,OAAOG,CAAC,EAAE;MACR,MAAMd,8BAA8B,CAChCe,aAA2C,CAC9C;IACJ;;EAGL;;;;AAIG;EACH,OAAOC,2BAA2BA,CAC9BC,aAAqB,EACrBC,mBAA2B;IAE3B,IAAI,CAACD,aAAa,IAAI,CAACC,mBAAmB,EAAE;MACxC,MAAMlB,8BAA8B,CAChCmB,iBAA+C,CAClD;IACJ,OAAM;MACH,IAAI,CAACC,2BAA2B,CAACF,mBAAmB,CAAC;IACxD;;EAGL;;;AAGG;EACH,OAAOE,2BAA2BA,CAACF,mBAA2B;IAC1D,IACI,CACIG,yBAAyB,CAACC,KAAK,EAC/BD,yBAAyB,CAACE,IAAI,CACjC,CAACf,OAAO,CAACU,mBAAmB,CAAC,GAAG,CAAC,EACpC;MACE,MAAMlB,8BAA8B,CAChCwB,0BAAwD,CAC3D;IACJ;;AAER","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}