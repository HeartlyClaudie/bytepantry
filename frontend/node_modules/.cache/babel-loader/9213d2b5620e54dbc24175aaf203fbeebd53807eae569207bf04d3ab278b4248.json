{"ast":null,"code":"import axios from \"axios\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\nimport { msalConfig, loginRequest } from \"./authConfig\";\nconst API_URL = \"http://localhost:3000\"; // Replace with your actual API URL\n\nconst msalInstance = new PublicClientApplication(msalConfig);\n\n// Get JWT Token from MSAL\nconst getToken = async () => {\n  const accounts = msalInstance.getAllAccounts();\n  if (accounts.length === 0) return null;\n  try {\n    const response = await msalInstance.acquireTokenSilent({\n      ...loginRequest,\n      account: accounts[0]\n    });\n    return response.idToken;\n  } catch (error) {\n    console.error(\"Error acquiring token:\", error);\n    return null;\n  }\n};\n\n// Axios instance with JWT authentication\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Attach JWT token to every request\napi.interceptors.request.use(async config => {\n  const token = await getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Function to fetch pantry items\nexport const getPantryItems = async () => {\n  try {\n    const response = await api.get(\"/api/pantry\");\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching pantry items:\", error);\n    throw error;\n  }\n};\n\n// Function to log out from Azure AD B2C\nexport const logout = () => {\n  msalInstance.logoutPopup().then(() => {\n    localStorage.removeItem(\"jwtToken\");\n    window.location.href = \"/login\"; // Redirect to login page\n  }).catch(error => {\n    console.error(\"Logout failed:\", error);\n  });\n};\nexport default api;","map":{"version":3,"names":["axios","PublicClientApplication","msalConfig","loginRequest","API_URL","msalInstance","getToken","accounts","getAllAccounts","length","response","acquireTokenSilent","account","idToken","error","console","api","create","baseURL","headers","interceptors","request","use","config","token","Authorization","getPantryItems","get","data","logout","logoutPopup","then","localStorage","removeItem","window","location","href","catch"],"sources":["C:/bytepantry/frontend/src/api.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { PublicClientApplication } from \"@azure/msal-browser\";\r\nimport { msalConfig, loginRequest } from \"./authConfig\";\r\n\r\nconst API_URL = \"http://localhost:3000\"; // Replace with your actual API URL\r\n\r\nconst msalInstance = new PublicClientApplication(msalConfig);\r\n\r\n// Get JWT Token from MSAL\r\nconst getToken = async () => {\r\n  const accounts = msalInstance.getAllAccounts();\r\n  if (accounts.length === 0) return null;\r\n\r\n  try {\r\n    const response = await msalInstance.acquireTokenSilent({\r\n      ...loginRequest,\r\n      account: accounts[0],\r\n    });\r\n    return response.idToken;\r\n  } catch (error) {\r\n    console.error(\"Error acquiring token:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Axios instance with JWT authentication\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: { \"Content-Type\": \"application/json\" },\r\n});\r\n\r\n// Attach JWT token to every request\r\napi.interceptors.request.use(async (config) => {\r\n  const token = await getToken();\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Function to fetch pantry items\r\nexport const getPantryItems = async () => {\r\n  try {\r\n    const response = await api.get(\"/api/pantry\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching pantry items:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to log out from Azure AD B2C\r\nexport const logout = () => {\r\n  msalInstance.logoutPopup()\r\n    .then(() => {\r\n      localStorage.removeItem(\"jwtToken\");\r\n      window.location.href = \"/login\"; // Redirect to login page\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Logout failed:\", error);\r\n    });\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,uBAAuB,QAAQ,qBAAqB;AAC7D,SAASC,UAAU,EAAEC,YAAY,QAAQ,cAAc;AAEvD,MAAMC,OAAO,GAAG,uBAAuB,CAAC,CAAC;;AAEzC,MAAMC,YAAY,GAAG,IAAIJ,uBAAuB,CAACC,UAAU,CAAC;;AAE5D;AACA,MAAMI,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAC3B,MAAMC,QAAQ,GAAGF,YAAY,CAACG,cAAc,CAAC,CAAC;EAC9C,IAAID,QAAQ,CAACE,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;EAEtC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,YAAY,CAACM,kBAAkB,CAAC;MACrD,GAAGR,YAAY;MACfS,OAAO,EAAEL,QAAQ,CAAC,CAAC;IACrB,CAAC,CAAC;IACF,OAAOG,QAAQ,CAACG,OAAO;EACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,MAAME,GAAG,GAAGhB,KAAK,CAACiB,MAAM,CAAC;EACvBC,OAAO,EAAEd,OAAO;EAChBe,OAAO,EAAE;IAAE,cAAc,EAAE;EAAmB;AAChD,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOC,MAAM,IAAK;EAC7C,MAAMC,KAAK,GAAG,MAAMlB,QAAQ,CAAC,CAAC;EAC9B,IAAIkB,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACM,aAAa,GAAG,UAAUD,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMG,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMM,GAAG,CAACW,GAAG,CAAC,aAAa,CAAC;IAC7C,OAAOjB,QAAQ,CAACkB,IAAI;EACtB,CAAC,CAAC,OAAOd,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMe,MAAM,GAAGA,CAAA,KAAM;EAC1BxB,YAAY,CAACyB,WAAW,CAAC,CAAC,CACvBC,IAAI,CAAC,MAAM;IACVC,YAAY,CAACC,UAAU,CAAC,UAAU,CAAC;IACnCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ,CAAC,CAAC;EACnC,CAAC,CAAC,CACDC,KAAK,CAACvB,KAAK,IAAI;IACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;EACxC,CAAC,CAAC;AACN,CAAC;AAED,eAAeE,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}