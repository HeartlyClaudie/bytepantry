{"ast":null,"code":"/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Utility functions for managing date and time operations.\r\n */\n/**\r\n * return the current time in Unix time (seconds).\r\n */\nfunction nowSeconds() {\n  // Date.getTime() returns in milliseconds.\n  return Math.round(new Date().getTime() / 1000.0);\n}\n/**\r\n * check if a token is expired based on given UTC time in seconds.\r\n * @param expiresOn\r\n */\nfunction isTokenExpired(expiresOn, offset) {\n  // check for access token expiry\n  const expirationSec = Number(expiresOn) || 0;\n  const offsetCurrentTimeSec = nowSeconds() + offset;\n  // If current time + offset is greater than token expiration time, then token is expired.\n  return offsetCurrentTimeSec > expirationSec;\n}\n/**\r\n * If the current time is earlier than the time that a token was cached at, we must discard the token\r\n * i.e. The system clock was turned back after acquiring the cached token\r\n * @param cachedAt\r\n * @param offset\r\n */\nfunction wasClockTurnedBack(cachedAt) {\n  const cachedAtSec = Number(cachedAt);\n  return cachedAtSec > nowSeconds();\n}\n/**\r\n * Waits for t number of milliseconds\r\n * @param t number\r\n * @param value T\r\n */\nfunction delay(t, value) {\n  return new Promise(resolve => setTimeout(() => resolve(value), t));\n}\nexport { delay, isTokenExpired, nowSeconds, wasClockTurnedBack };","map":{"version":3,"names":["nowSeconds","Math","round","Date","getTime","isTokenExpired","expiresOn","offset","expirationSec","Number","offsetCurrentTimeSec","wasClockTurnedBack","cachedAt","cachedAtSec","delay","t","value","Promise","resolve","setTimeout"],"sources":["C:\\bytepantry\\frontend\\node_modules\\@azure\\msal-common\\src\\utils\\TimeUtils.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * Utility functions for managing date and time operations.\r\n */\r\n\r\n/**\r\n * return the current time in Unix time (seconds).\r\n */\r\nexport function nowSeconds(): number {\r\n    // Date.getTime() returns in milliseconds.\r\n    return Math.round(new Date().getTime() / 1000.0);\r\n}\r\n\r\n/**\r\n * check if a token is expired based on given UTC time in seconds.\r\n * @param expiresOn\r\n */\r\nexport function isTokenExpired(expiresOn: string, offset: number): boolean {\r\n    // check for access token expiry\r\n    const expirationSec = Number(expiresOn) || 0;\r\n    const offsetCurrentTimeSec = nowSeconds() + offset;\r\n\r\n    // If current time + offset is greater than token expiration time, then token is expired.\r\n    return offsetCurrentTimeSec > expirationSec;\r\n}\r\n\r\n/**\r\n * If the current time is earlier than the time that a token was cached at, we must discard the token\r\n * i.e. The system clock was turned back after acquiring the cached token\r\n * @param cachedAt\r\n * @param offset\r\n */\r\nexport function wasClockTurnedBack(cachedAt: string): boolean {\r\n    const cachedAtSec = Number(cachedAt);\r\n\r\n    return cachedAtSec > nowSeconds();\r\n}\r\n\r\n/**\r\n * Waits for t number of milliseconds\r\n * @param t number\r\n * @param value T\r\n */\r\nexport function delay<T>(t: number, value?: T): Promise<T | void> {\r\n    return new Promise((resolve) => setTimeout(() => resolve(value), t));\r\n}\r\n"],"mappings":";;;AAAA;;;AAGG;AAEH;;AAEG;AAEH;;AAEG;SACaA,UAAUA,CAAA;;EAEtB,OAAOC,IAAI,CAACC,KAAK,CAAC,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,MAAM,CAAC;AACpD;AAEA;;;AAGG;AACa,SAAAC,cAAcA,CAACC,SAAiB,EAAEC,MAAc;;EAE5D,MAAMC,aAAa,GAAGC,MAAM,CAACH,SAAS,CAAC,IAAI,CAAC;EAC5C,MAAMI,oBAAoB,GAAGV,UAAU,EAAE,GAAGO,MAAM;;EAGlD,OAAOG,oBAAoB,GAAGF,aAAa;AAC/C;AAEA;;;;;AAKG;AACG,SAAUG,kBAAkBA,CAACC,QAAgB;EAC/C,MAAMC,WAAW,GAAGJ,MAAM,CAACG,QAAQ,CAAC;EAEpC,OAAOC,WAAW,GAAGb,UAAU,EAAE;AACrC;AAEA;;;;AAIG;AACa,SAAAc,KAAKA,CAAIC,CAAS,EAAEC,KAAS;EACzC,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAAC,MAAMD,OAAO,CAACF,KAAK,CAAC,EAAED,CAAC,CAAC,CAAC;AACxE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}