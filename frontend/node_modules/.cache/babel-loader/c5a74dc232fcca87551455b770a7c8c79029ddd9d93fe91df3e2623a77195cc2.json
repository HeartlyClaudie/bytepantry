{"ast":null,"code":"/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { isOidcProtocolMode } from '../config/ClientConfiguration.mjs';\nimport { BaseClient } from './BaseClient.mjs';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.mjs';\nimport { GrantType, AuthenticationScheme, HeaderNames, Errors } from '../utils/Constants.mjs';\nimport { CLIENT_ID } from '../constants/AADServerParamKeys.mjs';\nimport { ResponseHandler } from '../response/ResponseHandler.mjs';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\nimport { nowSeconds, isTokenExpired } from '../utils/TimeUtils.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { createInteractionRequiredAuthError, InteractionRequiredAuthError } from '../error/InteractionRequiredAuthError.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync, invoke } from '../utils/FunctionWrappers.mjs';\nimport { generateCredentialKey } from '../cache/utils/CacheHelpers.mjs';\nimport { getClientAssertion } from '../utils/ClientAssertionUtils.mjs';\nimport { tokenRequestEmpty, missingSshJwk } from '../error/ClientConfigurationErrorCodes.mjs';\nimport { noAccountInSilentRequest } from '../error/ClientAuthErrorCodes.mjs';\nimport { noTokensFound, refreshTokenExpired, badToken } from '../error/InteractionRequiredAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS = 300; // 5 Minutes\n/**\r\n * OAuth2.0 refresh token client\r\n * @internal\r\n */\nclass RefreshTokenClient extends BaseClient {\n  constructor(configuration, performanceClient) {\n    super(configuration, performanceClient);\n  }\n  async acquireToken(request) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n    const reqTimestamp = nowSeconds();\n    const response = await invokeAsync(this.executeTokenRequest.bind(this), PerformanceEvents.RefreshTokenClientExecuteTokenRequest, this.logger, this.performanceClient, request.correlationId)(request, this.authority);\n    // Retrieve requestId from response headers\n    const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\n    const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n    responseHandler.validateTokenResponse(response.body);\n    return invokeAsync(responseHandler.handleServerTokenResponse.bind(responseHandler), PerformanceEvents.HandleServerTokenResponse, this.logger, this.performanceClient, request.correlationId)(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId);\n  }\n  /**\r\n   * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n   * @param request\r\n   */\n  async acquireTokenByRefreshToken(request) {\n    // Cannot renew token if no request object is given.\n    if (!request) {\n      throw createClientConfigurationError(tokenRequestEmpty);\n    }\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\n    // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n    if (!request.account) {\n      throw createClientAuthError(noAccountInSilentRequest);\n    }\n    // try checking if FOCI is enabled for the given application\n    const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment);\n    // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n    if (isFOCI) {\n      try {\n        return await invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, true);\n      } catch (e) {\n        const noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === noTokensFound;\n        const clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\n        // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n        if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n          return invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, false);\n          // throw in all other cases\n        } else {\n          throw e;\n        }\n      }\n    }\n    // fall back to application refresh token acquisition\n    return invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, false);\n  }\n  /**\r\n   * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n   * @param request\r\n   */\n  async acquireTokenWithCachedRefreshToken(request, foci) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n    // fetches family RT or application RT based on FOCI value\n    const refreshToken = invoke(this.cacheManager.getRefreshToken.bind(this.cacheManager), PerformanceEvents.CacheManagerGetRefreshToken, this.logger, this.performanceClient, request.correlationId)(request.account, foci, undefined, this.performanceClient, request.correlationId);\n    if (!refreshToken) {\n      throw createInteractionRequiredAuthError(noTokensFound);\n    }\n    if (refreshToken.expiresOn && isTokenExpired(refreshToken.expiresOn, request.refreshTokenExpirationOffsetSeconds || DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS)) {\n      this.performanceClient?.addFields({\n        rtExpiresOnMs: Number(refreshToken.expiresOn)\n      }, request.correlationId);\n      throw createInteractionRequiredAuthError(refreshTokenExpired);\n    }\n    // attach cached RT size to the current measurement\n    const refreshTokenRequest = {\n      ...request,\n      refreshToken: refreshToken.secret,\n      authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n      ccsCredential: {\n        credential: request.account.homeAccountId,\n        type: CcsCredentialType.HOME_ACCOUNT_ID\n      }\n    };\n    try {\n      return await invokeAsync(this.acquireToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireToken, this.logger, this.performanceClient, request.correlationId)(refreshTokenRequest);\n    } catch (e) {\n      if (e instanceof InteractionRequiredAuthError) {\n        this.performanceClient?.addFields({\n          rtExpiresOnMs: Number(refreshToken.expiresOn)\n        }, request.correlationId);\n        if (e.subError === badToken) {\n          // Remove bad refresh token from cache\n          this.logger.verbose(\"acquireTokenWithRefreshToken: bad refresh token, removing from cache\");\n          const badRefreshTokenKey = generateCredentialKey(refreshToken);\n          this.cacheManager.removeRefreshToken(badRefreshTokenKey);\n        }\n      }\n      throw e;\n    }\n  }\n  /**\r\n   * Constructs the network message and makes a NW call to the underlying secure token service\r\n   * @param request\r\n   * @param authority\r\n   */\n  async executeTokenRequest(request, authority) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n    const queryParametersString = this.createTokenQueryParameters(request);\n    const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n    const requestBody = await invokeAsync(this.createTokenRequestBody.bind(this), PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, this.logger, this.performanceClient, request.correlationId)(request);\n    const headers = this.createTokenRequestHeaders(request.ccsCredential);\n    const thumbprint = {\n      clientId: request.tokenBodyParameters?.clientId || this.config.authOptions.clientId,\n      authority: authority.canonicalAuthority,\n      scopes: request.scopes,\n      claims: request.claims,\n      authenticationScheme: request.authenticationScheme,\n      resourceRequestMethod: request.resourceRequestMethod,\n      resourceRequestUri: request.resourceRequestUri,\n      shrClaims: request.shrClaims,\n      sshKid: request.sshKid\n    };\n    return invokeAsync(this.executePostToTokenEndpoint.bind(this), PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint, this.logger, this.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId, PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint);\n  }\n  /**\r\n   * Helper function to create the token request body\r\n   * @param request\r\n   */\n  async createTokenRequestBody(request) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n    const correlationId = request.correlationId;\n    const parameterBuilder = new RequestParameterBuilder(correlationId, this.performanceClient);\n    parameterBuilder.addClientId(request.embeddedClientId || request.tokenBodyParameters?.[CLIENT_ID] || this.config.authOptions.clientId);\n    if (request.redirectUri) {\n      parameterBuilder.addRedirectUri(request.redirectUri);\n    }\n    parameterBuilder.addScopes(request.scopes, true, this.config.authOptions.authority.options.OIDCOptions?.defaultScopes);\n    parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n    if (this.serverTelemetryManager && !isOidcProtocolMode(this.config)) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n    parameterBuilder.addRefreshToken(request.refreshToken);\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n    if (this.config.clientCredentials.clientAssertion) {\n      const clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(await getClientAssertion(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n    if (request.authenticationScheme === AuthenticationScheme.POP) {\n      const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n      let reqCnfData;\n      if (!request.popKid) {\n        const generatedReqCnfData = await invokeAsync(popTokenGenerator.generateCnf.bind(popTokenGenerator), PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\n        reqCnfData = generatedReqCnfData.reqCnfString;\n      } else {\n        reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\n      }\n      // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n      parameterBuilder.addPopToken(reqCnfData);\n    } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n      if (request.sshJwk) {\n        parameterBuilder.addSshJwk(request.sshJwk);\n      } else {\n        throw createClientConfigurationError(missingSshJwk);\n      }\n    }\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n      switch (request.ccsCredential.type) {\n        case CcsCredentialType.HOME_ACCOUNT_ID:\n          try {\n            const clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n            parameterBuilder.addCcsOid(clientInfo);\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n          break;\n        case CcsCredentialType.UPN:\n          parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n          break;\n      }\n    }\n    if (request.embeddedClientId) {\n      parameterBuilder.addBrokerParameters({\n        brokerClientId: this.config.authOptions.clientId,\n        brokerRedirectUri: this.config.authOptions.redirectUri\n      });\n    }\n    if (request.tokenBodyParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n    }\n    return parameterBuilder.createQueryString();\n  }\n}\nexport { RefreshTokenClient };","map":{"version":3,"names":["DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS","RefreshTokenClient","BaseClient","constructor","configuration","performanceClient","acquireToken","request","addQueueMeasurement","PerformanceEvents","RefreshTokenClientAcquireToken","correlationId","reqTimestamp","nowSeconds","response","invokeAsync","executeTokenRequest","bind","RefreshTokenClientExecuteTokenRequest","logger","authority","requestId","headers","HeaderNames","X_MS_REQUEST_ID","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","HandleServerTokenResponse","undefined","forceCache","acquireTokenByRefreshToken","createClientConfigurationError","tokenRequestEmpty","RefreshTokenClientAcquireTokenByRefreshToken","account","createClientAuthError","noAccountInSilentRequest","isFOCI","isAppMetadataFOCI","environment","acquireTokenWithCachedRefreshToken","RefreshTokenClientAcquireTokenWithCachedRefreshToken","e","noFamilyRTInCache","InteractionRequiredAuthError","errorCode","noTokensFound","clientMismatchErrorWithFamilyRT","ServerError","Errors","INVALID_GRANT_ERROR","subError","CLIENT_MISMATCH_ERROR","foci","refreshToken","invoke","getRefreshToken","CacheManagerGetRefreshToken","createInteractionRequiredAuthError","expiresOn","isTokenExpired","refreshTokenExpirationOffsetSeconds","addFields","rtExpiresOnMs","Number","refreshTokenExpired","refreshTokenRequest","secret","authenticationScheme","AuthenticationScheme","BEARER","ccsCredential","credential","homeAccountId","type","CcsCredentialType","HOME_ACCOUNT_ID","badToken","verbose","badRefreshTokenKey","generateCredentialKey","removeRefreshToken","queryParametersString","createTokenQueryParameters","endpoint","UrlString","appendQueryString","tokenEndpoint","requestBody","createTokenRequestBody","RefreshTokenClientCreateTokenRequestBody","createTokenRequestHeaders","thumbprint","tokenBodyParameters","canonicalAuthority","scopes","claims","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostToTokenEndpoint","RefreshTokenClientExecutePostToTokenEndpoint","parameterBuilder","RequestParameterBuilder","addClientId","embeddedClientId","CLIENT_ID","redirectUri","addRedirectUri","addScopes","options","OIDCOptions","defaultScopes","addGrantType","GrantType","REFRESH_TOKEN_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","isOidcProtocolMode","addServerTelemetry","addRefreshToken","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","getClientAssertion","assertion","addClientAssertionType","assertionType","POP","popTokenGenerator","PopTokenGenerator","reqCnfData","popKid","generatedReqCnfData","generateCnf","PopTokenGenerateCnf","reqCnfString","encodeKid","addPopToken","SSH","sshJwk","addSshJwk","missingSshJwk","StringUtils","isEmptyObj","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","clientInfo","buildClientInfoFromHomeAccountId","addCcsOid","UPN","addCcsUpn","addBrokerParameters","brokerClientId","brokerRedirectUri","addExtraQueryParameters","createQueryString"],"sources":["C:\\bytepantry\\frontend\\node_modules\\@azure\\msal-common\\src\\client\\RefreshTokenClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    ClientConfiguration,\r\n    isOidcProtocolMode,\r\n} from \"../config/ClientConfiguration.js\";\r\nimport { BaseClient } from \"./BaseClient.js\";\r\nimport { CommonRefreshTokenRequest } from \"../request/CommonRefreshTokenRequest.js\";\r\nimport { Authority } from \"../authority/Authority.js\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse.js\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder.js\";\r\nimport {\r\n    GrantType,\r\n    AuthenticationScheme,\r\n    Errors,\r\n    HeaderNames,\r\n} from \"../utils/Constants.js\";\r\nimport * as AADServerParamKeys from \"../constants/AADServerParamKeys.js\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler.js\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult.js\";\r\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator.js\";\r\nimport { StringUtils } from \"../utils/StringUtils.js\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint.js\";\r\nimport { NetworkResponse } from \"../network/NetworkResponse.js\";\r\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest.js\";\r\nimport {\r\n    createClientConfigurationError,\r\n    ClientConfigurationErrorCodes,\r\n} from \"../error/ClientConfigurationError.js\";\r\nimport {\r\n    createClientAuthError,\r\n    ClientAuthErrorCodes,\r\n} from \"../error/ClientAuthError.js\";\r\nimport { ServerError } from \"../error/ServerError.js\";\r\nimport * as TimeUtils from \"../utils/TimeUtils.js\";\r\nimport { UrlString } from \"../url/UrlString.js\";\r\nimport { CcsCredentialType } from \"../account/CcsCredential.js\";\r\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo.js\";\r\nimport {\r\n    InteractionRequiredAuthError,\r\n    InteractionRequiredAuthErrorCodes,\r\n    createInteractionRequiredAuthError,\r\n} from \"../error/InteractionRequiredAuthError.js\";\r\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent.js\";\r\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient.js\";\r\nimport { invoke, invokeAsync } from \"../utils/FunctionWrappers.js\";\r\nimport { generateCredentialKey } from \"../cache/utils/CacheHelpers.js\";\r\nimport { ClientAssertion } from \"../account/ClientCredentials.js\";\r\nimport { getClientAssertion } from \"../utils/ClientAssertionUtils.js\";\r\n\r\nconst DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS = 300; // 5 Minutes\r\n\r\n/**\r\n * OAuth2.0 refresh token client\r\n * @internal\r\n */\r\nexport class RefreshTokenClient extends BaseClient {\r\n    constructor(\r\n        configuration: ClientConfiguration,\r\n        performanceClient?: IPerformanceClient\r\n    ) {\r\n        super(configuration, performanceClient);\r\n    }\r\n    public async acquireToken(\r\n        request: CommonRefreshTokenRequest\r\n    ): Promise<AuthenticationResult> {\r\n        this.performanceClient?.addQueueMeasurement(\r\n            PerformanceEvents.RefreshTokenClientAcquireToken,\r\n            request.correlationId\r\n        );\r\n\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response = await invokeAsync(\r\n            this.executeTokenRequest.bind(this),\r\n            PerformanceEvents.RefreshTokenClientExecuteTokenRequest,\r\n            this.logger,\r\n            this.performanceClient,\r\n            request.correlationId\r\n        )(request, this.authority);\r\n\r\n        // Retrieve requestId from response headers\r\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n        responseHandler.validateTokenResponse(response.body);\r\n\r\n        return invokeAsync(\r\n            responseHandler.handleServerTokenResponse.bind(responseHandler),\r\n            PerformanceEvents.HandleServerTokenResponse,\r\n            this.logger,\r\n            this.performanceClient,\r\n            request.correlationId\r\n        )(\r\n            response.body,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request,\r\n            undefined,\r\n            undefined,\r\n            true,\r\n            request.forceCache,\r\n            requestId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n     * @param request\r\n     */\r\n    public async acquireTokenByRefreshToken(\r\n        request: CommonSilentFlowRequest\r\n    ): Promise<AuthenticationResult> {\r\n        // Cannot renew token if no request object is given.\r\n        if (!request) {\r\n            throw createClientConfigurationError(\r\n                ClientConfigurationErrorCodes.tokenRequestEmpty\r\n            );\r\n        }\r\n\r\n        this.performanceClient?.addQueueMeasurement(\r\n            PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,\r\n            request.correlationId\r\n        );\r\n\r\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n        if (!request.account) {\r\n            throw createClientAuthError(\r\n                ClientAuthErrorCodes.noAccountInSilentRequest\r\n            );\r\n        }\r\n\r\n        // try checking if FOCI is enabled for the given application\r\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(\r\n            request.account.environment\r\n        );\r\n\r\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\r\n        if (isFOCI) {\r\n            try {\r\n                return await invokeAsync(\r\n                    this.acquireTokenWithCachedRefreshToken.bind(this),\r\n                    PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,\r\n                    this.logger,\r\n                    this.performanceClient,\r\n                    request.correlationId\r\n                )(request, true);\r\n            } catch (e) {\r\n                const noFamilyRTInCache =\r\n                    e instanceof InteractionRequiredAuthError &&\r\n                    e.errorCode ===\r\n                        InteractionRequiredAuthErrorCodes.noTokensFound;\r\n                const clientMismatchErrorWithFamilyRT =\r\n                    e instanceof ServerError &&\r\n                    e.errorCode === Errors.INVALID_GRANT_ERROR &&\r\n                    e.subError === Errors.CLIENT_MISMATCH_ERROR;\r\n\r\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\r\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\r\n                    return invokeAsync(\r\n                        this.acquireTokenWithCachedRefreshToken.bind(this),\r\n                        PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,\r\n                        this.logger,\r\n                        this.performanceClient,\r\n                        request.correlationId\r\n                    )(request, false);\r\n                    // throw in all other cases\r\n                } else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        // fall back to application refresh token acquisition\r\n        return invokeAsync(\r\n            this.acquireTokenWithCachedRefreshToken.bind(this),\r\n            PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,\r\n            this.logger,\r\n            this.performanceClient,\r\n            request.correlationId\r\n        )(request, false);\r\n    }\r\n\r\n    /**\r\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n     * @param request\r\n     */\r\n    private async acquireTokenWithCachedRefreshToken(\r\n        request: CommonSilentFlowRequest,\r\n        foci: boolean\r\n    ) {\r\n        this.performanceClient?.addQueueMeasurement(\r\n            PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,\r\n            request.correlationId\r\n        );\r\n\r\n        // fetches family RT or application RT based on FOCI value\r\n        const refreshToken = invoke(\r\n            this.cacheManager.getRefreshToken.bind(this.cacheManager),\r\n            PerformanceEvents.CacheManagerGetRefreshToken,\r\n            this.logger,\r\n            this.performanceClient,\r\n            request.correlationId\r\n        )(\r\n            request.account,\r\n            foci,\r\n            undefined,\r\n            this.performanceClient,\r\n            request.correlationId\r\n        );\r\n\r\n        if (!refreshToken) {\r\n            throw createInteractionRequiredAuthError(\r\n                InteractionRequiredAuthErrorCodes.noTokensFound\r\n            );\r\n        }\r\n\r\n        if (\r\n            refreshToken.expiresOn &&\r\n            TimeUtils.isTokenExpired(\r\n                refreshToken.expiresOn,\r\n                request.refreshTokenExpirationOffsetSeconds ||\r\n                    DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS\r\n            )\r\n        ) {\r\n            this.performanceClient?.addFields(\r\n                { rtExpiresOnMs: Number(refreshToken.expiresOn) },\r\n                request.correlationId\r\n            );\r\n            throw createInteractionRequiredAuthError(\r\n                InteractionRequiredAuthErrorCodes.refreshTokenExpired\r\n            );\r\n        }\r\n        // attach cached RT size to the current measurement\r\n\r\n        const refreshTokenRequest: CommonRefreshTokenRequest = {\r\n            ...request,\r\n            refreshToken: refreshToken.secret,\r\n            authenticationScheme:\r\n                request.authenticationScheme || AuthenticationScheme.BEARER,\r\n            ccsCredential: {\r\n                credential: request.account.homeAccountId,\r\n                type: CcsCredentialType.HOME_ACCOUNT_ID,\r\n            },\r\n        };\r\n\r\n        try {\r\n            return await invokeAsync(\r\n                this.acquireToken.bind(this),\r\n                PerformanceEvents.RefreshTokenClientAcquireToken,\r\n                this.logger,\r\n                this.performanceClient,\r\n                request.correlationId\r\n            )(refreshTokenRequest);\r\n        } catch (e) {\r\n            if (e instanceof InteractionRequiredAuthError) {\r\n                this.performanceClient?.addFields(\r\n                    { rtExpiresOnMs: Number(refreshToken.expiresOn) },\r\n                    request.correlationId\r\n                );\r\n\r\n                if (e.subError === InteractionRequiredAuthErrorCodes.badToken) {\r\n                    // Remove bad refresh token from cache\r\n                    this.logger.verbose(\r\n                        \"acquireTokenWithRefreshToken: bad refresh token, removing from cache\"\r\n                    );\r\n                    const badRefreshTokenKey =\r\n                        generateCredentialKey(refreshToken);\r\n                    this.cacheManager.removeRefreshToken(badRefreshTokenKey);\r\n                }\r\n            }\r\n\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Constructs the network message and makes a NW call to the underlying secure token service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    private async executeTokenRequest(\r\n        request: CommonRefreshTokenRequest,\r\n        authority: Authority\r\n    ): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\r\n        this.performanceClient?.addQueueMeasurement(\r\n            PerformanceEvents.RefreshTokenClientExecuteTokenRequest,\r\n            request.correlationId\r\n        );\r\n\r\n        const queryParametersString = this.createTokenQueryParameters(request);\r\n        const endpoint = UrlString.appendQueryString(\r\n            authority.tokenEndpoint,\r\n            queryParametersString\r\n        );\r\n\r\n        const requestBody = await invokeAsync(\r\n            this.createTokenRequestBody.bind(this),\r\n            PerformanceEvents.RefreshTokenClientCreateTokenRequestBody,\r\n            this.logger,\r\n            this.performanceClient,\r\n            request.correlationId\r\n        )(request);\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders(\r\n            request.ccsCredential\r\n        );\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId:\r\n                request.tokenBodyParameters?.clientId ||\r\n                this.config.authOptions.clientId,\r\n            authority: authority.canonicalAuthority,\r\n            scopes: request.scopes,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid,\r\n        };\r\n\r\n        return invokeAsync(\r\n            this.executePostToTokenEndpoint.bind(this),\r\n            PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint,\r\n            this.logger,\r\n            this.performanceClient,\r\n            request.correlationId\r\n        )(\r\n            endpoint,\r\n            requestBody,\r\n            headers,\r\n            thumbprint,\r\n            request.correlationId,\r\n            PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Helper function to create the token request body\r\n     * @param request\r\n     */\r\n    private async createTokenRequestBody(\r\n        request: CommonRefreshTokenRequest\r\n    ): Promise<string> {\r\n        this.performanceClient?.addQueueMeasurement(\r\n            PerformanceEvents.RefreshTokenClientCreateTokenRequestBody,\r\n            request.correlationId\r\n        );\r\n\r\n        const correlationId = request.correlationId;\r\n        const parameterBuilder = new RequestParameterBuilder(\r\n            correlationId,\r\n            this.performanceClient\r\n        );\r\n\r\n        parameterBuilder.addClientId(\r\n            request.embeddedClientId ||\r\n                request.tokenBodyParameters?.[AADServerParamKeys.CLIENT_ID] ||\r\n                this.config.authOptions.clientId\r\n        );\r\n\r\n        if (request.redirectUri) {\r\n            parameterBuilder.addRedirectUri(request.redirectUri);\r\n        }\r\n\r\n        parameterBuilder.addScopes(\r\n            request.scopes,\r\n            true,\r\n            this.config.authOptions.authority.options.OIDCOptions?.defaultScopes\r\n        );\r\n\r\n        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\r\n\r\n        parameterBuilder.addClientInfo();\r\n\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addApplicationTelemetry(\r\n            this.config.telemetry.application\r\n        );\r\n        parameterBuilder.addThrottling();\r\n\r\n        if (this.serverTelemetryManager && !isOidcProtocolMode(this.config)) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        parameterBuilder.addRefreshToken(request.refreshToken);\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(\r\n                this.config.clientCredentials.clientSecret\r\n            );\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion: ClientAssertion =\r\n                this.config.clientCredentials.clientAssertion;\r\n\r\n            parameterBuilder.addClientAssertion(\r\n                await getClientAssertion(\r\n                    clientAssertion.assertion,\r\n                    this.config.authOptions.clientId,\r\n                    request.resourceRequestUri\r\n                )\r\n            );\r\n            parameterBuilder.addClientAssertionType(\r\n                clientAssertion.assertionType\r\n            );\r\n        }\r\n\r\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\r\n            const popTokenGenerator = new PopTokenGenerator(\r\n                this.cryptoUtils,\r\n                this.performanceClient\r\n            );\r\n\r\n            let reqCnfData;\r\n            if (!request.popKid) {\r\n                const generatedReqCnfData = await invokeAsync(\r\n                    popTokenGenerator.generateCnf.bind(popTokenGenerator),\r\n                    PerformanceEvents.PopTokenGenerateCnf,\r\n                    this.logger,\r\n                    this.performanceClient,\r\n                    request.correlationId\r\n                )(request, this.logger);\r\n\r\n                reqCnfData = generatedReqCnfData.reqCnfString;\r\n            } else {\r\n                reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\r\n            }\r\n\r\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\r\n            parameterBuilder.addPopToken(reqCnfData);\r\n        } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\r\n            if (request.sshJwk) {\r\n                parameterBuilder.addSshJwk(request.sshJwk);\r\n            } else {\r\n                throw createClientConfigurationError(\r\n                    ClientConfigurationErrorCodes.missingSshJwk\r\n                );\r\n            }\r\n        }\r\n\r\n        if (\r\n            !StringUtils.isEmptyObj(request.claims) ||\r\n            (this.config.authOptions.clientCapabilities &&\r\n                this.config.authOptions.clientCapabilities.length > 0)\r\n        ) {\r\n            parameterBuilder.addClaims(\r\n                request.claims,\r\n                this.config.authOptions.clientCapabilities\r\n            );\r\n        }\r\n\r\n        if (\r\n            this.config.systemOptions.preventCorsPreflight &&\r\n            request.ccsCredential\r\n        ) {\r\n            switch (request.ccsCredential.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(\r\n                            request.ccsCredential.credential\r\n                        );\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    } catch (e) {\r\n                        this.logger.verbose(\r\n                            \"Could not parse home account ID for CCS Header: \" +\r\n                                e\r\n                        );\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    parameterBuilder.addCcsUpn(\r\n                        request.ccsCredential.credential\r\n                    );\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (request.embeddedClientId) {\r\n            parameterBuilder.addBrokerParameters({\r\n                brokerClientId: this.config.authOptions.clientId,\r\n                brokerRedirectUri: this.config.authOptions.redirectUri,\r\n            });\r\n        }\r\n\r\n        if (request.tokenBodyParameters) {\r\n            parameterBuilder.addExtraQueryParameters(\r\n                request.tokenBodyParameters\r\n            );\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}