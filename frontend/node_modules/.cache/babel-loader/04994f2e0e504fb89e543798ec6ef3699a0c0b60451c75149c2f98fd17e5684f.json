{"ast":null,"code":"/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { methodNotImplemented } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst DEFAULT_CRYPTO_IMPLEMENTATION = {\n  createNewGuid: () => {\n    throw createClientAuthError(methodNotImplemented);\n  },\n  base64Decode: () => {\n    throw createClientAuthError(methodNotImplemented);\n  },\n  base64Encode: () => {\n    throw createClientAuthError(methodNotImplemented);\n  },\n  base64UrlEncode: () => {\n    throw createClientAuthError(methodNotImplemented);\n  },\n  encodeKid: () => {\n    throw createClientAuthError(methodNotImplemented);\n  },\n  async getPublicKeyThumbprint() {\n    throw createClientAuthError(methodNotImplemented);\n  },\n  async removeTokenBindingKey() {\n    throw createClientAuthError(methodNotImplemented);\n  },\n  async clearKeystore() {\n    throw createClientAuthError(methodNotImplemented);\n  },\n  async signJwt() {\n    throw createClientAuthError(methodNotImplemented);\n  },\n  async hashString() {\n    throw createClientAuthError(methodNotImplemented);\n  }\n};\nexport { DEFAULT_CRYPTO_IMPLEMENTATION };","map":{"version":3,"names":["DEFAULT_CRYPTO_IMPLEMENTATION","createNewGuid","createClientAuthError","methodNotImplemented","base64Decode","base64Encode","base64UrlEncode","encodeKid","getPublicKeyThumbprint","removeTokenBindingKey","clearKeystore","signJwt","hashString"],"sources":["C:\\bytepantry\\frontend\\node_modules\\@azure\\msal-common\\src\\crypto\\ICrypto.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    ClientAuthErrorCodes,\r\n    createClientAuthError,\r\n} from \"../error/ClientAuthError.js\";\r\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest.js\";\r\nimport { ShrOptions, SignedHttpRequest } from \"./SignedHttpRequest.js\";\r\n\r\n/**\r\n * The PkceCodes type describes the structure\r\n * of objects that contain PKCE code\r\n * challenge and verifier pairs\r\n */\r\nexport type PkceCodes = {\r\n    verifier: string;\r\n    challenge: string;\r\n};\r\n\r\nexport type SignedHttpRequestParameters = Pick<\r\n    BaseAuthRequest,\r\n    | \"resourceRequestMethod\"\r\n    | \"resourceRequestUri\"\r\n    | \"shrClaims\"\r\n    | \"shrNonce\"\r\n    | \"shrOptions\"\r\n> & {\r\n    correlationId?: string;\r\n};\r\n\r\n/**\r\n * Interface for crypto functions used by library\r\n */\r\nexport interface ICrypto {\r\n    /**\r\n     * Creates a guid randomly.\r\n     */\r\n    createNewGuid(): string;\r\n    /**\r\n     * base64 Encode string\r\n     * @param input\r\n     */\r\n    base64Encode(input: string): string;\r\n    /**\r\n     * base64 decode string\r\n     * @param input\r\n     */\r\n    base64Decode(input: string): string;\r\n    /**\r\n     * base64 URL safe encoded string\r\n     */\r\n    base64UrlEncode(input: string): string;\r\n    /**\r\n     * Stringifies and base64Url encodes input public key\r\n     * @param inputKid\r\n     * @returns Base64Url encoded public key\r\n     */\r\n    encodeKid(inputKid: string): string;\r\n    /**\r\n     * Generates an JWK RSA S256 Thumbprint\r\n     * @param request\r\n     */\r\n    getPublicKeyThumbprint(\r\n        request: SignedHttpRequestParameters\r\n    ): Promise<string>;\r\n    /**\r\n     * Removes cryptographic keypair from key store matching the keyId passed in\r\n     * @param kid\r\n     */\r\n    removeTokenBindingKey(kid: string): Promise<boolean>;\r\n    /**\r\n     * Removes all cryptographic keys from IndexedDB storage\r\n     */\r\n    clearKeystore(): Promise<boolean>;\r\n    /**\r\n     * Returns a signed proof-of-possession token with a given acces token that contains a cnf claim with the required kid.\r\n     * @param accessToken\r\n     */\r\n    signJwt(\r\n        payload: SignedHttpRequest,\r\n        kid: string,\r\n        shrOptions?: ShrOptions,\r\n        correlationId?: string\r\n    ): Promise<string>;\r\n    /**\r\n     * Returns the SHA-256 hash of an input string\r\n     * @param plainText\r\n     */\r\n    hashString(plainText: string): Promise<string>;\r\n}\r\n\r\nexport const DEFAULT_CRYPTO_IMPLEMENTATION: ICrypto = {\r\n    createNewGuid: (): string => {\r\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\r\n    },\r\n    base64Decode: (): string => {\r\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\r\n    },\r\n    base64Encode: (): string => {\r\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\r\n    },\r\n    base64UrlEncode: (): string => {\r\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\r\n    },\r\n    encodeKid: (): string => {\r\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\r\n    },\r\n    async getPublicKeyThumbprint(): Promise<string> {\r\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\r\n    },\r\n    async removeTokenBindingKey(): Promise<boolean> {\r\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\r\n    },\r\n    async clearKeystore(): Promise<boolean> {\r\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\r\n    },\r\n    async signJwt(): Promise<string> {\r\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\r\n    },\r\n    async hashString(): Promise<string> {\r\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\r\n    },\r\n};\r\n"],"mappings":";;;;;;AAAA;;;AAGG;AA2FU,MAAAA,6BAA6B,GAAY;EAClDC,aAAa,EAAEA,CAAA,KAAa;IACxB,MAAMC,qBAAqB,CAACC,oBAAyC,CAAC;GACzE;EACDC,YAAY,EAAEA,CAAA,KAAa;IACvB,MAAMF,qBAAqB,CAACC,oBAAyC,CAAC;GACzE;EACDE,YAAY,EAAEA,CAAA,KAAa;IACvB,MAAMH,qBAAqB,CAACC,oBAAyC,CAAC;GACzE;EACDG,eAAe,EAAEA,CAAA,KAAa;IAC1B,MAAMJ,qBAAqB,CAACC,oBAAyC,CAAC;GACzE;EACDI,SAAS,EAAEA,CAAA,KAAa;IACpB,MAAML,qBAAqB,CAACC,oBAAyC,CAAC;GACzE;EACD,MAAMK,sBAAsBA,CAAA;IACxB,MAAMN,qBAAqB,CAACC,oBAAyC,CAAC;GACzE;EACD,MAAMM,qBAAqBA,CAAA;IACvB,MAAMP,qBAAqB,CAACC,oBAAyC,CAAC;GACzE;EACD,MAAMO,aAAaA,CAAA;IACf,MAAMR,qBAAqB,CAACC,oBAAyC,CAAC;GACzE;EACD,MAAMQ,OAAOA,CAAA;IACT,MAAMT,qBAAqB,CAACC,oBAAyC,CAAC;GACzE;EACD,MAAMS,UAAUA,CAAA;IACZ,MAAMV,qBAAqB,CAACC,oBAAyC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}