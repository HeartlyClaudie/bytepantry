{"ast":null,"code":"/*! @azure/msal-react v3.0.5 2025-02-18 */\n'use strict';\n\nimport React__default, { useEffect, useMemo, useReducer } from 'react';\nimport { WrapperSKU, InteractionStatus, EventMessageUtils } from '@azure/msal-browser';\nimport { MsalContext } from './MsalContext.js';\nimport { accountArraysAreEqual } from './utils/utilities.js';\nimport { version, name } from './packageMetadata.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst MsalProviderActionType = {\n  UNBLOCK_INPROGRESS: \"UNBLOCK_INPROGRESS\",\n  EVENT: \"EVENT\"\n};\n/**\r\n * Returns the next inProgress and accounts state based on event message\r\n * @param previousState\r\n * @param action\r\n */\nconst reducer = (previousState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n  let newInProgress = previousState.inProgress;\n  switch (type) {\n    case MsalProviderActionType.UNBLOCK_INPROGRESS:\n      if (previousState.inProgress === InteractionStatus.Startup) {\n        newInProgress = InteractionStatus.None;\n        payload.logger.info(\"MsalProvider - handleRedirectPromise resolved, setting inProgress to 'none'\");\n      }\n      break;\n    case MsalProviderActionType.EVENT:\n      const message = payload.message;\n      const status = EventMessageUtils.getInteractionStatusFromEvent(message, previousState.inProgress);\n      if (status) {\n        payload.logger.info(`MsalProvider - ${message.eventType} results in setting inProgress from ${previousState.inProgress} to ${status}`);\n        newInProgress = status;\n      }\n      break;\n    default:\n      throw new Error(`Unknown action type: ${type}`);\n  }\n  const currentAccounts = payload.instance.getAllAccounts();\n  if (newInProgress !== previousState.inProgress && !accountArraysAreEqual(currentAccounts, previousState.accounts)) {\n    // Both inProgress and accounts changed\n    return {\n      ...previousState,\n      inProgress: newInProgress,\n      accounts: currentAccounts\n    };\n  } else if (newInProgress !== previousState.inProgress) {\n    // Only only inProgress changed\n    return {\n      ...previousState,\n      inProgress: newInProgress\n    };\n  } else if (!accountArraysAreEqual(currentAccounts, previousState.accounts)) {\n    // Only accounts changed\n    return {\n      ...previousState,\n      accounts: currentAccounts\n    };\n  } else {\n    // Nothing changed\n    return previousState;\n  }\n};\n/**\r\n * MSAL context provider component. This must be rendered above any other components that use MSAL.\r\n */\nfunction MsalProvider(_ref) {\n  let {\n    instance,\n    children\n  } = _ref;\n  useEffect(() => {\n    instance.initializeWrapperLibrary(WrapperSKU.React, version);\n  }, [instance]);\n  // Create a logger instance for msal-react with the same options as PublicClientApplication\n  const logger = useMemo(() => {\n    return instance.getLogger().clone(name, version);\n  }, [instance]);\n  const [state, updateState] = useReducer(reducer, undefined, () => {\n    // Lazy initialization of the initial state\n    return {\n      inProgress: InteractionStatus.Startup,\n      accounts: instance.getAllAccounts()\n    };\n  });\n  useEffect(() => {\n    const callbackId = instance.addEventCallback(message => {\n      updateState({\n        payload: {\n          instance,\n          logger,\n          message\n        },\n        type: MsalProviderActionType.EVENT\n      });\n    });\n    logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);\n    instance.initialize().then(() => {\n      instance.handleRedirectPromise().catch(() => {\n        // Errors should be handled by listening to the LOGIN_FAILURE event\n        return;\n      }).finally(() => {\n        /*\r\n         * If handleRedirectPromise returns a cached promise the necessary events may not be fired\r\n         * This is a fallback to prevent inProgress from getting stuck in 'startup'\r\n         */\n        updateState({\n          payload: {\n            instance,\n            logger\n          },\n          type: MsalProviderActionType.UNBLOCK_INPROGRESS\n        });\n      });\n    }).catch(() => {\n      // Errors should be handled by listening to the LOGIN_FAILURE event\n      return;\n    });\n    return () => {\n      // Remove callback when component unmounts or accounts change\n      if (callbackId) {\n        logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, [instance, logger]);\n  const contextValue = {\n    instance,\n    inProgress: state.inProgress,\n    accounts: state.accounts,\n    logger\n  };\n  return React__default.createElement(MsalContext.Provider, {\n    value: contextValue\n  }, children);\n}\nexport { MsalProvider };","map":{"version":3,"names":["MsalProviderActionType","UNBLOCK_INPROGRESS","EVENT","reducer","previousState","action","type","payload","newInProgress","inProgress","InteractionStatus","Startup","None","logger","info","message","status","EventMessageUtils","getInteractionStatusFromEvent","eventType","Error","currentAccounts","instance","getAllAccounts","accountArraysAreEqual","accounts","MsalProvider","_ref","children","useEffect","initializeWrapperLibrary","WrapperSKU","React","version","useMemo","getLogger","clone","name","state","updateState","useReducer","undefined","callbackId","addEventCallback","verbose","initialize","then","handleRedirectPromise","catch","finally","removeEventCallback","contextValue","React__default","createElement","MsalContext","Provider","value"],"sources":["C:\\bytepantry\\frontend\\node_modules\\@azure\\msal-react\\src\\MsalProvider.tsx"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport React, {\r\n    useEffect,\r\n    useReducer,\r\n    PropsWithChildren,\r\n    useMemo,\r\n} from \"react\";\r\nimport {\r\n    IPublicClientApplication,\r\n    EventMessage,\r\n    EventMessageUtils,\r\n    InteractionStatus,\r\n    Logger,\r\n    WrapperSKU,\r\n    AccountInfo,\r\n} from \"@azure/msal-browser\";\r\nimport { MsalContext, IMsalContext } from \"./MsalContext.js\";\r\nimport { accountArraysAreEqual } from \"./utils/utilities.js\";\r\nimport { name as SKU, version } from \"./packageMetadata.js\";\r\n\r\nexport type MsalProviderProps = PropsWithChildren<{\r\n    instance: IPublicClientApplication;\r\n}>;\r\n\r\ntype MsalState = {\r\n    inProgress: InteractionStatus;\r\n    accounts: AccountInfo[];\r\n};\r\n\r\nconst MsalProviderActionType = {\r\n    UNBLOCK_INPROGRESS: \"UNBLOCK_INPROGRESS\",\r\n    EVENT: \"EVENT\",\r\n} as const;\r\ntype MsalProviderActionType =\r\n    (typeof MsalProviderActionType)[keyof typeof MsalProviderActionType];\r\n\r\ntype MsalProviderReducerAction = {\r\n    type: MsalProviderActionType;\r\n    payload: {\r\n        logger: Logger;\r\n        instance: IPublicClientApplication;\r\n        message?: EventMessage;\r\n    };\r\n};\r\n\r\n/**\r\n * Returns the next inProgress and accounts state based on event message\r\n * @param previousState\r\n * @param action\r\n */\r\nconst reducer = (\r\n    previousState: MsalState,\r\n    action: MsalProviderReducerAction\r\n): MsalState => {\r\n    const { type, payload } = action;\r\n    let newInProgress = previousState.inProgress;\r\n\r\n    switch (type) {\r\n        case MsalProviderActionType.UNBLOCK_INPROGRESS:\r\n            if (previousState.inProgress === InteractionStatus.Startup) {\r\n                newInProgress = InteractionStatus.None;\r\n                payload.logger.info(\r\n                    \"MsalProvider - handleRedirectPromise resolved, setting inProgress to 'none'\"\r\n                );\r\n            }\r\n            break;\r\n        case MsalProviderActionType.EVENT:\r\n            const message = payload.message as EventMessage;\r\n            const status = EventMessageUtils.getInteractionStatusFromEvent(\r\n                message,\r\n                previousState.inProgress\r\n            );\r\n            if (status) {\r\n                payload.logger.info(\r\n                    `MsalProvider - ${message.eventType} results in setting inProgress from ${previousState.inProgress} to ${status}`\r\n                );\r\n                newInProgress = status;\r\n            }\r\n            break;\r\n        default:\r\n            throw new Error(`Unknown action type: ${type}`);\r\n    }\r\n\r\n    const currentAccounts = payload.instance.getAllAccounts();\r\n    if (\r\n        newInProgress !== previousState.inProgress &&\r\n        !accountArraysAreEqual(currentAccounts, previousState.accounts)\r\n    ) {\r\n        // Both inProgress and accounts changed\r\n        return {\r\n            ...previousState,\r\n            inProgress: newInProgress,\r\n            accounts: currentAccounts,\r\n        };\r\n    } else if (newInProgress !== previousState.inProgress) {\r\n        // Only only inProgress changed\r\n        return {\r\n            ...previousState,\r\n            inProgress: newInProgress,\r\n        };\r\n    } else if (\r\n        !accountArraysAreEqual(currentAccounts, previousState.accounts)\r\n    ) {\r\n        // Only accounts changed\r\n        return {\r\n            ...previousState,\r\n            accounts: currentAccounts,\r\n        };\r\n    } else {\r\n        // Nothing changed\r\n        return previousState;\r\n    }\r\n};\r\n\r\n/**\r\n * MSAL context provider component. This must be rendered above any other components that use MSAL.\r\n */\r\nexport function MsalProvider({\r\n    instance,\r\n    children,\r\n}: MsalProviderProps): React.ReactElement {\r\n    useEffect(() => {\r\n        instance.initializeWrapperLibrary(WrapperSKU.React, version);\r\n    }, [instance]);\r\n    // Create a logger instance for msal-react with the same options as PublicClientApplication\r\n    const logger = useMemo(() => {\r\n        return instance.getLogger().clone(SKU, version);\r\n    }, [instance]);\r\n\r\n    const [state, updateState] = useReducer(reducer, undefined, () => {\r\n        // Lazy initialization of the initial state\r\n        return {\r\n            inProgress: InteractionStatus.Startup,\r\n            accounts: instance.getAllAccounts(),\r\n        };\r\n    });\r\n\r\n    useEffect(() => {\r\n        const callbackId = instance.addEventCallback(\r\n            (message: EventMessage) => {\r\n                updateState({\r\n                    payload: {\r\n                        instance,\r\n                        logger,\r\n                        message,\r\n                    },\r\n                    type: MsalProviderActionType.EVENT,\r\n                });\r\n            }\r\n        );\r\n        logger.verbose(\r\n            `MsalProvider - Registered event callback with id: ${callbackId}`\r\n        );\r\n\r\n        instance\r\n            .initialize()\r\n            .then(() => {\r\n                instance\r\n                    .handleRedirectPromise()\r\n                    .catch(() => {\r\n                        // Errors should be handled by listening to the LOGIN_FAILURE event\r\n                        return;\r\n                    })\r\n                    .finally(() => {\r\n                        /*\r\n                         * If handleRedirectPromise returns a cached promise the necessary events may not be fired\r\n                         * This is a fallback to prevent inProgress from getting stuck in 'startup'\r\n                         */\r\n                        updateState({\r\n                            payload: {\r\n                                instance,\r\n                                logger,\r\n                            },\r\n                            type: MsalProviderActionType.UNBLOCK_INPROGRESS,\r\n                        });\r\n                    });\r\n            })\r\n            .catch(() => {\r\n                // Errors should be handled by listening to the LOGIN_FAILURE event\r\n                return;\r\n            });\r\n\r\n        return () => {\r\n            // Remove callback when component unmounts or accounts change\r\n            if (callbackId) {\r\n                logger.verbose(\r\n                    `MsalProvider - Removing event callback ${callbackId}`\r\n                );\r\n                instance.removeEventCallback(callbackId);\r\n            }\r\n        };\r\n    }, [instance, logger]);\r\n\r\n    const contextValue: IMsalContext = {\r\n        instance,\r\n        inProgress: state.inProgress,\r\n        accounts: state.accounts,\r\n        logger,\r\n    };\r\n\r\n    return (\r\n        <MsalContext.Provider value={contextValue}>\r\n            {children}\r\n        </MsalContext.Provider>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}