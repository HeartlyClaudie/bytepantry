{"ast":null,"code":"/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { PerformanceEvents, PromptValue, invokeAsync, AuthError, invoke, ProtocolUtils } from '@azure/msal-common/browser';\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { InteractionType, BrowserConstants } from '../utils/BrowserConstants.mjs';\nimport { initiateAuthRequest, monitorIframeForHash } from '../interaction_handler/SilentHandler.mjs';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.mjs';\nimport { NativeInteractionClient } from './NativeInteractionClient.mjs';\nimport { InteractionHandler } from '../interaction_handler/InteractionHandler.mjs';\nimport { preconnect } from '../utils/BrowserUtils.mjs';\nimport { deserializeResponse } from '../response/ResponseHandler.mjs';\nimport { silentLogoutUnsupported, nativeConnectionNotEstablished } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass SilentIframeClient extends StandardInteractionClient {\n  constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n    this.apiId = apiId;\n    this.nativeStorage = nativeStorageImpl;\n  }\n  /**\r\n   * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\r\n   * @param request\r\n   */\n  async acquireToken(request) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\n    // Check that we have some SSO data\n    if (!request.loginHint && !request.sid && (!request.account || !request.account.username)) {\n      this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\n    }\n    // Check the prompt value\n    const inputRequest = {\n      ...request\n    };\n    if (inputRequest.prompt) {\n      if (inputRequest.prompt !== PromptValue.NONE && inputRequest.prompt !== PromptValue.NO_SESSION) {\n        this.logger.warning(`SilentIframeClient. Replacing invalid prompt ${inputRequest.prompt} with ${PromptValue.NONE}`);\n        inputRequest.prompt = PromptValue.NONE;\n      }\n    } else {\n      inputRequest.prompt = PromptValue.NONE;\n    }\n    // Create silent request\n    const silentRequest = await invokeAsync(this.initializeAuthorizationRequest.bind(this), PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, request.correlationId)(inputRequest, InteractionType.Silent);\n    preconnect(silentRequest.authority);\n    const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n    let authClient;\n    try {\n      // Initialize the client\n      authClient = await invokeAsync(this.createAuthCodeClient.bind(this), PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, request.correlationId)({\n        serverTelemetryManager,\n        requestAuthority: silentRequest.authority,\n        requestAzureCloudOptions: silentRequest.azureCloudOptions,\n        requestExtraQueryParameters: silentRequest.extraQueryParameters,\n        account: silentRequest.account\n      });\n      return await invokeAsync(this.silentTokenHelper.bind(this), PerformanceEvents.SilentIframeClientTokenHelper, this.logger, this.performanceClient, request.correlationId)(authClient, silentRequest);\n    } catch (e) {\n      if (e instanceof AuthError) {\n        e.setCorrelationId(this.correlationId);\n        serverTelemetryManager.cacheFailedRequest(e);\n      }\n      if (!authClient || !(e instanceof AuthError) || e.errorCode !== BrowserConstants.INVALID_GRANT_ERROR) {\n        throw e;\n      }\n      this.performanceClient.addFields({\n        retryError: e.errorCode\n      }, this.correlationId);\n      const retrySilentRequest = await invokeAsync(this.initializeAuthorizationRequest.bind(this), PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, request.correlationId)(inputRequest, InteractionType.Silent);\n      return await invokeAsync(this.silentTokenHelper.bind(this), PerformanceEvents.SilentIframeClientTokenHelper, this.logger, this.performanceClient, this.correlationId)(authClient, retrySilentRequest);\n    }\n  }\n  /**\r\n   * Currently Unsupported\r\n   */\n  logout() {\n    // Synchronous so we must reject\n    return Promise.reject(createBrowserAuthError(silentLogoutUnsupported));\n  }\n  /**\r\n   * Helper which acquires an authorization code silently using a hidden iframe from given url\r\n   * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\r\n   * @param navigateUrl\r\n   * @param userRequestScopes\r\n   */\n  async silentTokenHelper(authClient, silentRequest) {\n    const correlationId = silentRequest.correlationId;\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientTokenHelper, correlationId);\n    // Create auth code request and generate PKCE params\n    const authCodeRequest = await invokeAsync(this.initializeAuthorizationCodeRequest.bind(this), PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, this.logger, this.performanceClient, correlationId)(silentRequest);\n    // Create authorize request url\n    const navigateUrl = await invokeAsync(authClient.getAuthCodeUrl.bind(authClient), PerformanceEvents.GetAuthCodeUrl, this.logger, this.performanceClient, correlationId)({\n      ...silentRequest,\n      platformBroker: NativeMessageHandler.isPlatformBrokerAvailable(this.config, this.logger, this.nativeMessageHandler, silentRequest.authenticationScheme)\n    });\n    // Create silent handler\n    const interactionHandler = new InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\n    // Get the frame handle for the silent request\n    const msalFrame = await invokeAsync(initiateAuthRequest, PerformanceEvents.SilentHandlerInitiateAuthRequest, this.logger, this.performanceClient, correlationId)(navigateUrl, this.performanceClient, this.logger, correlationId, this.config.system.navigateFrameWait);\n    const responseType = this.config.auth.OIDCOptions.serverResponseType;\n    // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n    const responseString = await invokeAsync(monitorIframeForHash, PerformanceEvents.SilentHandlerMonitorIframeForHash, this.logger, this.performanceClient, correlationId)(msalFrame, this.config.system.iframeHashTimeout, this.config.system.pollIntervalMilliseconds, this.performanceClient, this.logger, correlationId, responseType);\n    const serverParams = invoke(deserializeResponse, PerformanceEvents.DeserializeResponse, this.logger, this.performanceClient, this.correlationId)(responseString, responseType, this.logger);\n    if (serverParams.accountId) {\n      this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n      if (!this.nativeMessageHandler) {\n        throw createBrowserAuthError(nativeConnectionNotEstablished);\n      }\n      const nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.apiId, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, correlationId);\n      const {\n        userRequestState\n      } = ProtocolUtils.parseRequestState(this.browserCrypto, silentRequest.state);\n      return invokeAsync(nativeInteractionClient.acquireToken.bind(nativeInteractionClient), PerformanceEvents.NativeInteractionClientAcquireToken, this.logger, this.performanceClient, correlationId)({\n        ...silentRequest,\n        state: userRequestState,\n        prompt: silentRequest.prompt || PromptValue.NONE\n      });\n    }\n    // Handle response from hash string\n    return invokeAsync(interactionHandler.handleCodeResponse.bind(interactionHandler), PerformanceEvents.HandleCodeResponse, this.logger, this.performanceClient, correlationId)(serverParams, silentRequest);\n  }\n}\nexport { SilentIframeClient };","map":{"version":3,"names":["SilentIframeClient","StandardInteractionClient","constructor","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","apiId","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","nativeStorage","acquireToken","request","addQueueMeasurement","PerformanceEvents","SilentIframeClientAcquireToken","loginHint","sid","account","username","warning","inputRequest","prompt","PromptValue","NONE","NO_SESSION","silentRequest","invokeAsync","initializeAuthorizationRequest","bind","StandardInteractionClientInitializeAuthorizationRequest","InteractionType","Silent","preconnect","authority","serverTelemetryManager","initializeServerTelemetryManager","authClient","createAuthCodeClient","StandardInteractionClientCreateAuthCodeClient","requestAuthority","requestAzureCloudOptions","azureCloudOptions","requestExtraQueryParameters","extraQueryParameters","silentTokenHelper","SilentIframeClientTokenHelper","e","AuthError","setCorrelationId","cacheFailedRequest","errorCode","BrowserConstants","INVALID_GRANT_ERROR","addFields","retryError","retrySilentRequest","logout","Promise","reject","createBrowserAuthError","silentLogoutUnsupported","authCodeRequest","initializeAuthorizationCodeRequest","StandardInteractionClientInitializeAuthorizationCodeRequest","navigateUrl","getAuthCodeUrl","GetAuthCodeUrl","platformBroker","NativeMessageHandler","isPlatformBrokerAvailable","authenticationScheme","interactionHandler","InteractionHandler","browserStorage","msalFrame","initiateAuthRequest","SilentHandlerInitiateAuthRequest","system","navigateFrameWait","responseType","auth","OIDCOptions","serverResponseType","responseString","monitorIframeForHash","SilentHandlerMonitorIframeForHash","iframeHashTimeout","pollIntervalMilliseconds","serverParams","invoke","deserializeResponse","DeserializeResponse","accountId","verbose","nativeConnectionNotEstablished","nativeInteractionClient","NativeInteractionClient","userRequestState","ProtocolUtils","parseRequestState","state","NativeInteractionClientAcquireToken","handleCodeResponse","HandleCodeResponse"],"sources":["C:\\bytepantry\\frontend\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\SilentIframeClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    ICrypto,\r\n    Logger,\r\n    PromptValue,\r\n    CommonAuthorizationCodeRequest,\r\n    AuthorizationCodeClient,\r\n    AuthError,\r\n    ProtocolUtils,\r\n    IPerformanceClient,\r\n    PerformanceEvents,\r\n    invokeAsync,\r\n    invoke,\r\n} from \"@azure/msal-common/browser\";\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient.js\";\r\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest.js\";\r\nimport { BrowserConfiguration } from \"../config/Configuration.js\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager.js\";\r\nimport { EventHandler } from \"../event/EventHandler.js\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient.js\";\r\nimport {\r\n    createBrowserAuthError,\r\n    BrowserAuthErrorCodes,\r\n} from \"../error/BrowserAuthError.js\";\r\nimport {\r\n    InteractionType,\r\n    ApiId,\r\n    BrowserConstants,\r\n} from \"../utils/BrowserConstants.js\";\r\nimport {\r\n    initiateAuthRequest,\r\n    monitorIframeForHash,\r\n} from \"../interaction_handler/SilentHandler.js\";\r\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest.js\";\r\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler.js\";\r\nimport { NativeInteractionClient } from \"./NativeInteractionClient.js\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult.js\";\r\nimport { InteractionHandler } from \"../interaction_handler/InteractionHandler.js\";\r\nimport * as BrowserUtils from \"../utils/BrowserUtils.js\";\r\nimport * as ResponseHandler from \"../response/ResponseHandler.js\";\r\n\r\nexport class SilentIframeClient extends StandardInteractionClient {\r\n    protected apiId: ApiId;\r\n    protected nativeStorage: BrowserCacheManager;\r\n\r\n    constructor(\r\n        config: BrowserConfiguration,\r\n        storageImpl: BrowserCacheManager,\r\n        browserCrypto: ICrypto,\r\n        logger: Logger,\r\n        eventHandler: EventHandler,\r\n        navigationClient: INavigationClient,\r\n        apiId: ApiId,\r\n        performanceClient: IPerformanceClient,\r\n        nativeStorageImpl: BrowserCacheManager,\r\n        nativeMessageHandler?: NativeMessageHandler,\r\n        correlationId?: string\r\n    ) {\r\n        super(\r\n            config,\r\n            storageImpl,\r\n            browserCrypto,\r\n            logger,\r\n            eventHandler,\r\n            navigationClient,\r\n            performanceClient,\r\n            nativeMessageHandler,\r\n            correlationId\r\n        );\r\n        this.apiId = apiId;\r\n        this.nativeStorage = nativeStorageImpl;\r\n    }\r\n\r\n    /**\r\n     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\r\n     * @param request\r\n     */\r\n    async acquireToken(\r\n        request: SsoSilentRequest\r\n    ): Promise<AuthenticationResult> {\r\n        this.performanceClient.addQueueMeasurement(\r\n            PerformanceEvents.SilentIframeClientAcquireToken,\r\n            request.correlationId\r\n        );\r\n        // Check that we have some SSO data\r\n        if (\r\n            !request.loginHint &&\r\n            !request.sid &&\r\n            (!request.account || !request.account.username)\r\n        ) {\r\n            this.logger.warning(\r\n                \"No user hint provided. The authorization server may need more information to complete this request.\"\r\n            );\r\n        }\r\n\r\n        // Check the prompt value\r\n        const inputRequest = { ...request };\r\n        if (inputRequest.prompt) {\r\n            if (\r\n                inputRequest.prompt !== PromptValue.NONE &&\r\n                inputRequest.prompt !== PromptValue.NO_SESSION\r\n            ) {\r\n                this.logger.warning(\r\n                    `SilentIframeClient. Replacing invalid prompt ${inputRequest.prompt} with ${PromptValue.NONE}`\r\n                );\r\n                inputRequest.prompt = PromptValue.NONE;\r\n            }\r\n        } else {\r\n            inputRequest.prompt = PromptValue.NONE;\r\n        }\r\n\r\n        // Create silent request\r\n        const silentRequest: AuthorizationUrlRequest = await invokeAsync(\r\n            this.initializeAuthorizationRequest.bind(this),\r\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\r\n            this.logger,\r\n            this.performanceClient,\r\n            request.correlationId\r\n        )(inputRequest, InteractionType.Silent);\r\n        BrowserUtils.preconnect(silentRequest.authority);\r\n\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\r\n            this.apiId\r\n        );\r\n\r\n        let authClient: AuthorizationCodeClient | undefined;\r\n\r\n        try {\r\n            // Initialize the client\r\n            authClient = await invokeAsync(\r\n                this.createAuthCodeClient.bind(this),\r\n                PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\r\n                this.logger,\r\n                this.performanceClient,\r\n                request.correlationId\r\n            )({\r\n                serverTelemetryManager,\r\n                requestAuthority: silentRequest.authority,\r\n                requestAzureCloudOptions: silentRequest.azureCloudOptions,\r\n                requestExtraQueryParameters: silentRequest.extraQueryParameters,\r\n                account: silentRequest.account,\r\n            });\r\n\r\n            return await invokeAsync(\r\n                this.silentTokenHelper.bind(this),\r\n                PerformanceEvents.SilentIframeClientTokenHelper,\r\n                this.logger,\r\n                this.performanceClient,\r\n                request.correlationId\r\n            )(authClient, silentRequest);\r\n        } catch (e) {\r\n            if (e instanceof AuthError) {\r\n                (e as AuthError).setCorrelationId(this.correlationId);\r\n                serverTelemetryManager.cacheFailedRequest(e);\r\n            }\r\n\r\n            if (\r\n                !authClient ||\r\n                !(e instanceof AuthError) ||\r\n                e.errorCode !== BrowserConstants.INVALID_GRANT_ERROR\r\n            ) {\r\n                throw e;\r\n            }\r\n\r\n            this.performanceClient.addFields(\r\n                {\r\n                    retryError: e.errorCode,\r\n                },\r\n                this.correlationId\r\n            );\r\n\r\n            const retrySilentRequest: AuthorizationUrlRequest =\r\n                await invokeAsync(\r\n                    this.initializeAuthorizationRequest.bind(this),\r\n                    PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\r\n                    this.logger,\r\n                    this.performanceClient,\r\n                    request.correlationId\r\n                )(inputRequest, InteractionType.Silent);\r\n\r\n            return await invokeAsync(\r\n                this.silentTokenHelper.bind(this),\r\n                PerformanceEvents.SilentIframeClientTokenHelper,\r\n                this.logger,\r\n                this.performanceClient,\r\n                this.correlationId\r\n            )(authClient, retrySilentRequest);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Currently Unsupported\r\n     */\r\n    logout(): Promise<void> {\r\n        // Synchronous so we must reject\r\n        return Promise.reject(\r\n            createBrowserAuthError(\r\n                BrowserAuthErrorCodes.silentLogoutUnsupported\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Helper which acquires an authorization code silently using a hidden iframe from given url\r\n     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\r\n     * @param navigateUrl\r\n     * @param userRequestScopes\r\n     */\r\n    protected async silentTokenHelper(\r\n        authClient: AuthorizationCodeClient,\r\n        silentRequest: AuthorizationUrlRequest\r\n    ): Promise<AuthenticationResult> {\r\n        const correlationId = silentRequest.correlationId;\r\n        this.performanceClient.addQueueMeasurement(\r\n            PerformanceEvents.SilentIframeClientTokenHelper,\r\n            correlationId\r\n        );\r\n\r\n        // Create auth code request and generate PKCE params\r\n        const authCodeRequest: CommonAuthorizationCodeRequest =\r\n            await invokeAsync(\r\n                this.initializeAuthorizationCodeRequest.bind(this),\r\n                PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,\r\n                this.logger,\r\n                this.performanceClient,\r\n                correlationId\r\n            )(silentRequest);\r\n\r\n        // Create authorize request url\r\n        const navigateUrl = await invokeAsync(\r\n            authClient.getAuthCodeUrl.bind(authClient),\r\n            PerformanceEvents.GetAuthCodeUrl,\r\n            this.logger,\r\n            this.performanceClient,\r\n            correlationId\r\n        )({\r\n            ...silentRequest,\r\n            platformBroker: NativeMessageHandler.isPlatformBrokerAvailable(\r\n                this.config,\r\n                this.logger,\r\n                this.nativeMessageHandler,\r\n                silentRequest.authenticationScheme\r\n            ),\r\n        });\r\n\r\n        // Create silent handler\r\n        const interactionHandler = new InteractionHandler(\r\n            authClient,\r\n            this.browserStorage,\r\n            authCodeRequest,\r\n            this.logger,\r\n            this.performanceClient\r\n        );\r\n        // Get the frame handle for the silent request\r\n        const msalFrame = await invokeAsync(\r\n            initiateAuthRequest,\r\n            PerformanceEvents.SilentHandlerInitiateAuthRequest,\r\n            this.logger,\r\n            this.performanceClient,\r\n            correlationId\r\n        )(\r\n            navigateUrl,\r\n            this.performanceClient,\r\n            this.logger,\r\n            correlationId,\r\n            this.config.system.navigateFrameWait\r\n        );\r\n        const responseType = this.config.auth.OIDCOptions.serverResponseType;\r\n        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\r\n        const responseString = await invokeAsync(\r\n            monitorIframeForHash,\r\n            PerformanceEvents.SilentHandlerMonitorIframeForHash,\r\n            this.logger,\r\n            this.performanceClient,\r\n            correlationId\r\n        )(\r\n            msalFrame,\r\n            this.config.system.iframeHashTimeout,\r\n            this.config.system.pollIntervalMilliseconds,\r\n            this.performanceClient,\r\n            this.logger,\r\n            correlationId,\r\n            responseType\r\n        );\r\n        const serverParams = invoke(\r\n            ResponseHandler.deserializeResponse,\r\n            PerformanceEvents.DeserializeResponse,\r\n            this.logger,\r\n            this.performanceClient,\r\n            this.correlationId\r\n        )(responseString, responseType, this.logger);\r\n\r\n        if (serverParams.accountId) {\r\n            this.logger.verbose(\r\n                \"Account id found in hash, calling WAM for token\"\r\n            );\r\n            if (!this.nativeMessageHandler) {\r\n                throw createBrowserAuthError(\r\n                    BrowserAuthErrorCodes.nativeConnectionNotEstablished\r\n                );\r\n            }\r\n            const nativeInteractionClient = new NativeInteractionClient(\r\n                this.config,\r\n                this.browserStorage,\r\n                this.browserCrypto,\r\n                this.logger,\r\n                this.eventHandler,\r\n                this.navigationClient,\r\n                this.apiId,\r\n                this.performanceClient,\r\n                this.nativeMessageHandler,\r\n                serverParams.accountId,\r\n                this.browserStorage,\r\n                correlationId\r\n            );\r\n            const { userRequestState } = ProtocolUtils.parseRequestState(\r\n                this.browserCrypto,\r\n                silentRequest.state\r\n            );\r\n            return invokeAsync(\r\n                nativeInteractionClient.acquireToken.bind(\r\n                    nativeInteractionClient\r\n                ),\r\n                PerformanceEvents.NativeInteractionClientAcquireToken,\r\n                this.logger,\r\n                this.performanceClient,\r\n                correlationId\r\n            )({\r\n                ...silentRequest,\r\n                state: userRequestState,\r\n                prompt: silentRequest.prompt || PromptValue.NONE,\r\n            });\r\n        }\r\n\r\n        // Handle response from hash string\r\n        return invokeAsync(\r\n            interactionHandler.handleCodeResponse.bind(interactionHandler),\r\n            PerformanceEvents.HandleCodeResponse,\r\n            this.logger,\r\n            this.performanceClient,\r\n            correlationId\r\n        )(serverParams, silentRequest);\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}