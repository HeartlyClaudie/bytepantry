{"ast":null,"code":"/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\nconst PerformanceEvents = {\n  /**\r\n   * acquireTokenByCode API (msal-browser and msal-node).\r\n   * Used to acquire tokens by trading an authorization code against the token endpoint.\r\n   */\n  AcquireTokenByCode: \"acquireTokenByCode\",\n  /**\r\n   * acquireTokenByRefreshToken API (msal-browser and msal-node).\r\n   * Used to renew an access token using a refresh token against the token endpoint.\r\n   */\n  AcquireTokenByRefreshToken: \"acquireTokenByRefreshToken\",\n  /**\r\n   * acquireTokenSilent API (msal-browser and msal-node).\r\n   * Used to silently acquire a new access token (from the cache or the network).\r\n   */\n  AcquireTokenSilent: \"acquireTokenSilent\",\n  /**\r\n   * acquireTokenSilentAsync (msal-browser).\r\n   * Internal API for acquireTokenSilent.\r\n   */\n  AcquireTokenSilentAsync: \"acquireTokenSilentAsync\",\n  /**\r\n   * acquireTokenPopup (msal-browser).\r\n   * Used to acquire a new access token interactively through pop ups\r\n   */\n  AcquireTokenPopup: \"acquireTokenPopup\",\n  /**\r\n   * acquireTokenPreRedirect (msal-browser).\r\n   * First part of the redirect flow.\r\n   * Used to acquire a new access token interactively through redirects.\r\n   */\n  AcquireTokenPreRedirect: \"acquireTokenPreRedirect\",\n  /**\r\n   * acquireTokenRedirect (msal-browser).\r\n   * Second part of the redirect flow.\r\n   * Used to acquire a new access token interactively through redirects.\r\n   */\n  AcquireTokenRedirect: \"acquireTokenRedirect\",\n  /**\r\n   * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\r\n   * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\r\n   */\n  CryptoOptsGetPublicKeyThumbprint: \"cryptoOptsGetPublicKeyThumbprint\",\n  /**\r\n   * signJwt API in CryptoOpts class (msal-browser).\r\n   * Used to signed a pop token.\r\n   */\n  CryptoOptsSignJwt: \"cryptoOptsSignJwt\",\n  /**\r\n   * acquireToken API in the SilentCacheClient class (msal-browser).\r\n   * Used to read access tokens from the cache.\r\n   */\n  SilentCacheClientAcquireToken: \"silentCacheClientAcquireToken\",\n  /**\r\n   * acquireToken API in the SilentIframeClient class (msal-browser).\r\n   * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\r\n   */\n  SilentIframeClientAcquireToken: \"silentIframeClientAcquireToken\",\n  AwaitConcurrentIframe: \"awaitConcurrentIframe\",\n  /**\r\n   * acquireToken API in SilentRereshClient (msal-browser).\r\n   * Used to acquire a new set of tokens from the token endpoint using a refresh token.\r\n   */\n  SilentRefreshClientAcquireToken: \"silentRefreshClientAcquireToken\",\n  /**\r\n   * ssoSilent API (msal-browser).\r\n   * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\r\n   */\n  SsoSilent: \"ssoSilent\",\n  /**\r\n   * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\r\n   * Used to load authority metadata for a request.\r\n   */\n  StandardInteractionClientGetDiscoveredAuthority: \"standardInteractionClientGetDiscoveredAuthority\",\n  /**\r\n   * acquireToken APIs in msal-browser.\r\n   * Used to make an /authorize endpoint call with native brokering enabled.\r\n   */\n  FetchAccountIdWithNativeBroker: \"fetchAccountIdWithNativeBroker\",\n  /**\r\n   * acquireToken API in NativeInteractionClient class (msal-browser).\r\n   * Used to acquire a token from Native component when native brokering is enabled.\r\n   */\n  NativeInteractionClientAcquireToken: \"nativeInteractionClientAcquireToken\",\n  /**\r\n   * Time spent creating default headers for requests to token endpoint\r\n   */\n  BaseClientCreateTokenRequestHeaders: \"baseClientCreateTokenRequestHeaders\",\n  /**\r\n   * Time spent sending/waiting for the response of a request to the token endpoint\r\n   */\n  NetworkClientSendPostRequestAsync: \"networkClientSendPostRequestAsync\",\n  RefreshTokenClientExecutePostToTokenEndpoint: \"refreshTokenClientExecutePostToTokenEndpoint\",\n  AuthorizationCodeClientExecutePostToTokenEndpoint: \"authorizationCodeClientExecutePostToTokenEndpoint\",\n  /**\r\n   * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\r\n   */\n  BrokerHandhshake: \"brokerHandshake\",\n  /**\r\n   * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\r\n   */\n  AcquireTokenByRefreshTokenInBroker: \"acquireTokenByRefreshTokenInBroker\",\n  /**\r\n   * Time taken for token acquisition by broker\r\n   */\n  AcquireTokenByBroker: \"acquireTokenByBroker\",\n  /**\r\n   * Time spent on the network for refresh token acquisition\r\n   */\n  RefreshTokenClientExecuteTokenRequest: \"refreshTokenClientExecuteTokenRequest\",\n  /**\r\n   * Time taken for acquiring refresh token , records RT size\r\n   */\n  RefreshTokenClientAcquireToken: \"refreshTokenClientAcquireToken\",\n  /**\r\n   * Time taken for acquiring cached refresh token\r\n   */\n  RefreshTokenClientAcquireTokenWithCachedRefreshToken: \"refreshTokenClientAcquireTokenWithCachedRefreshToken\",\n  /**\r\n   * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).\r\n   */\n  RefreshTokenClientAcquireTokenByRefreshToken: \"refreshTokenClientAcquireTokenByRefreshToken\",\n  /**\r\n   * Helper function to create token request body in RefreshTokenClient (msal-common).\r\n   */\n  RefreshTokenClientCreateTokenRequestBody: \"refreshTokenClientCreateTokenRequestBody\",\n  /**\r\n   * acquireTokenFromCache (msal-browser).\r\n   * Internal API for acquiring token from cache\r\n   */\n  AcquireTokenFromCache: \"acquireTokenFromCache\",\n  SilentFlowClientAcquireCachedToken: \"silentFlowClientAcquireCachedToken\",\n  SilentFlowClientGenerateResultFromCacheRecord: \"silentFlowClientGenerateResultFromCacheRecord\",\n  /**\r\n   * acquireTokenBySilentIframe (msal-browser).\r\n   * Internal API for acquiring token by silent Iframe\r\n   */\n  AcquireTokenBySilentIframe: \"acquireTokenBySilentIframe\",\n  /**\r\n   * Internal API for initializing base request in BaseInteractionClient (msal-browser)\r\n   */\n  InitializeBaseRequest: \"initializeBaseRequest\",\n  /**\r\n   * Internal API for initializing silent request in SilentCacheClient (msal-browser)\r\n   */\n  InitializeSilentRequest: \"initializeSilentRequest\",\n  InitializeClientApplication: \"initializeClientApplication\",\n  InitializeCache: \"initializeCache\",\n  /**\r\n   * Helper function in SilentIframeClient class (msal-browser).\r\n   */\n  SilentIframeClientTokenHelper: \"silentIframeClientTokenHelper\",\n  /**\r\n   * SilentHandler\r\n   */\n  SilentHandlerInitiateAuthRequest: \"silentHandlerInitiateAuthRequest\",\n  SilentHandlerMonitorIframeForHash: \"silentHandlerMonitorIframeForHash\",\n  SilentHandlerLoadFrame: \"silentHandlerLoadFrame\",\n  SilentHandlerLoadFrameSync: \"silentHandlerLoadFrameSync\",\n  /**\r\n   * Helper functions in StandardInteractionClient class (msal-browser)\r\n   */\n  StandardInteractionClientCreateAuthCodeClient: \"standardInteractionClientCreateAuthCodeClient\",\n  StandardInteractionClientGetClientConfiguration: \"standardInteractionClientGetClientConfiguration\",\n  StandardInteractionClientInitializeAuthorizationRequest: \"standardInteractionClientInitializeAuthorizationRequest\",\n  StandardInteractionClientInitializeAuthorizationCodeRequest: \"standardInteractionClientInitializeAuthorizationCodeRequest\",\n  /**\r\n   * getAuthCodeUrl API (msal-browser and msal-node).\r\n   */\n  GetAuthCodeUrl: \"getAuthCodeUrl\",\n  /**\r\n   * Functions from InteractionHandler (msal-browser)\r\n   */\n  HandleCodeResponseFromServer: \"handleCodeResponseFromServer\",\n  HandleCodeResponse: \"handleCodeResponse\",\n  UpdateTokenEndpointAuthority: \"updateTokenEndpointAuthority\",\n  /**\r\n   * APIs in Authorization Code Client (msal-common)\r\n   */\n  AuthClientAcquireToken: \"authClientAcquireToken\",\n  AuthClientExecuteTokenRequest: \"authClientExecuteTokenRequest\",\n  AuthClientCreateTokenRequestBody: \"authClientCreateTokenRequestBody\",\n  AuthClientCreateQueryString: \"authClientCreateQueryString\",\n  /**\r\n   * Generate functions in PopTokenGenerator (msal-common)\r\n   */\n  PopTokenGenerateCnf: \"popTokenGenerateCnf\",\n  PopTokenGenerateKid: \"popTokenGenerateKid\",\n  /**\r\n   * handleServerTokenResponse API in ResponseHandler (msal-common)\r\n   */\n  HandleServerTokenResponse: \"handleServerTokenResponse\",\n  DeserializeResponse: \"deserializeResponse\",\n  /**\r\n   * Authority functions\r\n   */\n  AuthorityFactoryCreateDiscoveredInstance: \"authorityFactoryCreateDiscoveredInstance\",\n  AuthorityResolveEndpointsAsync: \"authorityResolveEndpointsAsync\",\n  AuthorityResolveEndpointsFromLocalSources: \"authorityResolveEndpointsFromLocalSources\",\n  AuthorityGetCloudDiscoveryMetadataFromNetwork: \"authorityGetCloudDiscoveryMetadataFromNetwork\",\n  AuthorityUpdateCloudDiscoveryMetadata: \"authorityUpdateCloudDiscoveryMetadata\",\n  AuthorityGetEndpointMetadataFromNetwork: \"authorityGetEndpointMetadataFromNetwork\",\n  AuthorityUpdateEndpointMetadata: \"authorityUpdateEndpointMetadata\",\n  AuthorityUpdateMetadataWithRegionalInformation: \"authorityUpdateMetadataWithRegionalInformation\",\n  /**\r\n   * Region Discovery functions\r\n   */\n  RegionDiscoveryDetectRegion: \"regionDiscoveryDetectRegion\",\n  RegionDiscoveryGetRegionFromIMDS: \"regionDiscoveryGetRegionFromIMDS\",\n  RegionDiscoveryGetCurrentVersion: \"regionDiscoveryGetCurrentVersion\",\n  AcquireTokenByCodeAsync: \"acquireTokenByCodeAsync\",\n  GetEndpointMetadataFromNetwork: \"getEndpointMetadataFromNetwork\",\n  GetCloudDiscoveryMetadataFromNetworkMeasurement: \"getCloudDiscoveryMetadataFromNetworkMeasurement\",\n  HandleRedirectPromiseMeasurement: \"handleRedirectPromise\",\n  HandleNativeRedirectPromiseMeasurement: \"handleNativeRedirectPromise\",\n  UpdateCloudDiscoveryMetadataMeasurement: \"updateCloudDiscoveryMetadataMeasurement\",\n  UsernamePasswordClientAcquireToken: \"usernamePasswordClientAcquireToken\",\n  NativeMessageHandlerHandshake: \"nativeMessageHandlerHandshake\",\n  NativeGenerateAuthResult: \"nativeGenerateAuthResult\",\n  RemoveHiddenIframe: \"removeHiddenIframe\",\n  /**\r\n   * Cache operations\r\n   */\n  ClearTokensAndKeysWithClaims: \"clearTokensAndKeysWithClaims\",\n  CacheManagerGetRefreshToken: \"cacheManagerGetRefreshToken\",\n  ImportExistingCache: \"importExistingCache\",\n  SetUserData: \"setUserData\",\n  LocalStorageUpdated: \"localStorageUpdated\",\n  /**\r\n   * Crypto Operations\r\n   */\n  GeneratePkceCodes: \"generatePkceCodes\",\n  GenerateCodeVerifier: \"generateCodeVerifier\",\n  GenerateCodeChallengeFromVerifier: \"generateCodeChallengeFromVerifier\",\n  Sha256Digest: \"sha256Digest\",\n  GetRandomValues: \"getRandomValues\",\n  GenerateHKDF: \"generateHKDF\",\n  GenerateBaseKey: \"generateBaseKey\",\n  Base64Decode: \"base64Decode\",\n  UrlEncodeArr: \"urlEncodeArr\",\n  Encrypt: \"encrypt\",\n  Decrypt: \"decrypt\"\n};\nconst PerformanceEventAbbreviations = new Map([[PerformanceEvents.AcquireTokenByCode, \"ATByCode\"], [PerformanceEvents.AcquireTokenByRefreshToken, \"ATByRT\"], [PerformanceEvents.AcquireTokenSilent, \"ATS\"], [PerformanceEvents.AcquireTokenSilentAsync, \"ATSAsync\"], [PerformanceEvents.AcquireTokenPopup, \"ATPopup\"], [PerformanceEvents.AcquireTokenRedirect, \"ATRedirect\"], [PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, \"CryptoGetPKThumb\"], [PerformanceEvents.CryptoOptsSignJwt, \"CryptoSignJwt\"], [PerformanceEvents.SilentCacheClientAcquireToken, \"SltCacheClientAT\"], [PerformanceEvents.SilentIframeClientAcquireToken, \"SltIframeClientAT\"], [PerformanceEvents.SilentRefreshClientAcquireToken, \"SltRClientAT\"], [PerformanceEvents.SsoSilent, \"SsoSlt\"], [PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, \"StdIntClientGetDiscAuth\"], [PerformanceEvents.FetchAccountIdWithNativeBroker, \"FetchAccIdWithNtvBroker\"], [PerformanceEvents.NativeInteractionClientAcquireToken, \"NtvIntClientAT\"], [PerformanceEvents.BaseClientCreateTokenRequestHeaders, \"BaseClientCreateTReqHead\"], [PerformanceEvents.NetworkClientSendPostRequestAsync, \"NetClientSendPost\"], [PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint, \"RTClientExecPost\"], [PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint, \"AuthCodeClientExecPost\"], [PerformanceEvents.BrokerHandhshake, \"BrokerHandshake\"], [PerformanceEvents.AcquireTokenByRefreshTokenInBroker, \"ATByRTInBroker\"], [PerformanceEvents.AcquireTokenByBroker, \"ATByBroker\"], [PerformanceEvents.RefreshTokenClientExecuteTokenRequest, \"RTClientExecTReq\"], [PerformanceEvents.RefreshTokenClientAcquireToken, \"RTClientAT\"], [PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, \"RTClientATWithCachedRT\"], [PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, \"RTClientATByRT\"], [PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, \"RTClientCreateTReqBody\"], [PerformanceEvents.AcquireTokenFromCache, \"ATFromCache\"], [PerformanceEvents.SilentFlowClientAcquireCachedToken, \"SltFlowClientATCached\"], [PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord, \"SltFlowClientGenResFromCache\"], [PerformanceEvents.AcquireTokenBySilentIframe, \"ATBySltIframe\"], [PerformanceEvents.InitializeBaseRequest, \"InitBaseReq\"], [PerformanceEvents.InitializeSilentRequest, \"InitSltReq\"], [PerformanceEvents.InitializeClientApplication, \"InitClientApplication\"], [PerformanceEvents.InitializeCache, \"InitCache\"], [PerformanceEvents.ImportExistingCache, \"importCache\"], [PerformanceEvents.SetUserData, \"setUserData\"], [PerformanceEvents.LocalStorageUpdated, \"localStorageUpdated\"], [PerformanceEvents.SilentIframeClientTokenHelper, \"SIClientTHelper\"], [PerformanceEvents.SilentHandlerInitiateAuthRequest, \"SHandlerInitAuthReq\"], [PerformanceEvents.SilentHandlerMonitorIframeForHash, \"SltHandlerMonitorIframeForHash\"], [PerformanceEvents.SilentHandlerLoadFrame, \"SHandlerLoadFrame\"], [PerformanceEvents.SilentHandlerLoadFrameSync, \"SHandlerLoadFrameSync\"], [PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, \"StdIntClientCreateAuthCodeClient\"], [PerformanceEvents.StandardInteractionClientGetClientConfiguration, \"StdIntClientGetClientConf\"], [PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, \"StdIntClientInitAuthReq\"], [PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, \"StdIntClientInitAuthCodeReq\"], [PerformanceEvents.GetAuthCodeUrl, \"GetAuthCodeUrl\"], [PerformanceEvents.HandleCodeResponseFromServer, \"HandleCodeResFromServer\"], [PerformanceEvents.HandleCodeResponse, \"HandleCodeResp\"], [PerformanceEvents.UpdateTokenEndpointAuthority, \"UpdTEndpointAuth\"], [PerformanceEvents.AuthClientAcquireToken, \"AuthClientAT\"], [PerformanceEvents.AuthClientExecuteTokenRequest, \"AuthClientExecTReq\"], [PerformanceEvents.AuthClientCreateTokenRequestBody, \"AuthClientCreateTReqBody\"], [PerformanceEvents.AuthClientCreateQueryString, \"AuthClientCreateQueryStr\"], [PerformanceEvents.PopTokenGenerateCnf, \"PopTGenCnf\"], [PerformanceEvents.PopTokenGenerateKid, \"PopTGenKid\"], [PerformanceEvents.HandleServerTokenResponse, \"HandleServerTRes\"], [PerformanceEvents.DeserializeResponse, \"DeserializeRes\"], [PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, \"AuthFactCreateDiscInst\"], [PerformanceEvents.AuthorityResolveEndpointsAsync, \"AuthResolveEndpointsAsync\"], [PerformanceEvents.AuthorityResolveEndpointsFromLocalSources, \"AuthResolveEndpointsFromLocal\"], [PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, \"AuthGetCDMetaFromNet\"], [PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, \"AuthUpdCDMeta\"], [PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, \"AuthUpdCDMetaFromNet\"], [PerformanceEvents.AuthorityUpdateEndpointMetadata, \"AuthUpdEndpointMeta\"], [PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, \"AuthUpdMetaWithRegInfo\"], [PerformanceEvents.RegionDiscoveryDetectRegion, \"RegDiscDetectReg\"], [PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, \"RegDiscGetRegFromIMDS\"], [PerformanceEvents.RegionDiscoveryGetCurrentVersion, \"RegDiscGetCurrentVer\"], [PerformanceEvents.AcquireTokenByCodeAsync, \"ATByCodeAsync\"], [PerformanceEvents.GetEndpointMetadataFromNetwork, \"GetEndpointMetaFromNet\"], [PerformanceEvents.GetCloudDiscoveryMetadataFromNetworkMeasurement, \"GetCDMetaFromNet\"], [PerformanceEvents.HandleRedirectPromiseMeasurement, \"HandleRedirectPromise\"], [PerformanceEvents.HandleNativeRedirectPromiseMeasurement, \"HandleNtvRedirectPromise\"], [PerformanceEvents.UpdateCloudDiscoveryMetadataMeasurement, \"UpdateCDMeta\"], [PerformanceEvents.UsernamePasswordClientAcquireToken, \"UserPassClientAT\"], [PerformanceEvents.NativeMessageHandlerHandshake, \"NtvMsgHandlerHandshake\"], [PerformanceEvents.NativeGenerateAuthResult, \"NtvGenAuthRes\"], [PerformanceEvents.RemoveHiddenIframe, \"RemoveHiddenIframe\"], [PerformanceEvents.ClearTokensAndKeysWithClaims, \"ClearTAndKeysWithClaims\"], [PerformanceEvents.CacheManagerGetRefreshToken, \"CacheManagerGetRT\"], [PerformanceEvents.GeneratePkceCodes, \"GenPkceCodes\"], [PerformanceEvents.GenerateCodeVerifier, \"GenCodeVerifier\"], [PerformanceEvents.GenerateCodeChallengeFromVerifier, \"GenCodeChallengeFromVerifier\"], [PerformanceEvents.Sha256Digest, \"Sha256Digest\"], [PerformanceEvents.GetRandomValues, \"GetRandomValues\"], [PerformanceEvents.GenerateHKDF, \"genHKDF\"], [PerformanceEvents.GenerateBaseKey, \"genBaseKey\"], [PerformanceEvents.Base64Decode, \"b64Decode\"], [PerformanceEvents.UrlEncodeArr, \"urlEncArr\"], [PerformanceEvents.Encrypt, \"encrypt\"], [PerformanceEvents.Decrypt, \"decrypt\"]]);\n/**\r\n * State of the performance event.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\nconst PerformanceEventStatus = {\n  NotStarted: 0,\n  InProgress: 1,\n  Completed: 2\n};\nconst IntFields = new Set([\"accessTokenSize\", \"durationMs\", \"idTokenSize\", \"matsSilentStatus\", \"matsHttpStatus\", \"refreshTokenSize\", \"queuedTimeMs\", \"startTimeMs\", \"status\", \"multiMatchedAT\", \"multiMatchedID\", \"multiMatchedRT\", \"unencryptedCacheCount\", \"encryptedCacheExpiredCount\"]);\nexport { IntFields, PerformanceEventAbbreviations, PerformanceEventStatus, PerformanceEvents };","map":{"version":3,"names":["PerformanceEvents","AcquireTokenByCode","AcquireTokenByRefreshToken","AcquireTokenSilent","AcquireTokenSilentAsync","AcquireTokenPopup","AcquireTokenPreRedirect","AcquireTokenRedirect","CryptoOptsGetPublicKeyThumbprint","CryptoOptsSignJwt","SilentCacheClientAcquireToken","SilentIframeClientAcquireToken","AwaitConcurrentIframe","SilentRefreshClientAcquireToken","SsoSilent","StandardInteractionClientGetDiscoveredAuthority","FetchAccountIdWithNativeBroker","NativeInteractionClientAcquireToken","BaseClientCreateTokenRequestHeaders","NetworkClientSendPostRequestAsync","RefreshTokenClientExecutePostToTokenEndpoint","AuthorizationCodeClientExecutePostToTokenEndpoint","BrokerHandhshake","AcquireTokenByRefreshTokenInBroker","AcquireTokenByBroker","RefreshTokenClientExecuteTokenRequest","RefreshTokenClientAcquireToken","RefreshTokenClientAcquireTokenWithCachedRefreshToken","RefreshTokenClientAcquireTokenByRefreshToken","RefreshTokenClientCreateTokenRequestBody","AcquireTokenFromCache","SilentFlowClientAcquireCachedToken","SilentFlowClientGenerateResultFromCacheRecord","AcquireTokenBySilentIframe","InitializeBaseRequest","InitializeSilentRequest","InitializeClientApplication","InitializeCache","SilentIframeClientTokenHelper","SilentHandlerInitiateAuthRequest","SilentHandlerMonitorIframeForHash","SilentHandlerLoadFrame","SilentHandlerLoadFrameSync","StandardInteractionClientCreateAuthCodeClient","StandardInteractionClientGetClientConfiguration","StandardInteractionClientInitializeAuthorizationRequest","StandardInteractionClientInitializeAuthorizationCodeRequest","GetAuthCodeUrl","HandleCodeResponseFromServer","HandleCodeResponse","UpdateTokenEndpointAuthority","AuthClientAcquireToken","AuthClientExecuteTokenRequest","AuthClientCreateTokenRequestBody","AuthClientCreateQueryString","PopTokenGenerateCnf","PopTokenGenerateKid","HandleServerTokenResponse","DeserializeResponse","AuthorityFactoryCreateDiscoveredInstance","AuthorityResolveEndpointsAsync","AuthorityResolveEndpointsFromLocalSources","AuthorityGetCloudDiscoveryMetadataFromNetwork","AuthorityUpdateCloudDiscoveryMetadata","AuthorityGetEndpointMetadataFromNetwork","AuthorityUpdateEndpointMetadata","AuthorityUpdateMetadataWithRegionalInformation","RegionDiscoveryDetectRegion","RegionDiscoveryGetRegionFromIMDS","RegionDiscoveryGetCurrentVersion","AcquireTokenByCodeAsync","GetEndpointMetadataFromNetwork","GetCloudDiscoveryMetadataFromNetworkMeasurement","HandleRedirectPromiseMeasurement","HandleNativeRedirectPromiseMeasurement","UpdateCloudDiscoveryMetadataMeasurement","UsernamePasswordClientAcquireToken","NativeMessageHandlerHandshake","NativeGenerateAuthResult","RemoveHiddenIframe","ClearTokensAndKeysWithClaims","CacheManagerGetRefreshToken","ImportExistingCache","SetUserData","LocalStorageUpdated","GeneratePkceCodes","GenerateCodeVerifier","GenerateCodeChallengeFromVerifier","Sha256Digest","GetRandomValues","GenerateHKDF","GenerateBaseKey","Base64Decode","UrlEncodeArr","Encrypt","Decrypt","PerformanceEventAbbreviations","Map","PerformanceEventStatus","NotStarted","InProgress","Completed","IntFields","Set"],"sources":["C:\\bytepantry\\frontend\\node_modules\\@azure\\msal-common\\src\\telemetry\\performance\\PerformanceEvent.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\r\nexport const PerformanceEvents = {\r\n    /**\r\n     * acquireTokenByCode API (msal-browser and msal-node).\r\n     * Used to acquire tokens by trading an authorization code against the token endpoint.\r\n     */\r\n    AcquireTokenByCode: \"acquireTokenByCode\",\r\n\r\n    /**\r\n     * acquireTokenByRefreshToken API (msal-browser and msal-node).\r\n     * Used to renew an access token using a refresh token against the token endpoint.\r\n     */\r\n    AcquireTokenByRefreshToken: \"acquireTokenByRefreshToken\",\r\n\r\n    /**\r\n     * acquireTokenSilent API (msal-browser and msal-node).\r\n     * Used to silently acquire a new access token (from the cache or the network).\r\n     */\r\n    AcquireTokenSilent: \"acquireTokenSilent\",\r\n\r\n    /**\r\n     * acquireTokenSilentAsync (msal-browser).\r\n     * Internal API for acquireTokenSilent.\r\n     */\r\n    AcquireTokenSilentAsync: \"acquireTokenSilentAsync\",\r\n\r\n    /**\r\n     * acquireTokenPopup (msal-browser).\r\n     * Used to acquire a new access token interactively through pop ups\r\n     */\r\n    AcquireTokenPopup: \"acquireTokenPopup\",\r\n\r\n    /**\r\n     * acquireTokenPreRedirect (msal-browser).\r\n     * First part of the redirect flow.\r\n     * Used to acquire a new access token interactively through redirects.\r\n     */\r\n    AcquireTokenPreRedirect: \"acquireTokenPreRedirect\",\r\n\r\n    /**\r\n     * acquireTokenRedirect (msal-browser).\r\n     * Second part of the redirect flow.\r\n     * Used to acquire a new access token interactively through redirects.\r\n     */\r\n    AcquireTokenRedirect: \"acquireTokenRedirect\",\r\n\r\n    /**\r\n     * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\r\n     * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\r\n     */\r\n    CryptoOptsGetPublicKeyThumbprint: \"cryptoOptsGetPublicKeyThumbprint\",\r\n\r\n    /**\r\n     * signJwt API in CryptoOpts class (msal-browser).\r\n     * Used to signed a pop token.\r\n     */\r\n    CryptoOptsSignJwt: \"cryptoOptsSignJwt\",\r\n\r\n    /**\r\n     * acquireToken API in the SilentCacheClient class (msal-browser).\r\n     * Used to read access tokens from the cache.\r\n     */\r\n    SilentCacheClientAcquireToken: \"silentCacheClientAcquireToken\",\r\n\r\n    /**\r\n     * acquireToken API in the SilentIframeClient class (msal-browser).\r\n     * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\r\n     */\r\n    SilentIframeClientAcquireToken: \"silentIframeClientAcquireToken\",\r\n    AwaitConcurrentIframe: \"awaitConcurrentIframe\", // Time spent waiting for a concurrent iframe to complete\r\n\r\n    /**\r\n     * acquireToken API in SilentRereshClient (msal-browser).\r\n     * Used to acquire a new set of tokens from the token endpoint using a refresh token.\r\n     */\r\n    SilentRefreshClientAcquireToken: \"silentRefreshClientAcquireToken\",\r\n\r\n    /**\r\n     * ssoSilent API (msal-browser).\r\n     * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\r\n     */\r\n    SsoSilent: \"ssoSilent\",\r\n\r\n    /**\r\n     * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\r\n     * Used to load authority metadata for a request.\r\n     */\r\n    StandardInteractionClientGetDiscoveredAuthority:\r\n        \"standardInteractionClientGetDiscoveredAuthority\",\r\n\r\n    /**\r\n     * acquireToken APIs in msal-browser.\r\n     * Used to make an /authorize endpoint call with native brokering enabled.\r\n     */\r\n    FetchAccountIdWithNativeBroker: \"fetchAccountIdWithNativeBroker\",\r\n\r\n    /**\r\n     * acquireToken API in NativeInteractionClient class (msal-browser).\r\n     * Used to acquire a token from Native component when native brokering is enabled.\r\n     */\r\n    NativeInteractionClientAcquireToken: \"nativeInteractionClientAcquireToken\",\r\n    /**\r\n     * Time spent creating default headers for requests to token endpoint\r\n     */\r\n    BaseClientCreateTokenRequestHeaders: \"baseClientCreateTokenRequestHeaders\",\r\n    /**\r\n     * Time spent sending/waiting for the response of a request to the token endpoint\r\n     */\r\n    NetworkClientSendPostRequestAsync: \"networkClientSendPostRequestAsync\",\r\n    RefreshTokenClientExecutePostToTokenEndpoint:\r\n        \"refreshTokenClientExecutePostToTokenEndpoint\",\r\n    AuthorizationCodeClientExecutePostToTokenEndpoint:\r\n        \"authorizationCodeClientExecutePostToTokenEndpoint\",\r\n    /**\r\n     * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\r\n     */\r\n    BrokerHandhshake: \"brokerHandshake\",\r\n    /**\r\n     * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\r\n     */\r\n    AcquireTokenByRefreshTokenInBroker: \"acquireTokenByRefreshTokenInBroker\",\r\n    /**\r\n     * Time taken for token acquisition by broker\r\n     */\r\n    AcquireTokenByBroker: \"acquireTokenByBroker\",\r\n\r\n    /**\r\n     * Time spent on the network for refresh token acquisition\r\n     */\r\n    RefreshTokenClientExecuteTokenRequest:\r\n        \"refreshTokenClientExecuteTokenRequest\",\r\n\r\n    /**\r\n     * Time taken for acquiring refresh token , records RT size\r\n     */\r\n    RefreshTokenClientAcquireToken: \"refreshTokenClientAcquireToken\",\r\n\r\n    /**\r\n     * Time taken for acquiring cached refresh token\r\n     */\r\n    RefreshTokenClientAcquireTokenWithCachedRefreshToken:\r\n        \"refreshTokenClientAcquireTokenWithCachedRefreshToken\",\r\n\r\n    /**\r\n     * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).\r\n     */\r\n    RefreshTokenClientAcquireTokenByRefreshToken:\r\n        \"refreshTokenClientAcquireTokenByRefreshToken\",\r\n\r\n    /**\r\n     * Helper function to create token request body in RefreshTokenClient (msal-common).\r\n     */\r\n    RefreshTokenClientCreateTokenRequestBody:\r\n        \"refreshTokenClientCreateTokenRequestBody\",\r\n\r\n    /**\r\n     * acquireTokenFromCache (msal-browser).\r\n     * Internal API for acquiring token from cache\r\n     */\r\n    AcquireTokenFromCache: \"acquireTokenFromCache\",\r\n    SilentFlowClientAcquireCachedToken: \"silentFlowClientAcquireCachedToken\",\r\n    SilentFlowClientGenerateResultFromCacheRecord:\r\n        \"silentFlowClientGenerateResultFromCacheRecord\",\r\n\r\n    /**\r\n     * acquireTokenBySilentIframe (msal-browser).\r\n     * Internal API for acquiring token by silent Iframe\r\n     */\r\n    AcquireTokenBySilentIframe: \"acquireTokenBySilentIframe\",\r\n\r\n    /**\r\n     * Internal API for initializing base request in BaseInteractionClient (msal-browser)\r\n     */\r\n    InitializeBaseRequest: \"initializeBaseRequest\",\r\n\r\n    /**\r\n     * Internal API for initializing silent request in SilentCacheClient (msal-browser)\r\n     */\r\n    InitializeSilentRequest: \"initializeSilentRequest\",\r\n\r\n    InitializeClientApplication: \"initializeClientApplication\",\r\n\r\n    InitializeCache: \"initializeCache\",\r\n\r\n    /**\r\n     * Helper function in SilentIframeClient class (msal-browser).\r\n     */\r\n    SilentIframeClientTokenHelper: \"silentIframeClientTokenHelper\",\r\n\r\n    /**\r\n     * SilentHandler\r\n     */\r\n    SilentHandlerInitiateAuthRequest: \"silentHandlerInitiateAuthRequest\",\r\n    SilentHandlerMonitorIframeForHash: \"silentHandlerMonitorIframeForHash\",\r\n    SilentHandlerLoadFrame: \"silentHandlerLoadFrame\",\r\n    SilentHandlerLoadFrameSync: \"silentHandlerLoadFrameSync\",\r\n\r\n    /**\r\n     * Helper functions in StandardInteractionClient class (msal-browser)\r\n     */\r\n    StandardInteractionClientCreateAuthCodeClient:\r\n        \"standardInteractionClientCreateAuthCodeClient\",\r\n    StandardInteractionClientGetClientConfiguration:\r\n        \"standardInteractionClientGetClientConfiguration\",\r\n    StandardInteractionClientInitializeAuthorizationRequest:\r\n        \"standardInteractionClientInitializeAuthorizationRequest\",\r\n    StandardInteractionClientInitializeAuthorizationCodeRequest:\r\n        \"standardInteractionClientInitializeAuthorizationCodeRequest\",\r\n\r\n    /**\r\n     * getAuthCodeUrl API (msal-browser and msal-node).\r\n     */\r\n    GetAuthCodeUrl: \"getAuthCodeUrl\",\r\n\r\n    /**\r\n     * Functions from InteractionHandler (msal-browser)\r\n     */\r\n    HandleCodeResponseFromServer: \"handleCodeResponseFromServer\",\r\n    HandleCodeResponse: \"handleCodeResponse\",\r\n    UpdateTokenEndpointAuthority: \"updateTokenEndpointAuthority\",\r\n\r\n    /**\r\n     * APIs in Authorization Code Client (msal-common)\r\n     */\r\n    AuthClientAcquireToken: \"authClientAcquireToken\",\r\n    AuthClientExecuteTokenRequest: \"authClientExecuteTokenRequest\",\r\n    AuthClientCreateTokenRequestBody: \"authClientCreateTokenRequestBody\",\r\n    AuthClientCreateQueryString: \"authClientCreateQueryString\",\r\n\r\n    /**\r\n     * Generate functions in PopTokenGenerator (msal-common)\r\n     */\r\n    PopTokenGenerateCnf: \"popTokenGenerateCnf\",\r\n    PopTokenGenerateKid: \"popTokenGenerateKid\",\r\n\r\n    /**\r\n     * handleServerTokenResponse API in ResponseHandler (msal-common)\r\n     */\r\n    HandleServerTokenResponse: \"handleServerTokenResponse\",\r\n    DeserializeResponse: \"deserializeResponse\",\r\n\r\n    /**\r\n     * Authority functions\r\n     */\r\n    AuthorityFactoryCreateDiscoveredInstance:\r\n        \"authorityFactoryCreateDiscoveredInstance\",\r\n    AuthorityResolveEndpointsAsync: \"authorityResolveEndpointsAsync\",\r\n    AuthorityResolveEndpointsFromLocalSources:\r\n        \"authorityResolveEndpointsFromLocalSources\",\r\n    AuthorityGetCloudDiscoveryMetadataFromNetwork:\r\n        \"authorityGetCloudDiscoveryMetadataFromNetwork\",\r\n    AuthorityUpdateCloudDiscoveryMetadata:\r\n        \"authorityUpdateCloudDiscoveryMetadata\",\r\n    AuthorityGetEndpointMetadataFromNetwork:\r\n        \"authorityGetEndpointMetadataFromNetwork\",\r\n    AuthorityUpdateEndpointMetadata: \"authorityUpdateEndpointMetadata\",\r\n    AuthorityUpdateMetadataWithRegionalInformation:\r\n        \"authorityUpdateMetadataWithRegionalInformation\",\r\n\r\n    /**\r\n     * Region Discovery functions\r\n     */\r\n    RegionDiscoveryDetectRegion: \"regionDiscoveryDetectRegion\",\r\n    RegionDiscoveryGetRegionFromIMDS: \"regionDiscoveryGetRegionFromIMDS\",\r\n    RegionDiscoveryGetCurrentVersion: \"regionDiscoveryGetCurrentVersion\",\r\n\r\n    AcquireTokenByCodeAsync: \"acquireTokenByCodeAsync\",\r\n\r\n    GetEndpointMetadataFromNetwork: \"getEndpointMetadataFromNetwork\",\r\n    GetCloudDiscoveryMetadataFromNetworkMeasurement:\r\n        \"getCloudDiscoveryMetadataFromNetworkMeasurement\",\r\n\r\n    HandleRedirectPromiseMeasurement: \"handleRedirectPromise\",\r\n    HandleNativeRedirectPromiseMeasurement: \"handleNativeRedirectPromise\",\r\n\r\n    UpdateCloudDiscoveryMetadataMeasurement:\r\n        \"updateCloudDiscoveryMetadataMeasurement\",\r\n\r\n    UsernamePasswordClientAcquireToken: \"usernamePasswordClientAcquireToken\",\r\n\r\n    NativeMessageHandlerHandshake: \"nativeMessageHandlerHandshake\",\r\n\r\n    NativeGenerateAuthResult: \"nativeGenerateAuthResult\",\r\n\r\n    RemoveHiddenIframe: \"removeHiddenIframe\",\r\n\r\n    /**\r\n     * Cache operations\r\n     */\r\n    ClearTokensAndKeysWithClaims: \"clearTokensAndKeysWithClaims\",\r\n    CacheManagerGetRefreshToken: \"cacheManagerGetRefreshToken\",\r\n    ImportExistingCache: \"importExistingCache\",\r\n    SetUserData: \"setUserData\",\r\n    LocalStorageUpdated: \"localStorageUpdated\",\r\n\r\n    /**\r\n     * Crypto Operations\r\n     */\r\n    GeneratePkceCodes: \"generatePkceCodes\",\r\n    GenerateCodeVerifier: \"generateCodeVerifier\",\r\n    GenerateCodeChallengeFromVerifier: \"generateCodeChallengeFromVerifier\",\r\n    Sha256Digest: \"sha256Digest\",\r\n    GetRandomValues: \"getRandomValues\",\r\n    GenerateHKDF: \"generateHKDF\",\r\n    GenerateBaseKey: \"generateBaseKey\",\r\n    Base64Decode: \"base64Decode\",\r\n    UrlEncodeArr: \"urlEncodeArr\",\r\n    Encrypt: \"encrypt\",\r\n    Decrypt: \"decrypt\",\r\n} as const;\r\nexport type PerformanceEvents =\r\n    (typeof PerformanceEvents)[keyof typeof PerformanceEvents];\r\n\r\nexport const PerformanceEventAbbreviations: ReadonlyMap<string, string> =\r\n    new Map([\r\n        [PerformanceEvents.AcquireTokenByCode, \"ATByCode\"],\r\n        [PerformanceEvents.AcquireTokenByRefreshToken, \"ATByRT\"],\r\n        [PerformanceEvents.AcquireTokenSilent, \"ATS\"],\r\n        [PerformanceEvents.AcquireTokenSilentAsync, \"ATSAsync\"],\r\n        [PerformanceEvents.AcquireTokenPopup, \"ATPopup\"],\r\n        [PerformanceEvents.AcquireTokenRedirect, \"ATRedirect\"],\r\n        [\r\n            PerformanceEvents.CryptoOptsGetPublicKeyThumbprint,\r\n            \"CryptoGetPKThumb\",\r\n        ],\r\n        [PerformanceEvents.CryptoOptsSignJwt, \"CryptoSignJwt\"],\r\n        [PerformanceEvents.SilentCacheClientAcquireToken, \"SltCacheClientAT\"],\r\n        [PerformanceEvents.SilentIframeClientAcquireToken, \"SltIframeClientAT\"],\r\n        [PerformanceEvents.SilentRefreshClientAcquireToken, \"SltRClientAT\"],\r\n        [PerformanceEvents.SsoSilent, \"SsoSlt\"],\r\n        [\r\n            PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,\r\n            \"StdIntClientGetDiscAuth\",\r\n        ],\r\n        [\r\n            PerformanceEvents.FetchAccountIdWithNativeBroker,\r\n            \"FetchAccIdWithNtvBroker\",\r\n        ],\r\n        [\r\n            PerformanceEvents.NativeInteractionClientAcquireToken,\r\n            \"NtvIntClientAT\",\r\n        ],\r\n        [\r\n            PerformanceEvents.BaseClientCreateTokenRequestHeaders,\r\n            \"BaseClientCreateTReqHead\",\r\n        ],\r\n        [\r\n            PerformanceEvents.NetworkClientSendPostRequestAsync,\r\n            \"NetClientSendPost\",\r\n        ],\r\n        [\r\n            PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint,\r\n            \"RTClientExecPost\",\r\n        ],\r\n        [\r\n            PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint,\r\n            \"AuthCodeClientExecPost\",\r\n        ],\r\n        [PerformanceEvents.BrokerHandhshake, \"BrokerHandshake\"],\r\n        [\r\n            PerformanceEvents.AcquireTokenByRefreshTokenInBroker,\r\n            \"ATByRTInBroker\",\r\n        ],\r\n        [PerformanceEvents.AcquireTokenByBroker, \"ATByBroker\"],\r\n        [\r\n            PerformanceEvents.RefreshTokenClientExecuteTokenRequest,\r\n            \"RTClientExecTReq\",\r\n        ],\r\n        [PerformanceEvents.RefreshTokenClientAcquireToken, \"RTClientAT\"],\r\n        [\r\n            PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,\r\n            \"RTClientATWithCachedRT\",\r\n        ],\r\n        [\r\n            PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,\r\n            \"RTClientATByRT\",\r\n        ],\r\n        [\r\n            PerformanceEvents.RefreshTokenClientCreateTokenRequestBody,\r\n            \"RTClientCreateTReqBody\",\r\n        ],\r\n        [PerformanceEvents.AcquireTokenFromCache, \"ATFromCache\"],\r\n        [\r\n            PerformanceEvents.SilentFlowClientAcquireCachedToken,\r\n            \"SltFlowClientATCached\",\r\n        ],\r\n        [\r\n            PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord,\r\n            \"SltFlowClientGenResFromCache\",\r\n        ],\r\n        [PerformanceEvents.AcquireTokenBySilentIframe, \"ATBySltIframe\"],\r\n        [PerformanceEvents.InitializeBaseRequest, \"InitBaseReq\"],\r\n        [PerformanceEvents.InitializeSilentRequest, \"InitSltReq\"],\r\n        [\r\n            PerformanceEvents.InitializeClientApplication,\r\n            \"InitClientApplication\",\r\n        ],\r\n        [PerformanceEvents.InitializeCache, \"InitCache\"],\r\n        [PerformanceEvents.ImportExistingCache, \"importCache\"],\r\n        [PerformanceEvents.SetUserData, \"setUserData\"],\r\n        [PerformanceEvents.LocalStorageUpdated, \"localStorageUpdated\"],\r\n        [PerformanceEvents.SilentIframeClientTokenHelper, \"SIClientTHelper\"],\r\n        [\r\n            PerformanceEvents.SilentHandlerInitiateAuthRequest,\r\n            \"SHandlerInitAuthReq\",\r\n        ],\r\n        [\r\n            PerformanceEvents.SilentHandlerMonitorIframeForHash,\r\n            \"SltHandlerMonitorIframeForHash\",\r\n        ],\r\n        [PerformanceEvents.SilentHandlerLoadFrame, \"SHandlerLoadFrame\"],\r\n        [PerformanceEvents.SilentHandlerLoadFrameSync, \"SHandlerLoadFrameSync\"],\r\n\r\n        [\r\n            PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\r\n            \"StdIntClientCreateAuthCodeClient\",\r\n        ],\r\n        [\r\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\r\n            \"StdIntClientGetClientConf\",\r\n        ],\r\n        [\r\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\r\n            \"StdIntClientInitAuthReq\",\r\n        ],\r\n        [\r\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,\r\n            \"StdIntClientInitAuthCodeReq\",\r\n        ],\r\n\r\n        [PerformanceEvents.GetAuthCodeUrl, \"GetAuthCodeUrl\"],\r\n\r\n        [\r\n            PerformanceEvents.HandleCodeResponseFromServer,\r\n            \"HandleCodeResFromServer\",\r\n        ],\r\n        [PerformanceEvents.HandleCodeResponse, \"HandleCodeResp\"],\r\n        [PerformanceEvents.UpdateTokenEndpointAuthority, \"UpdTEndpointAuth\"],\r\n\r\n        [PerformanceEvents.AuthClientAcquireToken, \"AuthClientAT\"],\r\n        [PerformanceEvents.AuthClientExecuteTokenRequest, \"AuthClientExecTReq\"],\r\n        [\r\n            PerformanceEvents.AuthClientCreateTokenRequestBody,\r\n            \"AuthClientCreateTReqBody\",\r\n        ],\r\n        [\r\n            PerformanceEvents.AuthClientCreateQueryString,\r\n            \"AuthClientCreateQueryStr\",\r\n        ],\r\n        [PerformanceEvents.PopTokenGenerateCnf, \"PopTGenCnf\"],\r\n        [PerformanceEvents.PopTokenGenerateKid, \"PopTGenKid\"],\r\n        [PerformanceEvents.HandleServerTokenResponse, \"HandleServerTRes\"],\r\n        [PerformanceEvents.DeserializeResponse, \"DeserializeRes\"],\r\n        [\r\n            PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance,\r\n            \"AuthFactCreateDiscInst\",\r\n        ],\r\n        [\r\n            PerformanceEvents.AuthorityResolveEndpointsAsync,\r\n            \"AuthResolveEndpointsAsync\",\r\n        ],\r\n        [\r\n            PerformanceEvents.AuthorityResolveEndpointsFromLocalSources,\r\n            \"AuthResolveEndpointsFromLocal\",\r\n        ],\r\n        [\r\n            PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork,\r\n            \"AuthGetCDMetaFromNet\",\r\n        ],\r\n        [\r\n            PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata,\r\n            \"AuthUpdCDMeta\",\r\n        ],\r\n        [\r\n            PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork,\r\n            \"AuthUpdCDMetaFromNet\",\r\n        ],\r\n        [\r\n            PerformanceEvents.AuthorityUpdateEndpointMetadata,\r\n            \"AuthUpdEndpointMeta\",\r\n        ],\r\n        [\r\n            PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation,\r\n            \"AuthUpdMetaWithRegInfo\",\r\n        ],\r\n        [PerformanceEvents.RegionDiscoveryDetectRegion, \"RegDiscDetectReg\"],\r\n        [\r\n            PerformanceEvents.RegionDiscoveryGetRegionFromIMDS,\r\n            \"RegDiscGetRegFromIMDS\",\r\n        ],\r\n        [\r\n            PerformanceEvents.RegionDiscoveryGetCurrentVersion,\r\n            \"RegDiscGetCurrentVer\",\r\n        ],\r\n        [PerformanceEvents.AcquireTokenByCodeAsync, \"ATByCodeAsync\"],\r\n        [\r\n            PerformanceEvents.GetEndpointMetadataFromNetwork,\r\n            \"GetEndpointMetaFromNet\",\r\n        ],\r\n        [\r\n            PerformanceEvents.GetCloudDiscoveryMetadataFromNetworkMeasurement,\r\n            \"GetCDMetaFromNet\",\r\n        ],\r\n        [\r\n            PerformanceEvents.HandleRedirectPromiseMeasurement,\r\n            \"HandleRedirectPromise\",\r\n        ],\r\n        [\r\n            PerformanceEvents.HandleNativeRedirectPromiseMeasurement,\r\n            \"HandleNtvRedirectPromise\",\r\n        ],\r\n        [\r\n            PerformanceEvents.UpdateCloudDiscoveryMetadataMeasurement,\r\n            \"UpdateCDMeta\",\r\n        ],\r\n        [\r\n            PerformanceEvents.UsernamePasswordClientAcquireToken,\r\n            \"UserPassClientAT\",\r\n        ],\r\n        [\r\n            PerformanceEvents.NativeMessageHandlerHandshake,\r\n            \"NtvMsgHandlerHandshake\",\r\n        ],\r\n        [PerformanceEvents.NativeGenerateAuthResult, \"NtvGenAuthRes\"],\r\n        [PerformanceEvents.RemoveHiddenIframe, \"RemoveHiddenIframe\"],\r\n        [\r\n            PerformanceEvents.ClearTokensAndKeysWithClaims,\r\n            \"ClearTAndKeysWithClaims\",\r\n        ],\r\n        [PerformanceEvents.CacheManagerGetRefreshToken, \"CacheManagerGetRT\"],\r\n        [PerformanceEvents.GeneratePkceCodes, \"GenPkceCodes\"],\r\n        [PerformanceEvents.GenerateCodeVerifier, \"GenCodeVerifier\"],\r\n        [\r\n            PerformanceEvents.GenerateCodeChallengeFromVerifier,\r\n            \"GenCodeChallengeFromVerifier\",\r\n        ],\r\n        [PerformanceEvents.Sha256Digest, \"Sha256Digest\"],\r\n        [PerformanceEvents.GetRandomValues, \"GetRandomValues\"],\r\n        [PerformanceEvents.GenerateHKDF, \"genHKDF\"],\r\n        [PerformanceEvents.GenerateBaseKey, \"genBaseKey\"],\r\n        [PerformanceEvents.Base64Decode, \"b64Decode\"],\r\n        [PerformanceEvents.UrlEncodeArr, \"urlEncArr\"],\r\n        [PerformanceEvents.Encrypt, \"encrypt\"],\r\n        [PerformanceEvents.Decrypt, \"decrypt\"],\r\n    ]);\r\n\r\n/**\r\n * State of the performance event.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\r\nexport const PerformanceEventStatus = {\r\n    NotStarted: 0,\r\n    InProgress: 1,\r\n    Completed: 2,\r\n} as const;\r\nexport type PerformanceEventStatus =\r\n    (typeof PerformanceEventStatus)[keyof typeof PerformanceEventStatus];\r\n\r\nexport type SubMeasurement = {\r\n    name: string;\r\n    startTimeMs: number;\r\n};\r\n\r\n/**\r\n * Performance measurement taken by the library, including metadata about the request and application.\r\n *\r\n * @export\r\n * @typedef {PerformanceEvent}\r\n */\r\nexport type PerformanceEvent = {\r\n    /**\r\n     * Unique id for the event\r\n     *\r\n     * @type {string}\r\n     */\r\n    eventId: string;\r\n\r\n    /**\r\n     * State of the perforance measure.\r\n     *\r\n     * @type {PerformanceEventStatus}\r\n     */\r\n    status: PerformanceEventStatus;\r\n\r\n    /**\r\n     * Login authority used for the request\r\n     *\r\n     * @type {string}\r\n     */\r\n    authority: string;\r\n\r\n    /**\r\n     * Client id for the application\r\n     *\r\n     * @type {string}\r\n     */\r\n    clientId: string;\r\n\r\n    /**\r\n     * Correlation ID used for the request\r\n     *\r\n     * @type {string}\r\n     */\r\n    correlationId: string;\r\n\r\n    /**\r\n     * End-to-end duration in milliseconds.\r\n     * @date 3/22/2022 - 3:40:05 PM\r\n     *\r\n     * @type {number}\r\n     */\r\n    durationMs?: number;\r\n\r\n    /**\r\n     * Visibility of the page when the event completed.\r\n     * Read from: https://developer.mozilla.org/docs/Web/API/Page_Visibility_API\r\n     *\r\n     * @type {?(string | null)}\r\n     */\r\n    endPageVisibility?: string | null;\r\n\r\n    /**\r\n     * Whether the result was retrieved from the cache.\r\n     *\r\n     * @type {(boolean | null)}\r\n     */\r\n    fromCache?: boolean | null;\r\n\r\n    /**\r\n     * Event name (usually in the form of classNameFunctionName)\r\n     *\r\n     * @type {string}\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Visibility of the page when the event completed.\r\n     * Read from: https://developer.mozilla.org/docs/Web/API/Page_Visibility_API\r\n     *\r\n     * @type {?(string | null)}\r\n     */\r\n    startPageVisibility?: string | null;\r\n\r\n    /**\r\n     * Unix millisecond timestamp when the event was initiated.\r\n     *\r\n     * @type {number}\r\n     */\r\n    startTimeMs: number;\r\n\r\n    /**\r\n     * Whether or the operation completed successfully.\r\n     *\r\n     * @type {(boolean | null)}\r\n     */\r\n    success?: boolean | null;\r\n\r\n    /**\r\n     * Add specific error code in case of failure\r\n     *\r\n     * @type {string}\r\n     */\r\n    errorCode?: string;\r\n\r\n    /**\r\n     * Add specific sub error code in case of failure\r\n     *\r\n     * @type {string}\r\n     */\r\n    subErrorCode?: string;\r\n\r\n    /**\r\n     * Server error number\r\n     */\r\n    serverErrorNo?: string;\r\n\r\n    /**\r\n     * Name of the library used for the operation.\r\n     *\r\n     * @type {string}\r\n     */\r\n    libraryName: string;\r\n\r\n    /**\r\n     * Version of the library used for the operation.\r\n     *\r\n     * @type {string}\r\n     */\r\n    libraryVersion: string;\r\n\r\n    /**\r\n     * Whether the response is from a native component (e.g., WAM)\r\n     *\r\n     * @type {?boolean}\r\n     */\r\n    isNativeBroker?: boolean;\r\n\r\n    /**\r\n     * Request ID returned from the response\r\n     *\r\n     * @type {?string}\r\n     */\r\n    requestId?: string;\r\n\r\n    /**\r\n     * Cache lookup policy\r\n     *\r\n     * @type {?number}\r\n     */\r\n    cacheLookupPolicy?: number | undefined;\r\n\r\n    /**\r\n     * Cache Outcome\r\n     * @type {?number}\r\n     */\r\n    cacheOutcome?: number;\r\n\r\n    /**\r\n     * Amount of time spent in the JS queue in milliseconds.\r\n     *\r\n     * @type {?number}\r\n     */\r\n    queuedTimeMs?: number;\r\n\r\n    /**\r\n     * Sub-measurements for internal use. To be deleted before flushing.\r\n     */\r\n    incompleteSubMeasurements?: Map<string, SubMeasurement>;\r\n\r\n    visibilityChangeCount?: number;\r\n    incompleteSubsCount?: number;\r\n\r\n    /**\r\n     * CorrelationId of the in progress iframe request that was awaited\r\n     */\r\n    awaitIframeCorrelationId?: string;\r\n    /**\r\n     * Amount of times queued in the JS event queue.\r\n     *\r\n     * @type {?number}\r\n     */\r\n    queuedCount?: number;\r\n    /**\r\n     * Amount of manually completed queue events.\r\n     *\r\n     * @type {?number}\r\n     */\r\n    queuedManuallyCompletedCount?: number;\r\n\r\n    /**\r\n     * Size of the id token\r\n     *\r\n     * @type {number}\r\n     */\r\n    idTokenSize?: number;\r\n\r\n    /**\r\n     *\r\n     * Size of the access token\r\n     *\r\n     * @type {number}\r\n     */\r\n\r\n    accessTokenSize?: number;\r\n\r\n    /**\r\n     *\r\n     * Size of the refresh token\r\n     *\r\n     * @type {number}\r\n     */\r\n\r\n    refreshTokenSize?: number | undefined;\r\n\r\n    /**\r\n     * Application name as specified by the app.\r\n     *\r\n     * @type {?string}\r\n     */\r\n    appName?: string;\r\n\r\n    /**\r\n     * Application version as specified by the app.\r\n     *\r\n     * @type {?string}\r\n     */\r\n    appVersion?: string;\r\n\r\n    /**\r\n     * The following are fields that may be emitted in native broker scenarios\r\n     */\r\n    extensionId?: string;\r\n    extensionVersion?: string;\r\n    matsBrokerVersion?: string;\r\n    matsAccountJoinOnStart?: string;\r\n    matsAccountJoinOnEnd?: string;\r\n    matsDeviceJoin?: string;\r\n    matsPromptBehavior?: string;\r\n    matsApiErrorCode?: number;\r\n    matsUiVisible?: boolean;\r\n    matsSilentCode?: number;\r\n    matsSilentBiSubCode?: number;\r\n    matsSilentMessage?: string;\r\n    matsSilentStatus?: number;\r\n    matsHttpStatus?: number;\r\n    matsHttpEventCount?: number;\r\n\r\n    /**\r\n     * Http POST metadata\r\n     */\r\n    httpVerToken?: string;\r\n    httpStatus?: number;\r\n    contentTypeHeader?: string;\r\n    contentLengthHeader?: string;\r\n\r\n    /**\r\n     * Platform broker fields\r\n     */\r\n    allowPlatformBroker?: boolean;\r\n    extensionInstalled?: boolean;\r\n    extensionHandshakeTimeoutMs?: number;\r\n    extensionHandshakeTimedOut?: boolean;\r\n\r\n    /**\r\n     * Nested App Auth Fields\r\n     */\r\n    nestedAppAuthRequest?: boolean;\r\n\r\n    /**\r\n     * Multiple matched access/id/refresh tokens in the cache\r\n     */\r\n    multiMatchedAT?: number;\r\n    multiMatchedID?: number;\r\n    multiMatchedRT?: number;\r\n\r\n    errorName?: string;\r\n    errorStack?: string[];\r\n\r\n    // Event context as JSON string\r\n    context?: string;\r\n\r\n    // Number of tokens in the cache to be reported when cache quota is exceeded\r\n    cacheRtCount?: number;\r\n    cacheIdCount?: number;\r\n    cacheAtCount?: number;\r\n\r\n    // Scenario id to track custom user prompts\r\n    scenarioId?: string;\r\n\r\n    accountType?: \"AAD\" | \"MSA\" | \"B2C\";\r\n\r\n    /**\r\n     * Server error that triggers a request retry\r\n     *\r\n     * @type {string}\r\n     */\r\n    retryError?: string;\r\n\r\n    embeddedClientId?: string;\r\n    embeddedRedirectUri?: string;\r\n\r\n    isAsyncPopup?: boolean;\r\n\r\n    rtExpiresOnMs?: number;\r\n\r\n    sidFromClaims?: boolean;\r\n    sidFromRequest?: boolean;\r\n    loginHintFromRequest?: boolean;\r\n    loginHintFromUpn?: boolean;\r\n    loginHintFromClaim?: boolean;\r\n    domainHintFromRequest?: boolean;\r\n\r\n    prompt?: string;\r\n\r\n    usePreGeneratedPkce?: boolean;\r\n};\r\n\r\nexport type PerformanceEventContext = {\r\n    dur?: number;\r\n    err?: string;\r\n    subErr?: string;\r\n    fail?: number;\r\n};\r\n\r\nexport type PerformanceEventStackedContext = PerformanceEventContext & {\r\n    name?: string;\r\n    childErr?: string;\r\n};\r\n\r\nexport const IntFields: ReadonlySet<string> = new Set([\r\n    \"accessTokenSize\",\r\n    \"durationMs\",\r\n    \"idTokenSize\",\r\n    \"matsSilentStatus\",\r\n    \"matsHttpStatus\",\r\n    \"refreshTokenSize\",\r\n    \"queuedTimeMs\",\r\n    \"startTimeMs\",\r\n    \"status\",\r\n    \"multiMatchedAT\",\r\n    \"multiMatchedID\",\r\n    \"multiMatchedRT\",\r\n    \"unencryptedCacheCount\",\r\n    \"encryptedCacheExpiredCount\",\r\n]);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}