{"ast":null,"code":"/*! @azure/msal-react v3.0.5 2025-02-18 */\n'use strict';\n\nimport { useState, useEffect } from 'react';\nimport { AccountEntity } from '@azure/msal-browser';\nimport { useMsal } from './useMsal.js';\nimport { getAccountByIdentifiers } from '../utils/utilities.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nfunction getAccount(instance, accountIdentifiers) {\n  if (!accountIdentifiers || !accountIdentifiers.homeAccountId && !accountIdentifiers.localAccountId && !accountIdentifiers.username) {\n    // If no account identifiers are provided, return active account\n    return instance.getActiveAccount();\n  }\n  return getAccountByIdentifiers(instance.getAllAccounts(), accountIdentifiers);\n}\n/**\r\n * Given 1 or more accountIdentifiers, returns the Account object if the user is signed-in\r\n * @param accountIdentifiers\r\n */\nfunction useAccount(accountIdentifiers) {\n  const {\n    instance,\n    inProgress,\n    logger\n  } = useMsal();\n  const [account, setAccount] = useState(() => getAccount(instance, accountIdentifiers));\n  useEffect(() => {\n    setAccount(currentAccount => {\n      const nextAccount = getAccount(instance, accountIdentifiers);\n      if (!AccountEntity.accountInfoIsEqual(currentAccount, nextAccount, true)) {\n        logger.info(\"useAccount - Updating account\");\n        return nextAccount;\n      }\n      return currentAccount;\n    });\n  }, [inProgress, accountIdentifiers, instance, logger]);\n  return account;\n}\nexport { useAccount };","map":{"version":3,"names":["getAccount","instance","accountIdentifiers","homeAccountId","localAccountId","username","getActiveAccount","getAccountByIdentifiers","getAllAccounts","useAccount","inProgress","logger","useMsal","account","setAccount","useState","useEffect","currentAccount","nextAccount","AccountEntity","accountInfoIsEqual","info"],"sources":["C:\\bytepantry\\frontend\\node_modules\\@azure\\msal-react\\src\\hooks\\useAccount.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n    AccountInfo,\r\n    IPublicClientApplication,\r\n    AccountEntity,\r\n} from \"@azure/msal-browser\";\r\nimport { useMsal } from \"./useMsal.js\";\r\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers.js\";\r\nimport { getAccountByIdentifiers } from \"../utils/utilities.js\";\r\n\r\nfunction getAccount(\r\n    instance: IPublicClientApplication,\r\n    accountIdentifiers?: AccountIdentifiers\r\n): AccountInfo | null {\r\n    if (\r\n        !accountIdentifiers ||\r\n        (!accountIdentifiers.homeAccountId &&\r\n            !accountIdentifiers.localAccountId &&\r\n            !accountIdentifiers.username)\r\n    ) {\r\n        // If no account identifiers are provided, return active account\r\n        return instance.getActiveAccount();\r\n    }\r\n\r\n    return getAccountByIdentifiers(\r\n        instance.getAllAccounts(),\r\n        accountIdentifiers\r\n    );\r\n}\r\n\r\n/**\r\n * Given 1 or more accountIdentifiers, returns the Account object if the user is signed-in\r\n * @param accountIdentifiers\r\n */\r\nexport function useAccount(\r\n    accountIdentifiers?: AccountIdentifiers\r\n): AccountInfo | null {\r\n    const { instance, inProgress, logger } = useMsal();\r\n\r\n    const [account, setAccount] = useState<AccountInfo | null>(() =>\r\n        getAccount(instance, accountIdentifiers)\r\n    );\r\n\r\n    useEffect(() => {\r\n        setAccount((currentAccount: AccountInfo | null) => {\r\n            const nextAccount = getAccount(instance, accountIdentifiers);\r\n            if (\r\n                !AccountEntity.accountInfoIsEqual(\r\n                    currentAccount,\r\n                    nextAccount,\r\n                    true\r\n                )\r\n            ) {\r\n                logger.info(\"useAccount - Updating account\");\r\n                return nextAccount;\r\n            }\r\n\r\n            return currentAccount;\r\n        });\r\n    }, [inProgress, accountIdentifiers, instance, logger]);\r\n\r\n    return account;\r\n}\r\n"],"mappings":";;;;;;;;AAAA;;;AAGG;AAYH,SAASA,UAAUA,CACfC,QAAkC,EAClCC,kBAAuC;EAEvC,IACI,CAACA,kBAAkB,IAClB,CAACA,kBAAkB,CAACC,aAAa,IAC9B,CAACD,kBAAkB,CAACE,cAAc,IAClC,CAACF,kBAAkB,CAACG,QAAS,EACnC;;IAEE,OAAOJ,QAAQ,CAACK,gBAAgB,EAAE;EACrC;EAED,OAAOC,uBAAuB,CAC1BN,QAAQ,CAACO,cAAc,EAAE,EACzBN,kBAAkB,CACrB;AACL;AAEA;;;AAGG;AACG,SAAUO,UAAUA,CACtBP,kBAAuC;EAEvC,MAAM;IAAED,QAAQ;IAAES,UAAU;IAAEC;EAAM,CAAE,GAAGC,OAAO,EAAE;EAElD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGC,QAAQ,CAAqB,MACvDf,UAAU,CAACC,QAAQ,EAAEC,kBAAkB,CAAC,CAC3C;EAEDc,SAAS,CAAC,MAAK;IACXF,UAAU,CAAEG,cAAkC,IAAI;MAC9C,MAAMC,WAAW,GAAGlB,UAAU,CAACC,QAAQ,EAAEC,kBAAkB,CAAC;MAC5D,IACI,CAACiB,aAAa,CAACC,kBAAkB,CAC7BH,cAAc,EACdC,WAAW,EACX,IAAI,CACP,EACH;QACEP,MAAM,CAACU,IAAI,CAAC,+BAA+B,CAAC;QAC5C,OAAOH,WAAW;MACrB;MAED,OAAOD,cAAc;IACzB,CAAC,CAAC;GACL,EAAE,CAACP,UAAU,EAAER,kBAAkB,EAAED,QAAQ,EAAEU,MAAM,CAAC,CAAC;EAEtD,OAAOE,OAAO;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}