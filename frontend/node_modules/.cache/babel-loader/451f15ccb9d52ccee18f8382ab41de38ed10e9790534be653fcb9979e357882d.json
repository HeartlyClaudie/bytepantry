{"ast":null,"code":"/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { buildClientConfiguration } from '../config/ClientConfiguration.mjs';\nimport { Logger } from '../logger/Logger.mjs';\nimport { HeaderNames, Constants } from '../utils/Constants.mjs';\nimport { name, version } from '../packageMetadata.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.mjs';\nimport { createDiscoveredInstance } from '../authority/AuthorityFactory.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { ThrottlingUtils } from '../network/ThrottlingUtils.mjs';\nimport { AuthError } from '../error/AuthError.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { NetworkError } from '../error/NetworkError.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\nimport { networkError } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n * @internal\r\n */\nclass BaseClient {\n  constructor(configuration, performanceClient) {\n    // Set the configuration\n    this.config = buildClientConfiguration(configuration);\n    // Initialize the logger\n    this.logger = new Logger(this.config.loggerOptions, name, version);\n    // Initialize crypto\n    this.cryptoUtils = this.config.cryptoInterface;\n    // Initialize storage interface\n    this.cacheManager = this.config.storageInterface;\n    // Set the network interface\n    this.networkClient = this.config.networkInterface;\n    // Set TelemetryManager\n    this.serverTelemetryManager = this.config.serverTelemetryManager;\n    // set Authority\n    this.authority = this.config.authOptions.authority;\n    // set performance telemetry client\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Creates default headers for requests to token endpoint\r\n   */\n  createTokenRequestHeaders(ccsCred) {\n    const headers = {};\n    headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n    if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n      switch (ccsCred.type) {\n        case CcsCredentialType.HOME_ACCOUNT_ID:\n          try {\n            const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n            headers[HeaderNames.CCS_HEADER] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n          break;\n        case CcsCredentialType.UPN:\n          headers[HeaderNames.CCS_HEADER] = `UPN: ${ccsCred.credential}`;\n          break;\n      }\n    }\n    return headers;\n  }\n  /**\r\n   * Http post to token endpoint\r\n   * @param tokenEndpoint\r\n   * @param queryString\r\n   * @param headers\r\n   * @param thumbprint\r\n   */\n  async executePostToTokenEndpoint(tokenEndpoint, queryString, headers, thumbprint, correlationId, queuedEvent) {\n    if (queuedEvent) {\n      this.performanceClient?.addQueueMeasurement(queuedEvent, correlationId);\n    }\n    const response = await this.sendPostRequest(thumbprint, tokenEndpoint, {\n      body: queryString,\n      headers: headers\n    }, correlationId);\n    if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\n      // Telemetry data successfully logged by server, clear Telemetry cache\n      this.config.serverTelemetryManager.clearTelemetryCache();\n    }\n    return response;\n  }\n  /**\r\n   * Wraps sendPostRequestAsync with necessary preflight and postflight logic\r\n   * @param thumbprint - Request thumbprint for throttling\r\n   * @param tokenEndpoint - Endpoint to make the POST to\r\n   * @param options - Body and Headers to include on the POST request\r\n   * @param correlationId - CorrelationId for telemetry\r\n   */\n  async sendPostRequest(thumbprint, tokenEndpoint, options, correlationId) {\n    ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\n    let response;\n    try {\n      response = await invokeAsync(this.networkClient.sendPostRequestAsync.bind(this.networkClient), PerformanceEvents.NetworkClientSendPostRequestAsync, this.logger, this.performanceClient, correlationId)(tokenEndpoint, options);\n      const responseHeaders = response.headers || {};\n      this.performanceClient?.addFields({\n        refreshTokenSize: response.body.refresh_token?.length || 0,\n        httpVerToken: responseHeaders[HeaderNames.X_MS_HTTP_VERSION] || \"\",\n        requestId: responseHeaders[HeaderNames.X_MS_REQUEST_ID] || \"\"\n      }, correlationId);\n    } catch (e) {\n      if (e instanceof NetworkError) {\n        const responseHeaders = e.responseHeaders;\n        if (responseHeaders) {\n          this.performanceClient?.addFields({\n            httpVerToken: responseHeaders[HeaderNames.X_MS_HTTP_VERSION] || \"\",\n            requestId: responseHeaders[HeaderNames.X_MS_REQUEST_ID] || \"\",\n            contentTypeHeader: responseHeaders[HeaderNames.CONTENT_TYPE] || undefined,\n            contentLengthHeader: responseHeaders[HeaderNames.CONTENT_LENGTH] || undefined,\n            httpStatus: e.httpStatus\n          }, correlationId);\n        }\n        throw e.error;\n      }\n      if (e instanceof AuthError) {\n        throw e;\n      } else {\n        throw createClientAuthError(networkError);\n      }\n    }\n    ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\n    return response;\n  }\n  /**\r\n   * Updates the authority object of the client. Endpoint discovery must be completed.\r\n   * @param updatedAuthority\r\n   */\n  async updateAuthority(cloudInstanceHostname, correlationId) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, correlationId);\n    const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${this.authority.tenant}/`;\n    const cloudInstanceAuthority = await createDiscoveredInstance(cloudInstanceAuthorityUri, this.networkClient, this.cacheManager, this.authority.options, this.logger, correlationId, this.performanceClient);\n    this.authority = cloudInstanceAuthority;\n  }\n  /**\r\n   * Creates query string for the /token request\r\n   * @param request\r\n   */\n  createTokenQueryParameters(request) {\n    const parameterBuilder = new RequestParameterBuilder(request.correlationId, this.performanceClient);\n    if (request.embeddedClientId) {\n      parameterBuilder.addBrokerParameters({\n        brokerClientId: this.config.authOptions.clientId,\n        brokerRedirectUri: this.config.authOptions.redirectUri\n      });\n    }\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n    parameterBuilder.addCorrelationId(request.correlationId);\n    return parameterBuilder.createQueryString();\n  }\n}\nexport { BaseClient };","map":{"version":3,"names":["BaseClient","constructor","configuration","performanceClient","config","buildClientConfiguration","logger","Logger","loggerOptions","name","version","cryptoUtils","cryptoInterface","cacheManager","storageInterface","networkClient","networkInterface","serverTelemetryManager","authority","authOptions","createTokenRequestHeaders","ccsCred","headers","HeaderNames","CONTENT_TYPE","Constants","URL_FORM_CONTENT_TYPE","systemOptions","preventCorsPreflight","type","CcsCredentialType","HOME_ACCOUNT_ID","clientInfo","buildClientInfoFromHomeAccountId","credential","CCS_HEADER","uid","utid","e","verbose","UPN","executePostToTokenEndpoint","tokenEndpoint","queryString","thumbprint","correlationId","queuedEvent","addQueueMeasurement","response","sendPostRequest","body","status","clearTelemetryCache","options","ThrottlingUtils","preProcess","invokeAsync","sendPostRequestAsync","bind","PerformanceEvents","NetworkClientSendPostRequestAsync","responseHeaders","addFields","refreshTokenSize","refresh_token","length","httpVerToken","X_MS_HTTP_VERSION","requestId","X_MS_REQUEST_ID","NetworkError","contentTypeHeader","undefined","contentLengthHeader","CONTENT_LENGTH","httpStatus","error","AuthError","createClientAuthError","networkError","postProcess","updateAuthority","cloudInstanceHostname","UpdateTokenEndpointAuthority","cloudInstanceAuthorityUri","tenant","cloudInstanceAuthority","createDiscoveredInstance","createTokenQueryParameters","request","parameterBuilder","RequestParameterBuilder","embeddedClientId","addBrokerParameters","brokerClientId","clientId","brokerRedirectUri","redirectUri","tokenQueryParameters","addExtraQueryParameters","addCorrelationId","createQueryString"],"sources":["C:\\bytepantry\\frontend\\node_modules\\@azure\\msal-common\\src\\client\\BaseClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    ClientConfiguration,\r\n    buildClientConfiguration,\r\n    CommonClientConfiguration,\r\n} from \"../config/ClientConfiguration.js\";\r\nimport {\r\n    INetworkModule,\r\n    NetworkRequestOptions,\r\n} from \"../network/INetworkModule.js\";\r\nimport { NetworkResponse } from \"../network/NetworkResponse.js\";\r\nimport { ICrypto } from \"../crypto/ICrypto.js\";\r\nimport { Authority } from \"../authority/Authority.js\";\r\nimport { Logger } from \"../logger/Logger.js\";\r\nimport { Constants, HeaderNames } from \"../utils/Constants.js\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse.js\";\r\nimport { CacheManager } from \"../cache/CacheManager.js\";\r\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager.js\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint.js\";\r\nimport { version, name } from \"../packageMetadata.js\";\r\nimport { CcsCredential, CcsCredentialType } from \"../account/CcsCredential.js\";\r\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo.js\";\r\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient.js\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder.js\";\r\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest.js\";\r\nimport { createDiscoveredInstance } from \"../authority/AuthorityFactory.js\";\r\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent.js\";\r\nimport { ThrottlingUtils } from \"../network/ThrottlingUtils.js\";\r\nimport { AuthError } from \"../error/AuthError.js\";\r\nimport {\r\n    ClientAuthErrorCodes,\r\n    createClientAuthError,\r\n} from \"../error/ClientAuthError.js\";\r\nimport { NetworkError } from \"../error/NetworkError.js\";\r\nimport { invokeAsync } from \"../utils/FunctionWrappers.js\";\r\n\r\n/**\r\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n * @internal\r\n */\r\nexport abstract class BaseClient {\r\n    // Logger object\r\n    public logger: Logger;\r\n\r\n    // Application config\r\n    protected config: CommonClientConfiguration;\r\n\r\n    // Crypto Interface\r\n    protected cryptoUtils: ICrypto;\r\n\r\n    // Storage Interface\r\n    protected cacheManager: CacheManager;\r\n\r\n    // Network Interface\r\n    protected networkClient: INetworkModule;\r\n\r\n    // Server Telemetry Manager\r\n    protected serverTelemetryManager: ServerTelemetryManager | null;\r\n\r\n    // Default authority object\r\n    public authority: Authority;\r\n\r\n    // Performance telemetry client\r\n    protected performanceClient?: IPerformanceClient;\r\n\r\n    protected constructor(\r\n        configuration: ClientConfiguration,\r\n        performanceClient?: IPerformanceClient\r\n    ) {\r\n        // Set the configuration\r\n        this.config = buildClientConfiguration(configuration);\r\n\r\n        // Initialize the logger\r\n        this.logger = new Logger(this.config.loggerOptions, name, version);\r\n\r\n        // Initialize crypto\r\n        this.cryptoUtils = this.config.cryptoInterface;\r\n\r\n        // Initialize storage interface\r\n        this.cacheManager = this.config.storageInterface;\r\n\r\n        // Set the network interface\r\n        this.networkClient = this.config.networkInterface;\r\n\r\n        // Set TelemetryManager\r\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\r\n\r\n        // set Authority\r\n        this.authority = this.config.authOptions.authority;\r\n\r\n        // set performance telemetry client\r\n        this.performanceClient = performanceClient;\r\n    }\r\n\r\n    /**\r\n     * Creates default headers for requests to token endpoint\r\n     */\r\n    protected createTokenRequestHeaders(\r\n        ccsCred?: CcsCredential\r\n    ): Record<string, string> {\r\n        const headers: Record<string, string> = {};\r\n        headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\r\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n            switch (ccsCred.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(\r\n                            ccsCred.credential\r\n                        );\r\n                        headers[\r\n                            HeaderNames.CCS_HEADER\r\n                        ] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\r\n                    } catch (e) {\r\n                        this.logger.verbose(\r\n                            \"Could not parse home account ID for CCS Header: \" +\r\n                                e\r\n                        );\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    headers[\r\n                        HeaderNames.CCS_HEADER\r\n                    ] = `UPN: ${ccsCred.credential}`;\r\n                    break;\r\n            }\r\n        }\r\n        return headers;\r\n    }\r\n\r\n    /**\r\n     * Http post to token endpoint\r\n     * @param tokenEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     * @param thumbprint\r\n     */\r\n    protected async executePostToTokenEndpoint(\r\n        tokenEndpoint: string,\r\n        queryString: string,\r\n        headers: Record<string, string>,\r\n        thumbprint: RequestThumbprint,\r\n        correlationId: string,\r\n        queuedEvent?: string\r\n    ): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\r\n        if (queuedEvent) {\r\n            this.performanceClient?.addQueueMeasurement(\r\n                queuedEvent,\r\n                correlationId\r\n            );\r\n        }\r\n\r\n        const response =\r\n            await this.sendPostRequest<ServerAuthorizationTokenResponse>(\r\n                thumbprint,\r\n                tokenEndpoint,\r\n                { body: queryString, headers: headers },\r\n                correlationId\r\n            );\r\n\r\n        if (\r\n            this.config.serverTelemetryManager &&\r\n            response.status < 500 &&\r\n            response.status !== 429\r\n        ) {\r\n            // Telemetry data successfully logged by server, clear Telemetry cache\r\n            this.config.serverTelemetryManager.clearTelemetryCache();\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Wraps sendPostRequestAsync with necessary preflight and postflight logic\r\n     * @param thumbprint - Request thumbprint for throttling\r\n     * @param tokenEndpoint - Endpoint to make the POST to\r\n     * @param options - Body and Headers to include on the POST request\r\n     * @param correlationId - CorrelationId for telemetry\r\n     */\r\n    async sendPostRequest<T extends ServerAuthorizationTokenResponse>(\r\n        thumbprint: RequestThumbprint,\r\n        tokenEndpoint: string,\r\n        options: NetworkRequestOptions,\r\n        correlationId: string\r\n    ): Promise<NetworkResponse<T>> {\r\n        ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\r\n\r\n        let response;\r\n        try {\r\n            response = await invokeAsync(\r\n                this.networkClient.sendPostRequestAsync.bind(\r\n                    this.networkClient\r\n                )<T>,\r\n                PerformanceEvents.NetworkClientSendPostRequestAsync,\r\n                this.logger,\r\n                this.performanceClient,\r\n                correlationId\r\n            )(tokenEndpoint, options);\r\n            const responseHeaders = response.headers || {};\r\n            this.performanceClient?.addFields(\r\n                {\r\n                    refreshTokenSize: response.body.refresh_token?.length || 0,\r\n                    httpVerToken:\r\n                        responseHeaders[HeaderNames.X_MS_HTTP_VERSION] || \"\",\r\n                    requestId:\r\n                        responseHeaders[HeaderNames.X_MS_REQUEST_ID] || \"\",\r\n                },\r\n                correlationId\r\n            );\r\n        } catch (e) {\r\n            if (e instanceof NetworkError) {\r\n                const responseHeaders = e.responseHeaders;\r\n                if (responseHeaders) {\r\n                    this.performanceClient?.addFields(\r\n                        {\r\n                            httpVerToken:\r\n                                responseHeaders[\r\n                                    HeaderNames.X_MS_HTTP_VERSION\r\n                                ] || \"\",\r\n                            requestId:\r\n                                responseHeaders[HeaderNames.X_MS_REQUEST_ID] ||\r\n                                \"\",\r\n                            contentTypeHeader:\r\n                                responseHeaders[HeaderNames.CONTENT_TYPE] ||\r\n                                undefined,\r\n                            contentLengthHeader:\r\n                                responseHeaders[HeaderNames.CONTENT_LENGTH] ||\r\n                                undefined,\r\n                            httpStatus: e.httpStatus,\r\n                        },\r\n                        correlationId\r\n                    );\r\n                }\r\n                throw e.error;\r\n            }\r\n            if (e instanceof AuthError) {\r\n                throw e;\r\n            } else {\r\n                throw createClientAuthError(ClientAuthErrorCodes.networkError);\r\n            }\r\n        }\r\n\r\n        ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\r\n\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Updates the authority object of the client. Endpoint discovery must be completed.\r\n     * @param updatedAuthority\r\n     */\r\n    async updateAuthority(\r\n        cloudInstanceHostname: string,\r\n        correlationId: string\r\n    ): Promise<void> {\r\n        this.performanceClient?.addQueueMeasurement(\r\n            PerformanceEvents.UpdateTokenEndpointAuthority,\r\n            correlationId\r\n        );\r\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${this.authority.tenant}/`;\r\n        const cloudInstanceAuthority = await createDiscoveredInstance(\r\n            cloudInstanceAuthorityUri,\r\n            this.networkClient,\r\n            this.cacheManager,\r\n            this.authority.options,\r\n            this.logger,\r\n            correlationId,\r\n            this.performanceClient\r\n        );\r\n        this.authority = cloudInstanceAuthority;\r\n    }\r\n\r\n    /**\r\n     * Creates query string for the /token request\r\n     * @param request\r\n     */\r\n    createTokenQueryParameters(request: BaseAuthRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder(\r\n            request.correlationId,\r\n            this.performanceClient\r\n        );\r\n\r\n        if (request.embeddedClientId) {\r\n            parameterBuilder.addBrokerParameters({\r\n                brokerClientId: this.config.authOptions.clientId,\r\n                brokerRedirectUri: this.config.authOptions.redirectUri,\r\n            });\r\n        }\r\n\r\n        if (request.tokenQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(\r\n                request.tokenQueryParameters\r\n            );\r\n        }\r\n\r\n        parameterBuilder.addCorrelationId(request.correlationId);\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}