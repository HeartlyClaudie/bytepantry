{"ast":null,"code":"/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { Authority, formatAuthorityUri } from './Authority.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\nimport { endpointResolutionError } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Create an authority object of the correct type based on the url\r\n * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n *\r\n * Also performs endpoint discovery.\r\n *\r\n * @param authorityUri\r\n * @param networkClient\r\n * @param protocolMode\r\n * @internal\r\n */\nasync function createDiscoveredInstance(authorityUri, networkClient, cacheManager, authorityOptions, logger, correlationId, performanceClient) {\n  performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);\n  const authorityUriFinal = Authority.transformCIAMAuthority(formatAuthorityUri(authorityUri));\n  // Initialize authority and perform discovery endpoint check.\n  const acquireTokenAuthority = new Authority(authorityUriFinal, networkClient, cacheManager, authorityOptions, logger, correlationId, performanceClient);\n  try {\n    await invokeAsync(acquireTokenAuthority.resolveEndpointsAsync.bind(acquireTokenAuthority), PerformanceEvents.AuthorityResolveEndpointsAsync, logger, performanceClient, correlationId)();\n    return acquireTokenAuthority;\n  } catch (e) {\n    throw createClientAuthError(endpointResolutionError);\n  }\n}\nexport { createDiscoveredInstance };","map":{"version":3,"names":["createDiscoveredInstance","authorityUri","networkClient","cacheManager","authorityOptions","logger","correlationId","performanceClient","addQueueMeasurement","PerformanceEvents","AuthorityFactoryCreateDiscoveredInstance","authorityUriFinal","Authority","transformCIAMAuthority","formatAuthorityUri","acquireTokenAuthority","invokeAsync","resolveEndpointsAsync","bind","AuthorityResolveEndpointsAsync","e","createClientAuthError","endpointResolutionError"],"sources":["C:\\bytepantry\\frontend\\node_modules\\@azure\\msal-common\\src\\authority\\AuthorityFactory.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Authority, formatAuthorityUri } from \"./Authority.js\";\r\nimport { INetworkModule } from \"../network/INetworkModule.js\";\r\nimport {\r\n    createClientAuthError,\r\n    ClientAuthErrorCodes,\r\n} from \"../error/ClientAuthError.js\";\r\nimport { ICacheManager } from \"../cache/interface/ICacheManager.js\";\r\nimport { AuthorityOptions } from \"./AuthorityOptions.js\";\r\nimport { Logger } from \"../logger/Logger.js\";\r\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient.js\";\r\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent.js\";\r\nimport { invokeAsync } from \"../utils/FunctionWrappers.js\";\r\n\r\n/**\r\n * Create an authority object of the correct type based on the url\r\n * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n *\r\n * Also performs endpoint discovery.\r\n *\r\n * @param authorityUri\r\n * @param networkClient\r\n * @param protocolMode\r\n * @internal\r\n */\r\nexport async function createDiscoveredInstance(\r\n    authorityUri: string,\r\n    networkClient: INetworkModule,\r\n    cacheManager: ICacheManager,\r\n    authorityOptions: AuthorityOptions,\r\n    logger: Logger,\r\n    correlationId: string,\r\n    performanceClient?: IPerformanceClient\r\n): Promise<Authority> {\r\n    performanceClient?.addQueueMeasurement(\r\n        PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance,\r\n        correlationId\r\n    );\r\n    const authorityUriFinal = Authority.transformCIAMAuthority(\r\n        formatAuthorityUri(authorityUri)\r\n    );\r\n\r\n    // Initialize authority and perform discovery endpoint check.\r\n    const acquireTokenAuthority: Authority = new Authority(\r\n        authorityUriFinal,\r\n        networkClient,\r\n        cacheManager,\r\n        authorityOptions,\r\n        logger,\r\n        correlationId,\r\n        performanceClient\r\n    );\r\n\r\n    try {\r\n        await invokeAsync(\r\n            acquireTokenAuthority.resolveEndpointsAsync.bind(\r\n                acquireTokenAuthority\r\n            ),\r\n            PerformanceEvents.AuthorityResolveEndpointsAsync,\r\n            logger,\r\n            performanceClient,\r\n            correlationId\r\n        )();\r\n        return acquireTokenAuthority;\r\n    } catch (e) {\r\n        throw createClientAuthError(\r\n            ClientAuthErrorCodes.endpointResolutionError\r\n        );\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;AAAA;;;AAGG;AAeH;;;;;;;;;;AAUG;AACI,eAAeA,wBAAwBA,CAC1CC,YAAoB,EACpBC,aAA6B,EAC7BC,YAA2B,EAC3BC,gBAAkC,EAClCC,MAAc,EACdC,aAAqB,EACrBC,iBAAsC;EAEtCA,iBAAiB,EAAEC,mBAAmB,CAClCC,iBAAiB,CAACC,wCAAwC,EAC1DJ,aAAa,CAChB;EACD,MAAMK,iBAAiB,GAAGC,SAAS,CAACC,sBAAsB,CACtDC,kBAAkB,CAACb,YAAY,CAAC,CACnC;;EAGD,MAAMc,qBAAqB,GAAc,IAAIH,SAAS,CAClDD,iBAAiB,EACjBT,aAAa,EACbC,YAAY,EACZC,gBAAgB,EAChBC,MAAM,EACNC,aAAa,EACbC,iBAAiB,CACpB;EAED,IAAI;IACA,MAAMS,WAAW,CACbD,qBAAqB,CAACE,qBAAqB,CAACC,IAAI,CAC5CH,qBAAqB,CACxB,EACDN,iBAAiB,CAACU,8BAA8B,EAChDd,MAAM,EACNE,iBAAiB,EACjBD,aAAa,CAChB,EAAE;IACH,OAAOS,qBAAqB;EAC/B,EAAC,OAAOK,CAAC,EAAE;IACR,MAAMC,qBAAqB,CACvBC,uBAA4C,CAC/C;EACJ;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}