{"ast":null,"code":"/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { Logger } from '@azure/msal-common/browser';\nimport { EventType } from './EventType.mjs';\nimport { createGuid } from '../utils/BrowserUtils.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst BROADCAST_CHANNEL_NAME = \"msal.broadcast.event\";\nclass EventHandler {\n  constructor(logger) {\n    this.eventCallbacks = new Map();\n    this.logger = logger || new Logger({});\n    this.broadcastChannel = new BroadcastChannel(BROADCAST_CHANNEL_NAME);\n    this.invokeCrossTabCallbacks = this.invokeCrossTabCallbacks.bind(this);\n  }\n  /**\r\n   * Adds event callbacks to array\r\n   * @param callback - callback to be invoked when an event is raised\r\n   * @param eventTypes - list of events that this callback will be invoked for, if not provided callback will be invoked for all events\r\n   * @param callbackId - Identifier for the callback, used to locate and remove the callback when no longer required\r\n   */\n  addEventCallback(callback, eventTypes, callbackId) {\n    if (typeof window !== \"undefined\") {\n      const id = callbackId || createGuid();\n      if (this.eventCallbacks.has(id)) {\n        this.logger.error(`Event callback with id: ${id} is already registered. Please provide a unique id or remove the existing callback and try again.`);\n        return null;\n      }\n      this.eventCallbacks.set(id, [callback, eventTypes || []]);\n      this.logger.verbose(`Event callback registered with id: ${id}`);\n      return id;\n    }\n    return null;\n  }\n  /**\r\n   * Removes callback with provided id from callback array\r\n   * @param callbackId\r\n   */\n  removeEventCallback(callbackId) {\n    this.eventCallbacks.delete(callbackId);\n    this.logger.verbose(`Event callback ${callbackId} removed.`);\n  }\n  /**\r\n   * Emits events by calling callback with event message\r\n   * @param eventType\r\n   * @param interactionType\r\n   * @param payload\r\n   * @param error\r\n   */\n  emitEvent(eventType, interactionType, payload, error) {\n    const message = {\n      eventType: eventType,\n      interactionType: interactionType || null,\n      payload: payload || null,\n      error: error || null,\n      timestamp: Date.now()\n    };\n    switch (eventType) {\n      case EventType.ACCOUNT_ADDED:\n      case EventType.ACCOUNT_REMOVED:\n      case EventType.ACTIVE_ACCOUNT_CHANGED:\n        // Send event to other open tabs / MSAL instances on same domain\n        this.broadcastChannel.postMessage(message);\n        break;\n      default:\n        // Emit event to callbacks registered in this instance\n        this.invokeCallbacks(message);\n        break;\n    }\n  }\n  /**\r\n   * Invoke registered callbacks\r\n   * @param message\r\n   */\n  invokeCallbacks(message) {\n    this.eventCallbacks.forEach(([callback, eventTypes], callbackId) => {\n      if (eventTypes.length === 0 || eventTypes.includes(message.eventType)) {\n        this.logger.verbose(`Emitting event to callback ${callbackId}: ${message.eventType}`);\n        callback.apply(null, [message]);\n      }\n    });\n  }\n  /**\r\n   * Wrapper around invokeCallbacks to handle broadcast events received from other tabs/instances\r\n   * @param event\r\n   */\n  invokeCrossTabCallbacks(event) {\n    const message = event.data;\n    this.invokeCallbacks(message);\n  }\n  /**\r\n   * Listen for events broadcasted from other tabs/instances\r\n   */\n  subscribeCrossTab() {\n    this.broadcastChannel.addEventListener(\"message\", this.invokeCrossTabCallbacks);\n  }\n  /**\r\n   * Unsubscribe from broadcast events\r\n   */\n  unsubscribeCrossTab() {\n    this.broadcastChannel.removeEventListener(\"message\", this.invokeCrossTabCallbacks);\n  }\n}\nexport { EventHandler };","map":{"version":3,"names":["BROADCAST_CHANNEL_NAME","EventHandler","constructor","logger","eventCallbacks","Map","Logger","broadcastChannel","BroadcastChannel","invokeCrossTabCallbacks","bind","addEventCallback","callback","eventTypes","callbackId","window","id","createGuid","has","error","set","verbose","removeEventCallback","delete","emitEvent","eventType","interactionType","payload","message","timestamp","Date","now","EventType","ACCOUNT_ADDED","ACCOUNT_REMOVED","ACTIVE_ACCOUNT_CHANGED","postMessage","invokeCallbacks","forEach","length","includes","apply","event","data","subscribeCrossTab","addEventListener","unsubscribeCrossTab","removeEventListener"],"sources":["C:\\bytepantry\\frontend\\node_modules\\@azure\\msal-browser\\src\\event\\EventHandler.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Logger } from \"@azure/msal-common/browser\";\r\nimport { InteractionType } from \"../utils/BrowserConstants.js\";\r\nimport {\r\n    EventCallbackFunction,\r\n    EventError,\r\n    EventMessage,\r\n    EventPayload,\r\n} from \"./EventMessage.js\";\r\nimport { EventType } from \"./EventType.js\";\r\nimport { createGuid } from \"../utils/BrowserUtils.js\";\r\n\r\nconst BROADCAST_CHANNEL_NAME = \"msal.broadcast.event\";\r\n\r\nexport class EventHandler {\r\n    // Callback for subscribing to events\r\n    private eventCallbacks: Map<\r\n        string,\r\n        [EventCallbackFunction, Array<EventType>]\r\n    >;\r\n    private logger: Logger;\r\n    private broadcastChannel: BroadcastChannel;\r\n\r\n    constructor(logger?: Logger) {\r\n        this.eventCallbacks = new Map();\r\n        this.logger = logger || new Logger({});\r\n        this.broadcastChannel = new BroadcastChannel(BROADCAST_CHANNEL_NAME);\r\n        this.invokeCrossTabCallbacks = this.invokeCrossTabCallbacks.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Adds event callbacks to array\r\n     * @param callback - callback to be invoked when an event is raised\r\n     * @param eventTypes - list of events that this callback will be invoked for, if not provided callback will be invoked for all events\r\n     * @param callbackId - Identifier for the callback, used to locate and remove the callback when no longer required\r\n     */\r\n    addEventCallback(\r\n        callback: EventCallbackFunction,\r\n        eventTypes?: Array<EventType>,\r\n        callbackId?: string\r\n    ): string | null {\r\n        if (typeof window !== \"undefined\") {\r\n            const id = callbackId || createGuid();\r\n            if (this.eventCallbacks.has(id)) {\r\n                this.logger.error(\r\n                    `Event callback with id: ${id} is already registered. Please provide a unique id or remove the existing callback and try again.`\r\n                );\r\n                return null;\r\n            }\r\n            this.eventCallbacks.set(id, [callback, eventTypes || []]);\r\n            this.logger.verbose(`Event callback registered with id: ${id}`);\r\n\r\n            return id;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Removes callback with provided id from callback array\r\n     * @param callbackId\r\n     */\r\n    removeEventCallback(callbackId: string): void {\r\n        this.eventCallbacks.delete(callbackId);\r\n        this.logger.verbose(`Event callback ${callbackId} removed.`);\r\n    }\r\n\r\n    /**\r\n     * Emits events by calling callback with event message\r\n     * @param eventType\r\n     * @param interactionType\r\n     * @param payload\r\n     * @param error\r\n     */\r\n    emitEvent(\r\n        eventType: EventType,\r\n        interactionType?: InteractionType,\r\n        payload?: EventPayload,\r\n        error?: EventError\r\n    ): void {\r\n        const message: EventMessage = {\r\n            eventType: eventType,\r\n            interactionType: interactionType || null,\r\n            payload: payload || null,\r\n            error: error || null,\r\n            timestamp: Date.now(),\r\n        };\r\n\r\n        switch (eventType) {\r\n            case EventType.ACCOUNT_ADDED:\r\n            case EventType.ACCOUNT_REMOVED:\r\n            case EventType.ACTIVE_ACCOUNT_CHANGED:\r\n                // Send event to other open tabs / MSAL instances on same domain\r\n                this.broadcastChannel.postMessage(message);\r\n                break;\r\n            default:\r\n                // Emit event to callbacks registered in this instance\r\n                this.invokeCallbacks(message);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Invoke registered callbacks\r\n     * @param message\r\n     */\r\n    private invokeCallbacks(message: EventMessage): void {\r\n        this.eventCallbacks.forEach(\r\n            (\r\n                [callback, eventTypes]: [\r\n                    EventCallbackFunction,\r\n                    Array<EventType>\r\n                ],\r\n                callbackId: string\r\n            ) => {\r\n                if (\r\n                    eventTypes.length === 0 ||\r\n                    eventTypes.includes(message.eventType)\r\n                ) {\r\n                    this.logger.verbose(\r\n                        `Emitting event to callback ${callbackId}: ${message.eventType}`\r\n                    );\r\n                    callback.apply(null, [message]);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Wrapper around invokeCallbacks to handle broadcast events received from other tabs/instances\r\n     * @param event\r\n     */\r\n    private invokeCrossTabCallbacks(event: MessageEvent): void {\r\n        const message = event.data as EventMessage;\r\n        this.invokeCallbacks(message);\r\n    }\r\n\r\n    /**\r\n     * Listen for events broadcasted from other tabs/instances\r\n     */\r\n    subscribeCrossTab(): void {\r\n        this.broadcastChannel.addEventListener(\r\n            \"message\",\r\n            this.invokeCrossTabCallbacks\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe from broadcast events\r\n     */\r\n    unsubscribeCrossTab(): void {\r\n        this.broadcastChannel.removeEventListener(\r\n            \"message\",\r\n            this.invokeCrossTabCallbacks\r\n        );\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}