{"ast":null,"code":"/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { AccountEntity, UrlString, ServerTelemetryManager, PerformanceEvents, Authority, invokeAsync, AuthorityFactory, createClientConfigurationError, ClientConfigurationErrorCodes } from '@azure/msal-common/browser';\nimport { version } from '../packageMetadata.mjs';\nimport { BrowserConstants } from '../utils/BrowserConstants.mjs';\nimport { getCurrentUri } from '../utils/BrowserUtils.mjs';\nimport { createNewGuid } from '../crypto/BrowserCrypto.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass BaseInteractionClient {\n  constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) {\n    this.config = config;\n    this.browserStorage = storageImpl;\n    this.browserCrypto = browserCrypto;\n    this.networkClient = this.config.system.networkClient;\n    this.eventHandler = eventHandler;\n    this.navigationClient = navigationClient;\n    this.nativeMessageHandler = nativeMessageHandler;\n    this.correlationId = correlationId || createNewGuid();\n    this.logger = logger.clone(BrowserConstants.MSAL_SKU, version, this.correlationId);\n    this.performanceClient = performanceClient;\n  }\n  async clearCacheOnLogout(account) {\n    if (account) {\n      if (AccountEntity.accountInfoIsEqual(account, this.browserStorage.getActiveAccount(), false)) {\n        this.logger.verbose(\"Setting active account to null\");\n        this.browserStorage.setActiveAccount(null);\n      }\n      // Clear given account.\n      try {\n        await this.browserStorage.removeAccount(AccountEntity.generateAccountCacheKey(account));\n        this.logger.verbose(\"Cleared cache items belonging to the account provided in the logout request.\");\n      } catch (error) {\n        this.logger.error(\"Account provided in logout request was not found. Local cache unchanged.\");\n      }\n    } else {\n      try {\n        this.logger.verbose(\"No account provided in logout request, clearing all cache items.\", this.correlationId);\n        // Clear all accounts and tokens\n        await this.browserStorage.clear();\n        // Clear any stray keys from IndexedDB\n        await this.browserCrypto.clearKeystore();\n      } catch (e) {\n        this.logger.error(\"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\");\n      }\n    }\n  }\n  /**\r\n   *\r\n   * Use to get the redirect uri configured in MSAL or null.\r\n   * @param requestRedirectUri\r\n   * @returns Redirect URL\r\n   *\r\n   */\n  getRedirectUri(requestRedirectUri) {\n    this.logger.verbose(\"getRedirectUri called\");\n    const redirectUri = requestRedirectUri || this.config.auth.redirectUri;\n    return UrlString.getAbsoluteUrl(redirectUri, getCurrentUri());\n  }\n  /**\r\n   *\r\n   * @param apiId\r\n   * @param correlationId\r\n   * @param forceRefresh\r\n   */\n  initializeServerTelemetryManager(apiId, forceRefresh) {\n    this.logger.verbose(\"initializeServerTelemetryManager called\");\n    const telemetryPayload = {\n      clientId: this.config.auth.clientId,\n      correlationId: this.correlationId,\n      apiId: apiId,\n      forceRefresh: forceRefresh || false,\n      wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\n      wrapperVer: this.browserStorage.getWrapperMetadata()[1]\n    };\n    return new ServerTelemetryManager(telemetryPayload, this.browserStorage);\n  }\n  /**\r\n   * Used to get a discovered version of the default authority.\r\n   * @param params {\r\n   *         requestAuthority?: string;\r\n   *         requestAzureCloudOptions?: AzureCloudOptions;\r\n   *         requestExtraQueryParameters?: StringDict;\r\n   *         account?: AccountInfo;\r\n   *        }\r\n   */\n  async getDiscoveredAuthority(params) {\n    const {\n      account\n    } = params;\n    const instanceAwareEQ = params.requestExtraQueryParameters && params.requestExtraQueryParameters.hasOwnProperty(\"instance_aware\") ? params.requestExtraQueryParameters[\"instance_aware\"] : undefined;\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n    const authorityOptions = {\n      protocolMode: this.config.auth.protocolMode,\n      OIDCOptions: this.config.auth.OIDCOptions,\n      knownAuthorities: this.config.auth.knownAuthorities,\n      cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n      authorityMetadata: this.config.auth.authorityMetadata,\n      skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n    };\n    // build authority string based on auth params, precedence - azureCloudInstance + tenant >> authority\n    const resolvedAuthority = params.requestAuthority || this.config.auth.authority;\n    const resolvedInstanceAware = instanceAwareEQ?.length ? instanceAwareEQ === \"true\" : this.config.auth.instanceAware;\n    const userAuthority = account && resolvedInstanceAware ? this.config.auth.authority.replace(UrlString.getDomainFromUrl(resolvedAuthority), account.environment) : resolvedAuthority;\n    // fall back to the authority from config\n    const builtAuthority = Authority.generateAuthority(userAuthority, params.requestAzureCloudOptions || this.config.auth.azureCloudOptions);\n    const discoveredAuthority = await invokeAsync(AuthorityFactory.createDiscoveredInstance, PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, this.logger, this.performanceClient, this.correlationId)(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger, this.correlationId, this.performanceClient);\n    if (account && !discoveredAuthority.isAlias(account.environment)) {\n      throw createClientConfigurationError(ClientConfigurationErrorCodes.authorityMismatch);\n    }\n    return discoveredAuthority;\n  }\n}\nexport { BaseInteractionClient };","map":{"version":3,"names":["BaseInteractionClient","constructor","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","performanceClient","nativeMessageHandler","correlationId","browserStorage","networkClient","system","createNewGuid","clone","BrowserConstants","MSAL_SKU","version","clearCacheOnLogout","account","AccountEntity","accountInfoIsEqual","getActiveAccount","verbose","setActiveAccount","removeAccount","generateAccountCacheKey","error","clear","clearKeystore","e","getRedirectUri","requestRedirectUri","redirectUri","auth","UrlString","getAbsoluteUrl","getCurrentUri","initializeServerTelemetryManager","apiId","forceRefresh","telemetryPayload","clientId","wrapperSKU","getWrapperMetadata","wrapperVer","ServerTelemetryManager","getDiscoveredAuthority","params","instanceAwareEQ","requestExtraQueryParameters","hasOwnProperty","undefined","addQueueMeasurement","PerformanceEvents","StandardInteractionClientGetDiscoveredAuthority","authorityOptions","protocolMode","OIDCOptions","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","skipAuthorityMetadataCache","resolvedAuthority","requestAuthority","authority","resolvedInstanceAware","length","instanceAware","userAuthority","replace","getDomainFromUrl","environment","builtAuthority","Authority","generateAuthority","requestAzureCloudOptions","azureCloudOptions","discoveredAuthority","invokeAsync","AuthorityFactory","createDiscoveredInstance","AuthorityFactoryCreateDiscoveredInstance","isAlias","createClientConfigurationError","ClientConfigurationErrorCodes","authorityMismatch"],"sources":["C:\\bytepantry\\frontend\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\BaseInteractionClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    ICrypto,\r\n    INetworkModule,\r\n    Logger,\r\n    AccountInfo,\r\n    AccountEntity,\r\n    UrlString,\r\n    ServerTelemetryManager,\r\n    ServerTelemetryRequest,\r\n    createClientConfigurationError,\r\n    ClientConfigurationErrorCodes,\r\n    Authority,\r\n    AuthorityOptions,\r\n    AuthorityFactory,\r\n    IPerformanceClient,\r\n    PerformanceEvents,\r\n    AzureCloudOptions,\r\n    invokeAsync,\r\n    StringDict,\r\n} from \"@azure/msal-common/browser\";\r\nimport { BrowserConfiguration } from \"../config/Configuration.js\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager.js\";\r\nimport { EventHandler } from \"../event/EventHandler.js\";\r\nimport { EndSessionRequest } from \"../request/EndSessionRequest.js\";\r\nimport { RedirectRequest } from \"../request/RedirectRequest.js\";\r\nimport { PopupRequest } from \"../request/PopupRequest.js\";\r\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest.js\";\r\nimport { version } from \"../packageMetadata.js\";\r\nimport { BrowserConstants } from \"../utils/BrowserConstants.js\";\r\nimport * as BrowserUtils from \"../utils/BrowserUtils.js\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient.js\";\r\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler.js\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult.js\";\r\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest.js\";\r\nimport { createNewGuid } from \"../crypto/BrowserCrypto.js\";\r\n\r\nexport abstract class BaseInteractionClient {\r\n    protected config: BrowserConfiguration;\r\n    protected browserStorage: BrowserCacheManager;\r\n    protected browserCrypto: ICrypto;\r\n    protected networkClient: INetworkModule;\r\n    protected logger: Logger;\r\n    protected eventHandler: EventHandler;\r\n    protected navigationClient: INavigationClient;\r\n    protected nativeMessageHandler: NativeMessageHandler | undefined;\r\n    protected correlationId: string;\r\n    protected performanceClient: IPerformanceClient;\r\n\r\n    constructor(\r\n        config: BrowserConfiguration,\r\n        storageImpl: BrowserCacheManager,\r\n        browserCrypto: ICrypto,\r\n        logger: Logger,\r\n        eventHandler: EventHandler,\r\n        navigationClient: INavigationClient,\r\n        performanceClient: IPerformanceClient,\r\n        nativeMessageHandler?: NativeMessageHandler,\r\n        correlationId?: string\r\n    ) {\r\n        this.config = config;\r\n        this.browserStorage = storageImpl;\r\n        this.browserCrypto = browserCrypto;\r\n        this.networkClient = this.config.system.networkClient;\r\n        this.eventHandler = eventHandler;\r\n        this.navigationClient = navigationClient;\r\n        this.nativeMessageHandler = nativeMessageHandler;\r\n        this.correlationId = correlationId || createNewGuid();\r\n        this.logger = logger.clone(\r\n            BrowserConstants.MSAL_SKU,\r\n            version,\r\n            this.correlationId\r\n        );\r\n        this.performanceClient = performanceClient;\r\n    }\r\n\r\n    abstract acquireToken(\r\n        request: RedirectRequest | PopupRequest | SsoSilentRequest\r\n    ): Promise<AuthenticationResult | void>;\r\n\r\n    abstract logout(\r\n        request: EndSessionRequest | ClearCacheRequest | undefined\r\n    ): Promise<void>;\r\n\r\n    protected async clearCacheOnLogout(\r\n        account?: AccountInfo | null\r\n    ): Promise<void> {\r\n        if (account) {\r\n            if (\r\n                AccountEntity.accountInfoIsEqual(\r\n                    account,\r\n                    this.browserStorage.getActiveAccount(),\r\n                    false\r\n                )\r\n            ) {\r\n                this.logger.verbose(\"Setting active account to null\");\r\n                this.browserStorage.setActiveAccount(null);\r\n            }\r\n            // Clear given account.\r\n            try {\r\n                await this.browserStorage.removeAccount(\r\n                    AccountEntity.generateAccountCacheKey(account)\r\n                );\r\n                this.logger.verbose(\r\n                    \"Cleared cache items belonging to the account provided in the logout request.\"\r\n                );\r\n            } catch (error) {\r\n                this.logger.error(\r\n                    \"Account provided in logout request was not found. Local cache unchanged.\"\r\n                );\r\n            }\r\n        } else {\r\n            try {\r\n                this.logger.verbose(\r\n                    \"No account provided in logout request, clearing all cache items.\",\r\n                    this.correlationId\r\n                );\r\n                // Clear all accounts and tokens\r\n                await this.browserStorage.clear();\r\n                // Clear any stray keys from IndexedDB\r\n                await this.browserCrypto.clearKeystore();\r\n            } catch (e) {\r\n                this.logger.error(\r\n                    \"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Use to get the redirect uri configured in MSAL or null.\r\n     * @param requestRedirectUri\r\n     * @returns Redirect URL\r\n     *\r\n     */\r\n    getRedirectUri(requestRedirectUri?: string): string {\r\n        this.logger.verbose(\"getRedirectUri called\");\r\n        const redirectUri = requestRedirectUri || this.config.auth.redirectUri;\r\n        return UrlString.getAbsoluteUrl(\r\n            redirectUri,\r\n            BrowserUtils.getCurrentUri()\r\n        );\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param apiId\r\n     * @param correlationId\r\n     * @param forceRefresh\r\n     */\r\n    protected initializeServerTelemetryManager(\r\n        apiId: number,\r\n        forceRefresh?: boolean\r\n    ): ServerTelemetryManager {\r\n        this.logger.verbose(\"initializeServerTelemetryManager called\");\r\n        const telemetryPayload: ServerTelemetryRequest = {\r\n            clientId: this.config.auth.clientId,\r\n            correlationId: this.correlationId,\r\n            apiId: apiId,\r\n            forceRefresh: forceRefresh || false,\r\n            wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\r\n            wrapperVer: this.browserStorage.getWrapperMetadata()[1],\r\n        };\r\n\r\n        return new ServerTelemetryManager(\r\n            telemetryPayload,\r\n            this.browserStorage\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Used to get a discovered version of the default authority.\r\n     * @param params {\r\n     *         requestAuthority?: string;\r\n     *         requestAzureCloudOptions?: AzureCloudOptions;\r\n     *         requestExtraQueryParameters?: StringDict;\r\n     *         account?: AccountInfo;\r\n     *        }\r\n     */\r\n    protected async getDiscoveredAuthority(params: {\r\n        requestAuthority?: string;\r\n        requestAzureCloudOptions?: AzureCloudOptions;\r\n        requestExtraQueryParameters?: StringDict;\r\n        account?: AccountInfo;\r\n    }): Promise<Authority> {\r\n        const { account } = params;\r\n        const instanceAwareEQ =\r\n            params.requestExtraQueryParameters &&\r\n            params.requestExtraQueryParameters.hasOwnProperty(\"instance_aware\")\r\n                ? params.requestExtraQueryParameters[\"instance_aware\"]\r\n                : undefined;\r\n\r\n        this.performanceClient.addQueueMeasurement(\r\n            PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,\r\n            this.correlationId\r\n        );\r\n        const authorityOptions: AuthorityOptions = {\r\n            protocolMode: this.config.auth.protocolMode,\r\n            OIDCOptions: this.config.auth.OIDCOptions,\r\n            knownAuthorities: this.config.auth.knownAuthorities,\r\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\r\n            authorityMetadata: this.config.auth.authorityMetadata,\r\n            skipAuthorityMetadataCache:\r\n                this.config.auth.skipAuthorityMetadataCache,\r\n        };\r\n\r\n        // build authority string based on auth params, precedence - azureCloudInstance + tenant >> authority\r\n        const resolvedAuthority =\r\n            params.requestAuthority || this.config.auth.authority;\r\n        const resolvedInstanceAware = instanceAwareEQ?.length\r\n            ? instanceAwareEQ === \"true\"\r\n            : this.config.auth.instanceAware;\r\n\r\n        const userAuthority =\r\n            account && resolvedInstanceAware\r\n                ? this.config.auth.authority.replace(\r\n                      UrlString.getDomainFromUrl(resolvedAuthority),\r\n                      account.environment\r\n                  )\r\n                : resolvedAuthority;\r\n\r\n        // fall back to the authority from config\r\n        const builtAuthority = Authority.generateAuthority(\r\n            userAuthority,\r\n            params.requestAzureCloudOptions ||\r\n                this.config.auth.azureCloudOptions\r\n        );\r\n        const discoveredAuthority = await invokeAsync(\r\n            AuthorityFactory.createDiscoveredInstance,\r\n            PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance,\r\n            this.logger,\r\n            this.performanceClient,\r\n            this.correlationId\r\n        )(\r\n            builtAuthority,\r\n            this.config.system.networkClient,\r\n            this.browserStorage,\r\n            authorityOptions,\r\n            this.logger,\r\n            this.correlationId,\r\n            this.performanceClient\r\n        );\r\n\r\n        if (account && !discoveredAuthority.isAlias(account.environment)) {\r\n            throw createClientConfigurationError(\r\n                ClientConfigurationErrorCodes.authorityMismatch\r\n            );\r\n        }\r\n\r\n        return discoveredAuthority;\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}